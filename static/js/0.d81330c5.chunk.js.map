{"version":3,"sources":["../static/js/0.d81330c5.chunk.js","../node_modules/@firebase/firestore/dist/esm/index.js","../node_modules/@firebase/firestore/dist/esm/src/util/assert.js","../node_modules/@firebase/firestore/dist/esm/src/util/error.js","../node_modules/@firebase/firestore/dist/esm/src/model/collections.js","../node_modules/@firebase/firestore/dist/esm/src/model/document_key.js","../node_modules/@firebase/firestore/dist/esm/src/util/log.js","../node_modules/@firebase/firestore/dist/esm/src/util/misc.js","../node_modules/@firebase/firestore/dist/esm/src/local/persistence_promise.js","../node_modules/@firebase/firestore/dist/esm/src/model/document.js","../node_modules/@firebase/firestore/dist/esm/src/core/snapshot_version.js","../node_modules/@firebase/firestore/dist/esm/src/util/obj.js","../node_modules/@firebase/firestore/dist/esm/src/platform/platform.js","../node_modules/@firebase/firestore/dist/esm/src/model/path.js","../node_modules/@firebase/firestore/dist/esm/src/util/sorted_map.js","../node_modules/@firebase/firestore/dist/esm/src/model/field_value.js","../node_modules/@firebase/firestore/dist/esm/src/core/timestamp.js","../node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_schema.js","../node_modules/@firebase/firestore/dist/esm/src/util/input_validation.js","../node_modules/@firebase/firestore/dist/esm/src/util/types.js","../node_modules/@firebase/firestore/dist/esm/src/local/query_data.js","../node_modules/@firebase/firestore/dist/esm/src/remote/remote_event.js","../node_modules/@firebase/firestore/dist/esm/src/model/mutation_batch.js","../node_modules/@firebase/firestore/dist/esm/src/model/mutation.js","../node_modules/@firebase/firestore/dist/esm/src/util/sorted_set.js","../node_modules/@firebase/firestore/dist/esm/src/core/view_snapshot.js","../node_modules/@firebase/firestore/dist/esm/src/local/reference_set.js","../node_modules/@firebase/firestore/dist/esm/src/local/simple_db.js","../node_modules/@firebase/firestore/dist/esm/src/core/version.js","../node_modules/@firebase/firestore/dist/esm/src/api/blob.js","../node_modules/@firebase/firestore/dist/esm/src/util/api.js","../node_modules/@firebase/firestore/dist/esm/src/api/geo_point.js","../node_modules/@firebase/firestore/dist/esm/src/core/query.js","../node_modules/@firebase/firestore/dist/esm/src/remote/rpc_error.js","../node_modules/@firebase/firestore/dist/esm/src/api/field_path.js","../node_modules/@firebase/firestore/dist/esm/src/util/obj_map.js","../node_modules/@firebase/firestore/dist/esm/src/local/encoded_resource_path.js","../node_modules/@firebase/firestore/dist/esm/src/util/promise.js","../node_modules/@firebase/firestore/dist/esm/src/remote/serializer.js","../node_modules/@firebase/firestore/dist/esm/src/core/database_info.js","../node_modules/@firebase/firestore/dist/esm/src/remote/watch_change.js","../node_modules/@firebase/firestore/dist/esm/src/core/types.js","../node_modules/@firebase/firestore/dist/esm/src/model/document_set.js","../node_modules/@firebase/firestore/dist/esm/src/local/eager_garbage_collector.js","../node_modules/@firebase/firestore/dist/esm/src/core/target_id_generator.js","../node_modules/@firebase/firestore/dist/esm/src/api/field_value.js","../node_modules/@firebase/firestore/dist/esm/src/platform_browser/browser_init.js","../node_modules/@firebase/firestore/dist/esm/src/platform_browser/browser_platform.js","../node_modules/@firebase/firestore/dist/esm/src/remote/existence_filter.js","../node_modules/@firebase/firestore/dist/esm/src/platform_browser/webchannel_connection.js","../node_modules/@firebase/webchannel-wrapper/dist/index.js","../node_modules/@firebase/firestore/dist/esm/src/remote/stream_bridge.js","../node_modules/@firebase/firestore/dist/esm/src/platform/config.js","../node_modules/@firebase/firestore/dist/esm/src/api/database.js","../node_modules/@firebase/firestore/dist/esm/src/core/firestore_client.js","../node_modules/@firebase/firestore/dist/esm/src/core/event_manager.js","../node_modules/@firebase/firestore/dist/esm/src/core/sync_engine.js","../node_modules/@firebase/firestore/dist/esm/src/local/local_view_changes.js","../node_modules/@firebase/firestore/dist/esm/src/core/view.js","../node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_persistence.js","../node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_mutation_queue.js","../node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_query_cache.js","../node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_remote_document_cache.js","../node_modules/@firebase/firestore/dist/esm/src/local/local_serializer.js","../node_modules/@firebase/firestore/dist/esm/src/local/local_store.js","../node_modules/@firebase/firestore/dist/esm/src/local/local_documents_view.js","../node_modules/@firebase/firestore/dist/esm/src/local/remote_document_change_buffer.js","../node_modules/@firebase/firestore/dist/esm/src/local/memory_persistence.js","../node_modules/@firebase/firestore/dist/esm/src/local/memory_mutation_queue.js","../node_modules/@firebase/firestore/dist/esm/src/local/memory_query_cache.js","../node_modules/@firebase/firestore/dist/esm/src/local/memory_remote_document_cache.js","../node_modules/@firebase/firestore/dist/esm/src/local/no_op_garbage_collector.js","../node_modules/@firebase/firestore/dist/esm/src/remote/datastore.js","../node_modules/@firebase/firestore/dist/esm/src/remote/persistent_stream.js","../node_modules/@firebase/firestore/dist/esm/src/remote/backoff.js","../node_modules/@firebase/firestore/dist/esm/src/remote/remote_store.js","../node_modules/@firebase/firestore/dist/esm/src/core/transaction.js","../node_modules/@firebase/firestore/dist/esm/src/util/async_observer.js","../node_modules/@firebase/firestore/dist/esm/src/util/async_queue.js","../node_modules/@firebase/firestore/dist/esm/src/api/credentials.js","../node_modules/@firebase/firestore/dist/esm/src/auth/user.js","../node_modules/@firebase/firestore/dist/esm/src/api/observer.js","../node_modules/@firebase/firestore/dist/esm/src/api/user_data_converter.js"],"names":["webpackJsonp","Array","concat","module","__webpack_exports__","__webpack_require__","registerFirestore","instance","Object","__WEBPACK_IMPORTED_MODULE_2__src_platform_config__","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__firebase_app__","fail","failure","message","__WEBPACK_IMPORTED_MODULE_0__core_version__","__WEBPACK_IMPORTED_MODULE_1__log__","Error","assert","assertion","d","Code","FirestoreError","__extends","this","extendStatics","setPrototypeOf","__proto__","b","p","hasOwnProperty","__","constructor","prototype","create","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","_super","code","_this","call","name","toString","maybeDocumentMap","EMPTY_MAYBE_DOCUMENT_MAP","documentMap","EMPTY_DOCUMENT_MAP","documentVersionMap","EMPTY_DOCUMENT_VERSION_MAP","documentKeySet","EMPTY_DOCUMENT_KEY_SET","__WEBPACK_IMPORTED_MODULE_0__util_sorted_map__","__WEBPACK_IMPORTED_MODULE_1__util_sorted_set__","__WEBPACK_IMPORTED_MODULE_2__document_key__","comparator","DocumentKey","__WEBPACK_IMPORTED_MODULE_0__util_assert__","__WEBPACK_IMPORTED_MODULE_1__path__","path","isDocumentKey","toArray","join","equals","other","k1","k2","length","fromSegments","segments","slice","fromPathString","fromString","EMPTY","getLogLevel","logLevel","setLogLevel","newLevel","debug","tag","msg","obj","_i","arguments","LogLevel","DEBUG","time","Date","toISOString","args","map","argToString","console","log","apply","error","ERROR","platform","__WEBPACK_IMPORTED_MODULE_1__platform_platform__","getPlatform","formatJSON","e","primitiveComparator","left","right","undefined","arrayEquals","i","immediatePredecessor","s","lastIndex","charAt","substring","String","fromCharCode","charCodeAt","immediateSuccessor","AutoId","__WEBPACK_IMPORTED_MODULE_0__assert__","newId","chars","autoId","Math","floor","random","PersistencePromise","callback","nextCallback","catchCallback","result","isDone","callbackAttached","catch","fn","next","nextFn","catchFn","wrapFailure","wrapSuccess","resolve","reject","toPromise","Promise","wrapUserFunction","waitFor","all","reduce","promise","nextPromise","idx","results","first","initial","push","Document","NoDocument","__WEBPACK_IMPORTED_MODULE_1__document_key__","key","version","data","options","hasLocalMutations","field","fieldValue","compareByKey","d1","d2","compareByField","v1","v2","compareTo","SnapshotVersion","__WEBPACK_IMPORTED_MODULE_0__timestamp__","timestamp","fromMicroseconds","seconds","nanos","fromTimestamp","forDeletedDoc","MIN","toMicroseconds","toTimestamp","contains","defaulted","defaultValue","forEachNumber","num","parseInt","isNaN","forEach","isEmpty","shallowCopy","emptyByteString","PlatformSupport","setPlatform","ResourcePath","FieldPath","__WEBPACK_IMPORTED_MODULE_1__util_error__","Path","offset","init","len","construct","getPrototypeOf","get","enumerable","configurable","child","nameOrPath","limit","segment","popFirst","size","popLast","firstSegment","lastSegment","index","isPrefixOf","end","p1","p2","min","canonicalString","indexOf","split","filter","EMPTY_PATH","identifierRegExp","isValidIdentifier","test","str","replace","isKeyField","keyField","fromServerFormat","current","addCurrentSegment","inBackticks","c","SortedMap","root","LLRBNode","insert","copy","BLACK","remove","node","cmp","getPredecessorKey","rightParent","prunedNodes","minKey","maxKey","inorderTraversal","action","k","v","reverseTraversal","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","startKey","isReverse","nodeStack","getNext","pop","hasNext","peek","color","RED","n","fixUp","removeMin","isRed","moveRedLeft","smallest","rotateRight","moveRedRight","rotateLeft","colorFlip","nl","nr","checkMaxDepth","blackDepth","check","pow","LLRBEmptyNode","numericComparator","numericEquals","NullValue","BooleanValue","IntegerValue","DoubleValue","StringValue","TimestampValue","ServerTimestampValue","BlobValue","RefValue","GeoPointValue","ObjectValue","ArrayValue","TypeOrder","__WEBPACK_IMPORTED_MODULE_1__util_misc__","__WEBPACK_IMPORTED_MODULE_2__util_sorted_map__","__WEBPACK_IMPORTED_MODULE_3__document_key__","FieldValue","val","defaultCompareTo","typeOrder","internalValue","INSTANCE","of","TRUE","FALSE","NumberValue","NAN","NaN","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","toDate","localWriteTime","_equals","_compareTo","databaseId","it1","it2","next1","next2","set","to","setChild","newChild","delete","pathSegment","JSON","stringify","childName","minLength","Timestamp","isoRegExp","RegExp","now","fromEpochMilliseconds","fromDate","date","getTime","milliseconds","fromISOString","utc","fraction","exec","nanoStr","substr","toEpochMilliseconds","createOrUpgradeDb","db","oldVersion","createObjectStore","DbMutationQueue","store","keyPath","DbMutationBatch","DbTargetDocument","createIndex","documentTargetsIndex","documentTargetsKeyPath","unique","DbTarget","queryTargetsIndexName","queryTargetsKeyPath","DbDocumentMutation","DbRemoteDocument","DbOwner","DbTargetGlobal","SCHEMA_VERSION","DbTimestamp","DbNoDocument","ALL_STORES","__WEBPACK_IMPORTED_MODULE_1__encoded_resource_path__","ownerId","leaseTimestampMs","userId","lastAcknowledgedBatchId","lastStreamToken","batchId","localWriteTimeMs","mutations","prefixForUser","prefixForPath","PLACEHOLDER","readTime","noDocument","document","targetId","canonicalId","resumeToken","lastListenSequenceNumber","query","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","validateExactNumberOfArgs","functionName","numberOfArgs","__WEBPACK_IMPORTED_MODULE_1__error__","formatPlural","validateAtLeastNumberOfArgs","minNumberOfArgs","validateBetweenNumberOfArgs","maxNumberOfArgs","validateNamedArrayAtLeastNumberOfElements","minNumberOfElements","validateArgType","type","position","argument","validateType","ordinal","validateOptionalArgType","validateNamedType","optionName","validateNamedOptionalType","inputName","input","isPlainObject","description","valueDescription","customObjectName","tryGetCustomObjectType","funcNameRegex","validateDefined","validateOptionNames","optionNames","__WEBPACK_IMPORTED_MODULE_2__obj__","_","invalidClassError","isNullOrUndefined","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","NumberAsAny","Number","isFinite","QueryPurpose","QueryData","__WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__","purpose","snapshotVersion","update","updated","RemoteEvent","CurrentStatusUpdate","ResetMapping","UpdateMapping","__WEBPACK_IMPORTED_MODULE_1__model_collections__","__WEBPACK_IMPORTED_MODULE_2__platform_platform__","targetChanges","documentUpdates","addDocumentUpdate","doc","handleExistenceFilterMismatch","mapping","currentStatusUpdate","MarkNotCurrent","EMPTY_KEY_SET","docs","add","addedDocuments","removedDocuments","applyToKeySet","keys","BATCHID_UNKNOWN","MutationBatch","MutationBatchResult","__WEBPACK_IMPORTED_MODULE_0__collections__","__WEBPACK_IMPORTED_MODULE_1__util_assert__","__WEBPACK_IMPORTED_MODULE_2__util_misc__","applyToRemoteDocument","docKey","maybeDoc","batchResult","mutationResults","mutation","mutationResult","applyToLocalView","keySet","_a","isTombstone","toTombstone","batch","commitVersion","streamToken","docVersions","from","versionMap","FieldMask","ServerTimestampTransform","FieldTransform","MutationResult","Precondition","SetMutation","PatchMutation","TransformMutation","DeleteMutation","MutationType","__WEBPACK_IMPORTED_MODULE_3__document__","__WEBPACK_IMPORTED_MODULE_4__field_value__","fields","transform","transformResults","updateTime","exists","isValidFor","isNone","NONE","Mutation","verifyKeyMatches","getPostMutationVersion","precondition","Set","fieldMask","Patch","newData","patchDocument","patchObject","fieldPath","newValue","fieldTransforms","Transform","requireDocument","transformObject","localTransformResults","fieldTransform","Delete","SortedSet","__WEBPACK_IMPORTED_MODULE_0__sorted_map__","fromMapKeys","has","elem","last","cb","forEachInRange","range","iter","forEachWhile","start","firstAfterOrEqual","unionWith","thisIt","otherIt","thisElem","otherElem","ChangeType","SyncState","DocumentChangeSet","__WEBPACK_IMPORTED_MODULE_0__model_document_key__","changeMap","track","change","oldChange","Added","Metadata","Removed","Modified","getChanges","changes","ReferenceSet","DocReference","__WEBPACK_IMPORTED_MODULE_0__model_collections__","__WEBPACK_IMPORTED_MODULE_1__model_document_key__","__WEBPACK_IMPORTED_MODULE_3__util_sorted_set__","__WEBPACK_IMPORTED_MODULE_4__persistence_promise__","refsByKey","refsByTarget","compareByTargetId","garbageCollector","addReference","id","ref","addReferences","removeReference","removeRef","removeReferences","removeReferencesForId","emptyKey","startRef","endRef","removeAllReferences","addPotentialGarbageKey","referencesForId","setGarbageCollector","containsKey","txn","firstRef","targetOrBatchId","wrapRequest","request","__WEBPACK_IMPORTED_MODULE_2__persistence_promise__","onsuccess","event","target","onerror","SimpleDb","SimpleDbTransaction","__WEBPACK_IMPORTED_MODULE_1__util_log__","LOG_TAG","openOrCreate","runUpgrade","isAvailable","window","indexedDB","open","onupgradeneeded","deleteDatabase","ua","navigator","userAgent","runTransaction","mode","objectStores","transactionFn","transaction","transactionFnResult","abort","completionPromise","then","close","IterationController","dbCursor","shouldStop","nextKey","done","skip","objectStoresNames","aborted","onabort","oncomplete","storeName","objectStore","SimpleDbStore","put","keyOrValue","loadAll","indexOrRange","cursor","iterateCursor","deleteAll","keysOnly","control","iterate","optionsOrCallback","cursorRequest","controller","userResult","primaryKey","skipToKey","continue","indexName","direction","reverse","openKeyCursor","openCursor","SDK_VERSION","assertUint8ArrayAvailable","Uint8Array","__WEBPACK_IMPORTED_MODULE_2__util_error__","assertBase64Available","__WEBPACK_IMPORTED_MODULE_0__platform_platform__","base64Available","Blob","PublicBlob","__WEBPACK_IMPORTED_MODULE_1__util_api__","__WEBPACK_IMPORTED_MODULE_3__util_input_validation__","__WEBPACK_IMPORTED_MODULE_4__util_misc__","binaryString","_binaryString","fromBase64String","base64","atob","fromUint8Array","array","char","toBase64","btoa","toUint8Array","buffer","makeConstructorPrivate","cls","optionalMessage","PublicConstructor","__WEBPACK_IMPORTED_MODULE_0__error__","staticProperty","GeoPoint","__WEBPACK_IMPORTED_MODULE_0__util_error__","__WEBPACK_IMPORTED_MODULE_1__util_input_validation__","latitude","longitude","_lat","_long","fieldFilter","op","__WEBPACK_IMPORTED_MODULE_2__model_field_value__","RelationOp","EQUAL","__WEBPACK_IMPORTED_MODULE_5__util_error__","NullFilter","NanFilter","RelationFilter","Query","Direction","Bound","OrderBy","__WEBPACK_IMPORTED_MODULE_0__model_document__","__WEBPACK_IMPORTED_MODULE_3__model_path__","__WEBPACK_IMPORTED_MODULE_4__util_assert__","__WEBPACK_IMPORTED_MODULE_6__util_types__","explicitOrderBy","filters","startAt","endAt","memoizedCanonicalId","memoizedOrderBy","assertValidBound","atPath","inequalityField","getInequalityFilterField","firstOrderByField","getFirstOrderByField","KEY_ORDERING_ASC","foundKeyOrdering","orderBy","lastDirection","dir","ASCENDING","KEY_ORDERING_DESC","addFilter","isInequality","newFilters","addOrderBy","newOrderBy","withLimit","withStartAt","bound","withEndAt","_b","_c","docComparator","comparedOnKeyField","comp","compare","matches","matchesAncestor","matchesOrderBy","matchesFilters","matchesBounds","hasLimit","isDocumentQuery","docPath","sortsBeforeDocument","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","GREATER_THAN","refValue","comparison","matchesComparison","matchesValue","DESCENDING","before","orderByComponent","component","docValue","thisPosition","otherPosition","isKeyOrderBy","isPermanentError","mapCodeFromRpcStatus","status","RpcCode","mapCodeFromRpcCode","__WEBPACK_IMPORTED_MODULE_2__util_log__","mapRpcCodeFromCode","mapCodeFromHttpStatus","fromDotSeparatedString","search","RESERVED","bind","__WEBPACK_IMPORTED_MODULE_0__model_path__","__WEBPACK_IMPORTED_MODULE_2__util_input_validation__","fieldNames","_internalPath","documentId","_DOCUMENT_ID","ObjectMap","__WEBPACK_IMPORTED_MODULE_0__obj__","mapKeyFn","inner","matches_1","otherKey","splice","entries","entries_1","encode","encodeSeparator","encodeSegment","resultBuf","escapeChar","encodedNul","encodedEscape","encodedSeparatorChar","decode","lastReasonableEscapeIndex","segmentBuilder","currentPiece","Deferred","assertPresent","__WEBPACK_IMPORTED_MODULE_12__util_assert__","__WEBPACK_IMPORTED_MODULE_15__util_types__","parseInt64","hasTag","JsonProtoSerializer","__WEBPACK_IMPORTED_MODULE_0__api_blob__","__WEBPACK_IMPORTED_MODULE_1__api_geo_point__","__WEBPACK_IMPORTED_MODULE_2__core_database_info__","__WEBPACK_IMPORTED_MODULE_3__core_query__","__WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__","__WEBPACK_IMPORTED_MODULE_5__core_timestamp__","__WEBPACK_IMPORTED_MODULE_6__local_query_data__","__WEBPACK_IMPORTED_MODULE_7__model_document__","__WEBPACK_IMPORTED_MODULE_8__model_document_key__","__WEBPACK_IMPORTED_MODULE_9__model_field_value__","__WEBPACK_IMPORTED_MODULE_10__model_mutation__","__WEBPACK_IMPORTED_MODULE_11__model_path__","__WEBPACK_IMPORTED_MODULE_13__util_error__","__WEBPACK_IMPORTED_MODULE_14__util_obj__","__WEBPACK_IMPORTED_MODULE_16__existence_filter__","__WEBPACK_IMPORTED_MODULE_17__rpc_error__","__WEBPACK_IMPORTED_MODULE_18__watch_change__","DIRECTIONS","dirs","OPERATORS","ops","useProto3Json","unsafeCastProtoByteString","byteString","fromRpcStatus","toInt32Value","fromInt32Value","toBytes","bytes","fromBlob","blob","toVersion","fromVersion","toResourceName","fullyQualifiedPrefixPath","fromResourceName","resource","isValidResourceName","toName","fromName","projectId","database","extractLocalPathFromResourceName","toQueryPath","encodedDatabaseId","fromQueryPath","resourceName","toValue","nullValue","booleanValue","integerValue","doubleValue","stringValue","mapValue","toMapValue","arrayValue","toArrayValue","timestampValue","geoPointValue","bytesValue","referenceValue","fromValue","fromFields","values","dbId","toMutationDocument","toFields","toDocument","fromDocument","object","fromFound","found","fromMissing","missing","fromMaybeDocument","toWatchTargetChangeState","state","Current","NoChange","Reset","toTestWatchChange","watchChange","count","existenceFilter","newDoc","documentChange","targetIds","updatedTargetIds","removedTargetIds","documentDelete","documentRemove","cause","targetChange","targetChangeType","fromWatchChange","fromWatchTargetChangeState","causeProto","entityChange","docDelete","docRemove","versionFromListenResponse","toMutation","updateMask","toDocumentMask","toFieldTransform","currentDocument","toPrecondition","fromMutation","proto","fromPrecondition","fromDocumentMask","fromFieldTransform","fromWriteResult","fromWriteResults","protos","setToServerValue","toDocumentsTarget","documents","fromDocumentsTarget","documentsTarget","toQueryTarget","structuredQuery","parent","collectionId","where","toFilter","toOrder","toCursor","fromQueryTarget","fromCount","filterBy","fromFilter","fromOrder","fromCursor","toListenRequestLabels","queryData","toLabel","goog-listen-tags","Listen","ExistenceFilterMismatch","LimboResolution","toTarget","toRelationFilter","toUnaryFilter","compositeFilter","unaryFilter","fromUnaryFilter","fromRelationFilter","f","accum","orderBys","order","toPropertyOrder","fromPropertyOrder","toDirection","fromDirection","toOperatorName","fromOperatorName","toFieldPathReference","fromFieldPathReference","fieldReference","nanField","nullField","fieldPaths","paths","DatabaseInfo","DatabaseId","__WEBPACK_IMPORTED_MODULE_0__util_misc__","persistenceKey","host","ssl","DEFAULT_DATABASE_NAME","applyResumeToken","DocumentWatchChange","ExistenceFilterChange","WatchTargetChangeState","WatchTargetChange","WatchChangeAggregator","__WEBPACK_IMPORTED_MODULE_2__util_assert__","__WEBPACK_IMPORTED_MODULE_3__util_obj__","__WEBPACK_IMPORTED_MODULE_4__remote_event__","listenTargets","pendingTargetResponses","existenceFilters","frozen","addDocumentChange","addTargetChange","addExistenceFilterChange","addChanges","watchChanges","createRemoteEvent","isActiveTarget","ensureTargetChange","None","docChange","relevant","recordTargetResponse","MarkCurrent","newCount","OnlineState","DocumentSet","__WEBPACK_IMPORTED_MODULE_1__util_sorted_map__","__WEBPACK_IMPORTED_MODULE_2__collections__","keyedMap","sortedSet","emptySet","oldSet","prevDoc","thisDoc","otherDoc","docStrings","newSet","EagerGarbageCollector","__WEBPACK_IMPORTED_MODULE_1__persistence_promise__","isEager","sources","potentialGarbage","addGarbageSource","garbageSource","removeGarbageSource","collectGarbage","promises","garbageKeys","hasRefsPromise","documentHasAnyReferences","hasRefs","source","TargetIdGenerator","GeneratorIds","RESERVED_BITS","generatorId","initAfter","afterWithoutGenerator","afterGenerator","previousId","forLocalStore","LocalStore","forSyncEngine","SyncEngine","FieldValueImpl","DeleteFieldValueImpl","ServerTimestampFieldValueImpl","PublicFieldValue","__WEBPACK_IMPORTED_MODULE_0__util_api__","serverTimestamp","__WEBPACK_IMPORTED_MODULE_1__browser_platform__","BrowserPlatform","__WEBPACK_IMPORTED_MODULE_0__remote_serializer__","__WEBPACK_IMPORTED_MODULE_1__webchannel_connection__","loadConnection","databaseInfo","newSerializer","encoded","raw","ExistenceFilter","WebChannelConnection","__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__","__WEBPACK_IMPORTED_MODULE_1__core_version__","__WEBPACK_IMPORTED_MODULE_2__remote_rpc_error__","__WEBPACK_IMPORTED_MODULE_3__remote_stream_bridge__","__WEBPACK_IMPORTED_MODULE_6__util_log__","RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","X_GOOG_API_CLIENT_VALUE","info","pool","baseUrl","modifyHeadersForRequest","headers","token","header","authHeaders","invokeRPC","rpcName","url","makeUrl","getObject","xhr","listenOnce","COMPLETE","getLastErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","status_1","getStatus","getResponseText","getStatusText","getLastError","releaseObject","requestString","Content-Type","send","invokeStreamingRPC","openStream","urlParts","webchannelTransport","backgroundChannelTest","httpSessionIdParam","initMessageHeaders","httpHeadersOverwriteParam","sendRawJson","supportsCrossDomainXhr","channel","createWebChannel","opened","closed","streamBridge","sendFn","closeFn","unguardedEventListen","listen","param","setTimeout","EventType","OPEN","CLOSE","callOnClose","err","MESSAGE","msgData","status_2","callOnMessage","callOnOpen","urlRpcName","exports","global","l","a","aa","ba","propertyIsEnumerable","ca","da","fa","ha","unshift","r","Function","ia","u","L","Ab","ja","captureStackTrace","stack","ka","shift","ma","na","oa","w","qa","ra","q","ea","va","wa","xa","ya","y","x","Ba","Ca","Da","Ea","Ga","Fa","Ha","Ia","Ja","Oa","documentMode","Ta","la","Pa","max","h","m","A","$a","relatedTarget","button","screenY","screenX","clientY","clientX","metaKey","shiftKey","altKey","ctrlKey","pointerId","pointerType","changedTouches","srcElement","Ma","nodeName","fromElement","toElement","pageX","pageY","ab","defaultPrevented","bb","eb","listener","src","capture","ga","Y","fb","gb","ib","sa","jb","hb","nb","once","ob","pb","qb","rb","kb","sb","addEventListener","Za","attachEvent","tb","addListener","removeListener","mb","ub","Xa","vb","wb","removeEventListener","detachEvent","lb","xb","yb","keyCode","returnValue","parentNode","zb","handleEvent","B","P","J","Bb","Cb","eval","Db","Eb","Fb","Boolean","Gb","valueOf","Ib","Hb","Jb","Kb","Ob","Pb","Lb","Qb","Sb","MessageChannel","postMessage","createElement","style","display","documentElement","appendChild","contentWindow","write","location","protocol","origin","port1","onmessage","port2","za","onreadystatechange","removeChild","Ub","Tb","Vb","setImmediate","Window","Rb","Nb","Wb","Xb","g","t","Yb","$","K","clearTimeout","Zb","$b","ac","X","C","cc","dc","reset","fc","D","lc","oc","nc","mc","jc","lastIndexOf","E","hc","pc","ic","F","kc","qc","rc","H","G","Z","Mb","sc","tc","uc","vc","I","wc","gc","xc","parse","zc","Ac","yc","dispatchEvent","Bc","Cc","Dc","Ec","Hc","Ic","Jc","Lc","Mc","ActiveXObject","XMLHttpRequest","T","N","S","Nc","Oc","j","U","o","M","Pc","Sc","Tc","Uc","Vc","Wc","Xc","Qa","Yc","W","Ka","V","Zc","$c","ad","bd","cd","dd","ed","Rc","Qc","fd","gd","hd","ta","O","jd","kd","md","decodeURIComponent","nd","od","pd","qd","rd","match","ld","sd","td","zd","ud","Ad","Q","Bd","abs","Cd","Dd","decodeURI","encodeURI","Ed","R","Gd","Fd","Hd","toLowerCase","Id","Kd","Jd","Ld","Md","Od","Pd","Qd","Rd","Sd","Td","Vd","Wd","Xd","Yd","Zd","pa","$d","ae","be","ce","de","ee","fe","ge","he","ie","encodeURIComponent","je","Image","onload","ke","ontimeout","le","qe","z","timeout","oe","re","se","te","goog","La","self","me","pe","readyState","ue","ve","we","Ua","concurrentRequestLimit","fastHandshake","xe","ye","ze","sendBeacon","Ae","cancel","Be","Ce","De","Ee","Fe","He","Ge","round","Va","Ie","Na","Je","Ke","Ud","Aa","Le","hostname","port","Me","Ne","Oe","testUrl","messageUrlParams","messageHeaders","clientProtocolHeaderRequired","X-Client-Protocol","messageContentType","X-WebChannel-Content-Type","Pe","Qe","__sm__","Re","Te","Ue","Ve","We","Xe","Ye","Ze","$e","af","trim","Ra","Sa","parseFloat","compatMode","Wa","freeze","Ya","2","3","4","preventDefault","\"","\\","/","\b","\f","\n","\r","\t","\u000b","bc","ec","Fc","Gc","Kc","vd","wd","xd","yd","Nd","getResponseHeader","ne","toUpperCase","FormData","setRequestHeader","responseType","withCredentials","statusText","responseText","__data__","Se","createWebChannelTransport","ErrorCode","WebChannel","XhrIoPool","StreamBridge","wrappedOnOpen","wrappedOnClose","wrappedOnMessage","onOpen","onClose","onMessage","configureForFirebase","firebase","registerService","app","__WEBPACK_IMPORTED_MODULE_1__api_database__","__WEBPACK_IMPORTED_MODULE_5__util_obj__","firestoreNamespace","__WEBPACK_IMPORTED_MODULE_2__api_field_path__","__WEBPACK_IMPORTED_MODULE_3__api_field_value__","__WEBPACK_IMPORTED_MODULE_4__api_geo_point__","Firestore","Transaction","WriteBatch","DocumentReference","DocumentSnapshot","QuerySnapshot","CollectionReference","validateSetOptions","methodName","merge","__WEBPACK_IMPORTED_MODULE_16__util_input_validation__","validateReference","documentRef","firestore","__WEBPACK_IMPORTED_MODULE_15__util_error__","changesFromSnapshot","snapshot","oldDocs","lastDoc_1","index_1","docChanges","fromCache","__WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__","oldIndex","newIndex","indexTracker_1","resultChangeType","PublicFirestore","PublicTransaction","PublicWriteBatch","PublicDocumentReference","PublicDocumentSnapshot","PublicQuery","PublicQuerySnapshot","PublicCollectionReference","__WEBPACK_IMPORTED_MODULE_0__field_path__","__WEBPACK_IMPORTED_MODULE_1__core_database_info__","__WEBPACK_IMPORTED_MODULE_2__core_firestore_client__","__WEBPACK_IMPORTED_MODULE_5__model_document__","__WEBPACK_IMPORTED_MODULE_6__model_document_key__","__WEBPACK_IMPORTED_MODULE_7__model_field_value__","__WEBPACK_IMPORTED_MODULE_8__model_mutation__","__WEBPACK_IMPORTED_MODULE_9__model_path__","__WEBPACK_IMPORTED_MODULE_10__platform_platform__","__WEBPACK_IMPORTED_MODULE_11__util_api__","__WEBPACK_IMPORTED_MODULE_13__util_async_observer__","__WEBPACK_IMPORTED_MODULE_14__util_async_queue__","__WEBPACK_IMPORTED_MODULE_17__util_log__","__WEBPACK_IMPORTED_MODULE_18__util_misc__","__WEBPACK_IMPORTED_MODULE_19__util_obj__","__WEBPACK_IMPORTED_MODULE_20__credentials__","__WEBPACK_IMPORTED_MODULE_21__observer__","__WEBPACK_IMPORTED_MODULE_22__user_data_converter__","DEFAULT_HOST","DEFAULT_SSL","FirestoreSettings","settings","credentials","FirestoreConfig","databaseIdOrApp","_queue","_firestoreClient","shutdown","disableNetwork","enableNetwork","drainAsyncQueue","executeDelayedTasks","drain","config","firebaseApp","databaseIdFromApp","external_1","_config","_databaseId","settingsLiteral","newSettings","enablePersistence","configureClient","ensureClientConfigured","persistence","preConverter","thisDb","otherDb","_key","_dataConverter","collection","pathString","forPath","updateFunction","SILENT","level","_firestore","_transaction","lookup","parsed","parseMergeData","parseSetData","fieldOrUpdateData","moreFieldsAndValues","parseUpdateVarargs","parseUpdateData","_mutations","_committed","verifyNotCommitted","toMutations","commit","isEqual","onSnapshot","observer","includeMetadataChanges","currArg","internalOptions","includeDocumentMetadataChanges","includeQueryMetadataChanges","complete","onSnapshotInternal","errHandler","asyncObserver","internalListener","mute","unlisten","waitForSyncWhenOnline","snap","metadata","_document","_fromCache","convertObject","convertValue","hasPendingWrites","convertArray","_query","opStr","parseQueryValue","validateNewFilter","directionStr","validateNewOrderBy","docOrField","boundFromDocOrFields","startAfter","endBefore","boundFromDocument","allFields","boundFromFields","components","rawValue","wrapped","firestoreClient","existingField","validateOrderByAndInequalityMatch","inequality","_originalQuery","_snapshot","_cachedChanges","thisArg","convertToDocumentImpl","parentPath","docRef","FirestoreClient","__WEBPACK_IMPORTED_MODULE_0__event_manager__","__WEBPACK_IMPORTED_MODULE_1__sync_engine__","__WEBPACK_IMPORTED_MODULE_2__local_eager_garbage_collector__","__WEBPACK_IMPORTED_MODULE_3__local_indexeddb_persistence__","__WEBPACK_IMPORTED_MODULE_4__local_local_store__","__WEBPACK_IMPORTED_MODULE_5__local_memory_persistence__","__WEBPACK_IMPORTED_MODULE_6__local_no_op_garbage_collector__","__WEBPACK_IMPORTED_MODULE_7__remote_datastore__","__WEBPACK_IMPORTED_MODULE_8__remote_remote_store__","__WEBPACK_IMPORTED_MODULE_9__remote_serializer__","__WEBPACK_IMPORTED_MODULE_10__util_error__","__WEBPACK_IMPORTED_MODULE_11__util_log__","__WEBPACK_IMPORTED_MODULE_12__util_promise__","asyncQueue","usePersistence","initializationDone","persistenceResult","initialized","setUserChangeListener","user","schedule","handleUserChange","initializePersistence","initializeRest","remoteStore","startIndexedDbPersistence","canFallback","warn","startMemoryPersistence","storagePrefix","buildStoragePrefix","serializer","connection","localStore","datastore","onlineStateChangedHandler","onlineState","eventMgr","onOnlineStateChanged","syncEngine","verifyOperationInProgress","uid","removeUserChangeListener","deferred","EventManager","QueryListener","__WEBPACK_IMPORTED_MODULE_0__types__","__WEBPACK_IMPORTED_MODULE_1__view_snapshot__","__WEBPACK_IMPORTED_MODULE_2__model_document_set__","__WEBPACK_IMPORTED_MODULE_3__util_assert__","__WEBPACK_IMPORTED_MODULE_4__util_obj_map__","QueryListenersInfo","listeners","queries","Unknown","subscribe","onChange","onError","firstListen","queryInfo","viewSnap","onViewSnapshot","lastListen","viewSnaps","viewSnaps_1","queryObserver","raisedInitialEvent","syncStateChanged","shouldRaiseEvent","shouldRaiseInitialEvent","raiseInitialEvent","maybeOnline","Failed","hasPendingWritesChanged","getInitialViewChanges","__WEBPACK_IMPORTED_MODULE_0__local_eager_garbage_collector__","__WEBPACK_IMPORTED_MODULE_1__local_local_view_changes__","__WEBPACK_IMPORTED_MODULE_2__local_query_data__","__WEBPACK_IMPORTED_MODULE_3__local_reference_set__","__WEBPACK_IMPORTED_MODULE_4__model_document__","__WEBPACK_IMPORTED_MODULE_5__model_document_key__","__WEBPACK_IMPORTED_MODULE_6__remote_remote_event__","__WEBPACK_IMPORTED_MODULE_7__util_assert__","__WEBPACK_IMPORTED_MODULE_8__util_log__","__WEBPACK_IMPORTED_MODULE_9__util_misc__","__WEBPACK_IMPORTED_MODULE_10__util_obj__","__WEBPACK_IMPORTED_MODULE_11__util_obj_map__","__WEBPACK_IMPORTED_MODULE_12__util_sorted_map__","__WEBPACK_IMPORTED_MODULE_13__util_types__","__WEBPACK_IMPORTED_MODULE_14__query__","__WEBPACK_IMPORTED_MODULE_15__snapshot_version__","__WEBPACK_IMPORTED_MODULE_16__target_id_generator__","__WEBPACK_IMPORTED_MODULE_17__view__","QueryView","view","currentUser","viewHandler","errorHandler","queryViewsByQuery","queryViewsByTarget","limboTargetsByKey","limboKeysByTarget","limboDocumentRefs","limboCollector","mutationUserCallbacks","targetIdGenerator","assertSubscribed","allocateQuery","executeQuery","remoteDocumentKeys","remoteKeys","viewDocChanges","computeDocChanges","viewChange","applyChanges","limboChanges","queryView","releaseQuery","removeAndCleanupQuery","userCallback","localWrite","addMutationCallback","emitNewSnapsAndNotifyLocalStore","fillWritePipeline","wrapUpdateFunctionError","retries","createTransaction","userPromise","applyRemoteEvent","remoteEvent","limboKey","rejectListen","docMap","event_1","queryView_1","applySuccessfulWrite","mutationBatchResult","processUserCallback","acknowledgeBatch","rejectFailedWrite","rejectBatch","newCallbacks","toKey","gcLimboDocuments","updateTrackedLimbos","limboChanges_1","limboChange","trackLimboChange","limboTargetId","currentLimboDocs","newSnaps","docChangesInAllViews","queriesProcessed","needsRefill","fromSnapshot","notifyLocalViewChanges","fnName","LocalViewChanges","__WEBPACK_IMPORTED_MODULE_0__core_view_snapshot__","addedKeys","removedKeys","viewSnapshot","compareChangeType","c1","c2","__WEBPACK_IMPORTED_MODULE_5__view_snapshot__","AddedLimboDocument","RemovedLimboDocument","View","__WEBPACK_IMPORTED_MODULE_1__model_document__","__WEBPACK_IMPORTED_MODULE_3__remote_remote_event__","syncedDocuments","syncState","limboDocuments","mutatedKeys","documentSet","previousChanges","changeSet","oldDocumentSet","newMutatedKeys","newDocumentSet","lastDocInLimit","newMaybeDoc","oldDoc","docsEqual","sort","applyTargetChange","synced","newSyncState","Synced","Local","shouldBeInLimbo","targetMapping","oldLimboDocuments","IndexedDbPersistence","__WEBPACK_IMPORTED_MODULE_3__util_misc__","__WEBPACK_IMPORTED_MODULE_4__indexeddb_mutation_queue__","__WEBPACK_IMPORTED_MODULE_5__indexeddb_query_cache__","__WEBPACK_IMPORTED_MODULE_6__indexeddb_remote_document_cache__","__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__","__WEBPACK_IMPORTED_MODULE_8__local_serializer__","__WEBPACK_IMPORTED_MODULE_9__persistence_promise__","__WEBPACK_IMPORTED_MODULE_10__simple_db__","EXISTING_OWNER_ERROR_MSG","prefix","generateOwnerId","dbName","MAIN_DATABASE","localStoragePrefix","started","simpleDb","tryAcquireOwnerLease","scheduleOwnerLeaseRefreshes","attachWindowUnloadHook","persistenceError","detachWindowUnloadHook","stopOwnerLeaseRefreshes","releaseOwnerLease","getMutationQueue","forUser","getQueryCache","getRemoteDocumentCache","operation","ensureOwnerLease","isDefaultDatabase","dbOwner","validOwner","newDbOwner","minAcceptable","maxAcceptable","getZombiedOwnerId","ownerLeaseRefreshHandle","setInterval","reason","clearInterval","windowUnloadHandler","setZombiedOwnerId","zombiedOwnerId","localStorage","getItem","zombiedOwnerLocalStorageKey","zombieOwnerId","removeItem","setItem","validateStreamToken","mutationsStore","getStore","__WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__","documentMutationsStore","mutationQueuesStore","__WEBPACK_IMPORTED_MODULE_7__simple_db__","IndexedDbMutationQueue","__WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__","__WEBPACK_IMPORTED_MODULE_4__encoded_resource_path__","__WEBPACK_IMPORTED_MODULE_6__persistence_promise__","isUnauthenticated","loadNextBatchIdFromDb","nextBatchId","checkEmpty","empty","maxBatchId","nextUser","IDBKeyRange","keyForBatchId","getNextBatchId","getHighestAcknowledgedBatchId","getLastStreamToken","setLastStreamToken","addMutationBatch","dbBatch","toDbMutationBatch","mutations_1","indexKey","lookupMutationBatch","fromDbMutationBatch","getNextMutationBatchAfterBatchId","lowerBound","foundBatch","getAllMutationBatches","dbBatches","getAllMutationBatchesThroughBatchId","getAllMutationBatchesAffectingDocumentKey","documentKey","indexPrefix","indexStart","userID","encodedPath","batchID","mutationKey","getAllMutationBatchesAffectingQuery","queryPath","immediateChildrenLength","uniqueBatchIDs","removeMutationBatches","batches","indexTxn","this_1","batches_1","only","numDeleted","removePromise","performConsistencyCheck","startRange","danglingMutationReferences","targetsStore","globalTargetStore","documentTargetStore","__WEBPACK_IMPORTED_MODULE_9__simple_db__","IndexedDbQueryCache","__WEBPACK_IMPORTED_MODULE_1__core_timestamp__","__WEBPACK_IMPORTED_MODULE_2__model_collections__","__WEBPACK_IMPORTED_MODULE_3__model_document_key__","__WEBPACK_IMPORTED_MODULE_5__util_misc__","__WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__","__WEBPACK_IMPORTED_MODULE_8__persistence_promise__","lastSavedVersion","getHighestTargetId","getLastRemoteSnapshotVersion","setLastRemoteSnapshotVersion","addQueryData","addedQueryPromise","toDbTarget","removeQueryData","removeMatchingKeysForTargetId","getQueryData","fromDbTarget","addMatchingKeys","removeMatchingKeys","notifyGCForRemovedKeys","getMatchingKeysForTargetId","remoteDocumentsStore","__WEBPACK_IMPORTED_MODULE_4__simple_db__","__WEBPACK_IMPORTED_MODULE_3__indexeddb_schema__","dbKey","IndexedDbRemoteDocumentCache","addEntry","maybeDocument","toDbRemoteDocument","removeEntry","getEntry","dbRemoteDoc","fromDbRemoteDocument","getDocumentsMatchingQuery","dbQuery","LocalSerializer","__WEBPACK_IMPORTED_MODULE_2__model_document__","__WEBPACK_IMPORTED_MODULE_4__model_mutation_batch__","__WEBPACK_IMPORTED_MODULE_5__util_assert__","__WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__","__WEBPACK_IMPORTED_MODULE_7__query_data__","remoteSerializer","remoteDoc","serializedMutations","dbTarget","queryProto","dbTimestamp","__WEBPACK_IMPORTED_MODULE_1__core_target_id_generator__","__WEBPACK_IMPORTED_MODULE_2__core_timestamp__","__WEBPACK_IMPORTED_MODULE_3__model_collections__","__WEBPACK_IMPORTED_MODULE_5__remote_remote_event__","__WEBPACK_IMPORTED_MODULE_6__util_assert__","__WEBPACK_IMPORTED_MODULE_7__util_log__","__WEBPACK_IMPORTED_MODULE_8__util_obj__","__WEBPACK_IMPORTED_MODULE_9__local_documents_view__","__WEBPACK_IMPORTED_MODULE_10__persistence_promise__","__WEBPACK_IMPORTED_MODULE_11__query_data__","__WEBPACK_IMPORTED_MODULE_12__reference_set__","__WEBPACK_IMPORTED_MODULE_13__remote_document_change_buffer__","initialUser","localViewReferences","heldBatchResults","mutationQueue","remoteDocuments","queryCache","localDocuments","startMutationQueue","startQueryCache","oldBatches","promisedOldBatches","newBatches","changedKeys","_d","getDocuments","highestAck","ackedBatches","promisedBatch","changedDocuments","affected","shouldHoldBatchResult","documentBuffer_1","releaseBatchResults","promisedAffectedKeys","toReject","affectedKeys","promisedToReject","lastAcked","removeMutationBatch","documentBuffer","changedDocKeys","existingDoc","lastRemoteVersion","remoteVersion","releasedWriteKeys","releaseHeldBatchResults","promisedReleasedWriteKeys","viewChanges","viewChanges_1","nextMutationBatch","afterBatchId","readDocument","getDocument","cached","documentBuffer_2","garbage","toRelease","isRemoteUpToVersion","batchResults","promiseChain","batchResults_1","applyWriteToRemoteDocuments","affectedDocs","batches_2","docKeys","ackVersion","LocalDocumentsView","__WEBPACK_IMPORTED_MODULE_5__persistence_promise__","remoteDocumentCache","computeLocalDocument","getDocumentsMatchingDocumentQuery","getDocumentsMatchingCollectionQuery","queryResults","computeLocalDocuments","promisedResults","matchingMutationBatches","matchingKeys","matchingMutationBatches_1","mutatedDoc","RemoteDocumentChangeBuffer","assertChanges","bufferedEntry","MemoryPersistence","__WEBPACK_IMPORTED_MODULE_2__memory_mutation_queue__","__WEBPACK_IMPORTED_MODULE_3__memory_query_cache__","__WEBPACK_IMPORTED_MODULE_4__memory_remote_document_cache__","mutationQueues","queue","MemoryPersistenceTransaction","MemoryMutationQueue","__WEBPACK_IMPORTED_MODULE_1__model_mutation_batch__","__WEBPACK_IMPORTED_MODULE_5__util_sorted_set__","__WEBPACK_IMPORTED_MODULE_7__reference_set__","highestAcknowledgedBatchId","batchesByDocumentKey","batchIndex","indexOfExistingBatchId","prior","findMutationBatch","rawIndex","indexOfBatchId","getAllLiveMutationBatchesBeforeIndex","endIndex","immediateChildrenPathLength","startPath","rowKeyPath","batchCount","firstBatchId","queueCount","startIndex","queueIndex","length_1","references","MemoryQueryCache","__WEBPACK_IMPORTED_MODULE_1__util_obj_map__","__WEBPACK_IMPORTED_MODULE_3__reference_set__","MemoryRemoteDocumentCache","__WEBPACK_IMPORTED_MODULE_2__model_document_key__","__WEBPACK_IMPORTED_MODULE_3__persistence_promise__","iterator","NoOpGarbageCollector","Datastore","__WEBPACK_IMPORTED_MODULE_2__persistent_stream__","initialBackoffDelay","newPersistentWriteStream","newPersistentWatchStream","params","writes","response","writeResults","getToken","PersistentListenStream","PersistentWriteStream","PersistentStreamState","__WEBPACK_IMPORTED_MODULE_3__backoff__","__WEBPACK_IMPORTED_MODULE_4__util_types__","BACKOFF_INITIAL_DELAY_MS","BACKOFF_MAX_DELAY_MS","BACKOFF_FACTOR","PersistentStream","credentialsProvider","idle","stream","backoff","Initial","isStarted","Backoff","Auth","Open","isOpen","performBackoff","auth","stop","Stopped","inhibitBackoff","markIdle","handleIdleCloseTimer","sendRequest","cancelIdleCheck","finalState","resetToMax","tearDown","startStream","rpcError","handleStreamClose","dispatchIfStillActive","currentStream_1","startRpc","backoffAndWait","watchChangeProto","onWatchChange","watch","addTarget","labels","unwatch","removeTarget","handshakeComplete_","writeMutations","responseProto","commitTime","onMutationResult","onHandshakeComplete","writeHandshake","ExponentialBackoff","__WEBPACK_IMPORTED_MODULE_0__util_log__","__WEBPACK_IMPORTED_MODULE_1__util_promise__","initialDelayMs","backoffFactor","maxDelayMs","currentBaseMs","def","delayWithJitterMs","jitterDelayMs","RemoteStore","__WEBPACK_IMPORTED_MODULE_1__core_transaction__","__WEBPACK_IMPORTED_MODULE_2__core_types__","__WEBPACK_IMPORTED_MODULE_3__local_query_data__","__WEBPACK_IMPORTED_MODULE_6__model_mutation_batch__","__WEBPACK_IMPORTED_MODULE_7__platform_platform__","__WEBPACK_IMPORTED_MODULE_8__util_assert__","__WEBPACK_IMPORTED_MODULE_9__util_error__","__WEBPACK_IMPORTED_MODULE_10__util_log__","__WEBPACK_IMPORTED_MODULE_11__util_obj__","__WEBPACK_IMPORTED_MODULE_12__remote_event__","__WEBPACK_IMPORTED_MODULE_13__rpc_error__","__WEBPACK_IMPORTED_MODULE_14__watch_change__","onlineStateHandler","pendingWrites","lastBatchSeen","accumulatedWatchChanges","watchStream","writeStream","watchStreamOnlineState","watchStreamFailures","shouldWarnOffline","setOnlineStateToHealthy","updateAndBroadcastOnlineState","Healthy","setOnlineStateToUnknown","updateOnlineStateAfterFailure","didChange","isNetworkEnabled","shouldStartWatchStream","startWatchStream","cleanUpWatchStreamState","cleanUpWriteStreamState","sendWatchRequest","sendUnwatchRequest","recordPendingTargetRequest","onWatchStreamOpen","onWatchStreamClose","onWatchStreamChange","handleTargetError","handleWatchChangeBatch","aggregator","deletedDoc","trackedRemote","newQueryData","requestQueryData","canWriteMutations","outstandingWrites","shouldStartWriteStream","startWriteStream","handshakeComplete","onWriteStreamOpen","onWriteStreamClose","onWriteHandshakeComplete","success","errorHandling","handleWriteError","handleHandshakeError","__WEBPACK_IMPORTED_MODULE_0__snapshot_version__","__WEBPACK_IMPORTED_MODULE_3__model_mutation__","__WEBPACK_IMPORTED_MODULE_4__util_error__","readVersions","committed","recordVersion","docVersion","existingVersion","preconditionForUpdate","unwritten","AsyncObserver","muted","scheduleEvent","eventHandler","AsyncQueue","__WEBPACK_IMPORTED_MODULE_2__promise__","__WEBPACK_IMPORTED_MODULE_3__error__","tail","delayedOperations","delayedOperationsCount","operationInProgress","delay","delayedOp_1","handle","scheduleInternal","entry","makeCredentialsProvider","EmptyCredentialsProvider","FirstPartyCredentialsProvider","client","sessionIndex","FirebaseCredentialsProvider","__WEBPACK_IMPORTED_MODULE_0__auth_user__","OAuthToken","Authorization","userListener","forceRefresh","tokenListener","userCounter","newUser","getUser","addAuthTokenListener","initialUserCounter","tokenData","accessToken","removeAuthTokenListener","getUid","currentUid","FirstPartyToken","gapi","FIRST_PARTY","X-Goog-AuthUser","User","otherUser","GOOGLE_CREDENTIALS","isPartialObserver","implementsAnyMethods","methods","methods_1","method","isWrite","dataSource","UserDataSource","MergeSet","Update","QueryValue","looksLikeJsonObject","__WEBPACK_IMPORTED_MODULE_14__geo_point__","__WEBPACK_IMPORTED_MODULE_11__blob__","DocumentKeyReference","__WEBPACK_IMPORTED_MODULE_13__field_value__","validatePlainObject","context","__WEBPACK_IMPORTED_MODULE_6__util_input_validation__","createError","fieldPathFromArgument","__WEBPACK_IMPORTED_MODULE_12__field_path__","fieldPathFromDotSeparatedString","errorMessage","UserDataConverter","__WEBPACK_IMPORTED_MODULE_0__core_timestamp__","__WEBPACK_IMPORTED_MODULE_1__model_field_value__","__WEBPACK_IMPORTED_MODULE_2__model_mutation__","__WEBPACK_IMPORTED_MODULE_7__util_misc__","__WEBPACK_IMPORTED_MODULE_9__util_sorted_map__","__WEBPACK_IMPORTED_MODULE_10__util_types__","RESERVED_FIELD_REGEX","ParsedSetData","ParsedUpdateData","ParseContext","arrayElement","validatePath","childContextForField","childPath","validatePathSegment","childContextForFieldPath","childContextForArray","fieldDescription","updateData","parseData","fieldMaskPaths","childContext","runPreConverter","parsedValue","mask","value_1","parseArray","parseObject","parseScalarValue","entryIndex","array_1","parsedEntry"],"mappings":"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","file":"static/js/0.d81330c5.chunk.js","sourcesContent":["webpackJsonp([0],Array(72).concat([\n/* 72 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"registerFirestore\"] = registerFirestore;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_app__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_platform_browser_browser_init__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_platform_config__ = __webpack_require__(123);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nfunction registerFirestore(instance) {\n    Object(__WEBPACK_IMPORTED_MODULE_2__src_platform_config__[\"a\" /* configureForFirebase */])(instance);\n}\nregisterFirestore(__WEBPACK_IMPORTED_MODULE_0__firebase_app__[\"default\"]);\n\n//# sourceMappingURL=index.js.map\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = fail;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = assert;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_version__ = __webpack_require__(99);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__log__ = __webpack_require__(77);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + __WEBPACK_IMPORTED_MODULE_0__core_version__[\"a\" /* SDK_VERSION */] + \") INTERNAL ASSERTION FAILED: \" + failure;\n    Object(__WEBPACK_IMPORTED_MODULE_1__log__[\"c\" /* error */])(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nfunction assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Code; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FirestoreError; });\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nvar Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\n\n\n//# sourceMappingURL=error.js.map\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = maybeDocumentMap;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = documentMap;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = documentVersionMap;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = documentKeySet;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_sorted_map__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_sorted_set__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__document_key__ = __webpack_require__(76);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar EMPTY_MAYBE_DOCUMENT_MAP = new __WEBPACK_IMPORTED_MODULE_0__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_2__document_key__[\"a\" /* DocumentKey */].comparator);\nfunction maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new __WEBPACK_IMPORTED_MODULE_0__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_2__document_key__[\"a\" /* DocumentKey */].comparator);\nfunction documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new __WEBPACK_IMPORTED_MODULE_0__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_2__document_key__[\"a\" /* DocumentKey */].comparator);\nfunction documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new __WEBPACK_IMPORTED_MODULE_1__util_sorted_set__[\"a\" /* SortedSet */](__WEBPACK_IMPORTED_MODULE_2__document_key__[\"a\" /* DocumentKey */].comparator);\nfunction documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DocumentKey; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__path__ = __webpack_require__(84);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.equals = function (other) {\n        return (other !== null && __WEBPACK_IMPORTED_MODULE_1__path__[\"b\" /* ResourcePath */].comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return __WEBPACK_IMPORTED_MODULE_1__path__[\"b\" /* ResourcePath */].comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new __WEBPACK_IMPORTED_MODULE_1__path__[\"b\" /* ResourcePath */](segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(__WEBPACK_IMPORTED_MODULE_1__path__[\"b\" /* ResourcePath */].fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new __WEBPACK_IMPORTED_MODULE_1__path__[\"b\" /* ResourcePath */]([]));\n    return DocumentKey;\n}());\n\n\n//# sourceMappingURL=document_key.js.map\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LogLevel; });\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = getLogLevel;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = setLogLevel;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = debug;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = error;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_version__ = __webpack_require__(99);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_platform__ = __webpack_require__(83);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\n\n\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n    return logLevel;\n}\nfunction setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nfunction debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + __WEBPACK_IMPORTED_MODULE_0__core_version__[\"a\" /* SDK_VERSION */] + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nfunction error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + __WEBPACK_IMPORTED_MODULE_0__core_version__[\"a\" /* SDK_VERSION */] + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = __WEBPACK_IMPORTED_MODULE_1__platform_platform__[\"a\" /* PlatformSupport */].getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AutoId; });\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = primitiveComparator;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = equals;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = arrayEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = immediatePredecessor;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = immediateSuccessor;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:class-as-namespace\nvar AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"a\" /* assert */])(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\n\nfunction primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nfunction equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.equals(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using equals(). */\nfunction arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].equals(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nfunction immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nfunction immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PersistencePromise; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        this.nextCallback = null;\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = null;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\n\n\n//# sourceMappingURL=persistence_promise.js.map\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Document; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return NoDocument; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__document_key__ = __webpack_require__(76);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return __WEBPACK_IMPORTED_MODULE_1__document_key__[\"a\" /* DocumentKey */].comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return __WEBPACK_IMPORTED_MODULE_1__document_key__[\"a\" /* DocumentKey */].comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\n\n\n//# sourceMappingURL=document.js.map\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SnapshotVersion; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timestamp__ = __webpack_require__(87);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new __WEBPACK_IMPORTED_MODULE_0__timestamp__[\"a\" /* Timestamp */](seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.equals = function (other) {\n        return this.timestamp.equals(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new __WEBPACK_IMPORTED_MODULE_0__timestamp__[\"a\" /* Timestamp */](0, 0));\n    return SnapshotVersion;\n}());\n\n\n//# sourceMappingURL=snapshot_version.js.map\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = contains;\n/* unused harmony export get */\n/* unused harmony export size */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = defaulted;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = forEachNumber;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = forEach;\n/* unused harmony export lookupOrInsert */\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = isEmpty;\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = shallowCopy;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nfunction size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nfunction defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nfunction forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = parseInt(key, 10);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nfunction forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nfunction lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nfunction isEmpty(obj) {\n    Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"a\" /* assert */])(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowCopy(obj) {\n    Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"a\" /* assert */])(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PlatformSupport; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = emptyByteString;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\n\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nfunction emptyByteString() {\n    return PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export DOCUMENT_KEY_NAME */\n/* unused harmony export Path */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ResourcePath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FieldPath; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_error__ = __webpack_require__(74);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.equals = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar ResourcePath = /** @class */ (function (_super) {\n    __extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(Path));\n\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar FieldPath = /** @class */ (function (_super) {\n    __extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(Path));\n\n\n//# sourceMappingURL=path.js.map\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SortedMap; });\n/* unused harmony export SortedMapIterator */\n/* unused harmony export LLRBNode */\n/* unused harmony export LLRBEmptyNode */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"b\" /* fail */])('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, true, resultGenerator);\n    };\n    return SortedMap;\n}()); // end SortedMap\n\n// An iterator over an LLRBNode.\nvar SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse, resultGenerator) {\n        this.resultGenerator = resultGenerator || null;\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"a\" /* assert */])(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result;\n        if (this.resultGenerator)\n            result = this.resultGenerator(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        if (this.resultGenerator) {\n            return this.resultGenerator(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nvar LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"b\" /* fail */])('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"b\" /* fail */])('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"b\" /* fail */])('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export TypeOrder */\n/* unused harmony export FieldValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return NullValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BooleanValue; });\n/* unused harmony export NumberValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return IntegerValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return DoubleValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return StringValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return TimestampValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return ServerTimestampValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BlobValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return RefValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return GeoPointValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return ObjectValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ArrayValue; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_sorted_map__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__document_key__ = __webpack_require__(76);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\n\nvar NullValue = /** @class */ (function (_super) {\n    __extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\n\nvar BooleanValue = /** @class */ (function (_super) {\n    __extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\n\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    __extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    __extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\n\nvar DoubleValue = /** @class */ (function (_super) {\n    __extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\n\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    __extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\n\nvar TimestampValue = /** @class */ (function (_super) {\n    __extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    __extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\n\nvar BlobValue = /** @class */ (function (_super) {\n    __extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\n\nvar RefValue = /** @class */ (function (_super) {\n    __extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : __WEBPACK_IMPORTED_MODULE_3__document_key__[\"a\" /* DocumentKey */].comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\n\nvar GeoPointValue = /** @class */ (function (_super) {\n    __extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\n\nvar ObjectValue = /** @class */ (function (_super) {\n    __extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new __WEBPACK_IMPORTED_MODULE_2__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */]));\n    return ObjectValue;\n}(FieldValue));\n\nvar ArrayValue = /** @class */ (function (_super) {\n    __extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\n\n\n//# sourceMappingURL=field_value.js.map\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Timestamp; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_misc__ = __webpack_require__(78);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = parseInt(nanoStr, 10);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(this.nanos, other.nanos);\n        }\n        return Object(__WEBPACK_IMPORTED_MODULE_1__util_misc__[\"f\" /* primitiveComparator */])(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.equals = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\n\n\n//# sourceMappingURL=timestamp.js.map\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return SCHEMA_VERSION; });\n/* harmony export (immutable) */ __webpack_exports__[\"m\"] = createOrUpgradeDb;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return DbTimestamp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return DbOwner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return DbMutationQueue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DbMutationBatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DbDocumentMutation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return DbNoDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return DbRemoteDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return DbTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return DbTargetDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return DbTargetGlobal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ALL_STORES; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__encoded_resource_path__ = __webpack_require__(107);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nfunction createOrUpgradeDb(db, oldVersion) {\n    Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbMutationBatch.store, { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbTargetDocument.store, { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n         * The normalized user ID to which this queue belongs.\n         */\n        userId, \n        /**\n         * An identifier for the highest numbered batch that has been acknowledged\n         * by the server. All MutationBatches in this queue with batchIds less\n         * than or equal to this value are considered to have been acknowledged by\n         * the server.\n         */\n        lastAcknowledgedBatchId, \n        /**\n         * A stream token that was previously sent by the server.\n         *\n         * See StreamingWriteRequest in datastore.proto for more details about\n         * usage.\n         *\n         * After sending this token, earlier tokens may not be used anymore so\n         * only a single stream token is retained.\n         */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n         * The normalized user ID to which this batch belongs.\n         */\n        userId, \n        /**\n         * An identifier for this batch, allocated by the mutation queue in a\n         * monotonically increasing manner.\n         */\n        batchId, \n        /**\n         * The local write time of the batch, stored as milliseconds since the\n         * epoch.\n         */\n        localWriteTimeMs, \n        /**\n         * A list of mutations to apply. All mutations will be applied atomically.\n         *\n         * Mutations are serialized via JsonProtoSerializer.toMutation().\n         */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, Object(__WEBPACK_IMPORTED_MODULE_1__encoded_resource_path__[\"b\" /* encode */])(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, Object(__WEBPACK_IMPORTED_MODULE_1__encoded_resource_path__[\"b\" /* encode */])(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n         * Set to an instance of a DbNoDocument if it is known that no document\n         * exists.\n         */\n        noDocument, \n        /**\n         * Set to an instance of a Document if there's a cached version of the\n         * document.\n         */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n         * An auto-generated sequential numeric identifier for the query.\n         *\n         * Queries are stored using their canonicalId as the key, but these\n         * canonicalIds can be quite long so we additionally assign a unique\n         * queryId which can be used by referenced data structures (e.g.\n         * indexes) to minimize the on-disk cost.\n         */\n        targetId, \n        /**\n         * The canonical string representing this query. This is not unique.\n         */\n        canonicalId, \n        /**\n         * The last readTime received from the Watch Service for this query.\n         *\n         * This is the same value as TargetChange.read_time in the protos.\n         */\n        readTime, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data\n         * that matches the query. The resume token essentially identifies a\n         * point in time from which the server should resume sending results.\n         *\n         * This is related to the snapshotVersion in that the resumeToken\n         * effectively also encodes that value, but the resumeToken is opaque\n         * and sometimes encodes additional information.\n         *\n         * A consequence of this is that the resumeToken should be used when\n         * asking the server to reason about where this client is in the watch\n         * stream, but the client should use the snapshotVersion for its own\n         * purposes.\n         *\n         * This is the same value as TargetChange.resume_token in the protos.\n         */\n        resumeToken, \n        /**\n         * A sequence number representing the last time this query was\n         * listened to, used for garbage collection purposes.\n         *\n         * Conventionally this would be a timestamp value, but device-local\n         * clocks are unreliable and they must be able to create new listens\n         * even while disconnected. Instead this should be a monotonically\n         * increasing number that's incremented on each listen call.\n         *\n         * This is different from the queryId since the queryId is an\n         * immutable identifier assigned to the Query on first use while\n         * lastListenSequenceNumber is updated every time the query is\n         * listened to.\n         */\n        lastListenSequenceNumber, \n        /**\n         * The query for this target.\n         *\n         * Because canonical ids are not unique we must store the actual query. We\n         * use the proto to have an object we can persist without having to\n         * duplicate translation logic to and from a `Query` object.\n         */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\n\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n         * The targetId identifying a target.\n         */\n        targetId, \n        /**\n         * The path to the document, as encoded in the key.\n         */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n         * The highest numbered target id across all targets.\n         *\n         * See DbTarget.targetId.\n         */\n        highestTargetId, \n        /**\n         * The highest numbered lastListenSequenceNumber across all targets.\n         *\n         * See DbTarget.lastListenSequenceNumber.\n         */\n        highestListenSequenceNumber, \n        /**\n         * A global snapshot version representing the last consistent snapshot we\n         * received from the backend. This is monotonically increasing and any\n         * snapshots received from the backend prior to this version (e.g. for\n         * targets resumed with a resumeToken) should be suppressed (buffered)\n         * until the backend has caught up to this snapshot version again. This\n         * prevents our cache from ever going backwards in time.\n         */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\n\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nvar ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = validateExactNumberOfArgs;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = validateAtLeastNumberOfArgs;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = validateBetweenNumberOfArgs;\n/* harmony export (immutable) */ __webpack_exports__[\"h\"] = validateNamedArrayAtLeastNumberOfElements;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = validateArgType;\n/* harmony export (immutable) */ __webpack_exports__[\"l\"] = validateOptionalArgType;\n/* harmony export (immutable) */ __webpack_exports__[\"j\"] = validateNamedType;\n/* harmony export (immutable) */ __webpack_exports__[\"i\"] = validateNamedOptionalType;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isPlainObject;\n/* harmony export (immutable) */ __webpack_exports__[\"m\"] = valueDescription;\n/* unused harmony export tryGetCustomObjectType */\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = validateDefined;\n/* harmony export (immutable) */ __webpack_exports__[\"k\"] = validateOptionNames;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = invalidClassError;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__obj__ = __webpack_require__(82);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nfunction validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nfunction validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nfunction validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nfunction validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nfunction validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nfunction validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nfunction isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"b\" /* fail */])('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nfunction validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nfunction validateOptionNames(functionName, options, optionNames) {\n    __WEBPACK_IMPORTED_MODULE_2__obj__[\"c\" /* forEach */](options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nfunction invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new __WEBPACK_IMPORTED_MODULE_1__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export MIN_SAFE_INTEGER */\n/* unused harmony export MAX_SAFE_INTEGER */\n/* unused harmony export isInteger */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isNullOrUndefined;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isSafeInteger;\n/* unused harmony export safeIsNaN */\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nvar MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nvar isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nfunction isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nfunction safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return QueryPurpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return QueryData; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_platform__ = __webpack_require__(83);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** An enumeration of the different purposes we have for queries. */\nvar QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN; }\n        if (resumeToken === void 0) { resumeToken = Object(__WEBPACK_IMPORTED_MODULE_1__platform_platform__[\"b\" /* emptyByteString */])(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\n\n\n//# sourceMappingURL=query_data.js.map\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return RemoteEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CurrentStatusUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return ResetMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return UpdateMapping; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__platform_platform__ = __webpack_require__(83);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n         * The snapshot version this event brings us up to, or MIN if not set.\n         */\n        snapshotVersion, \n        /**\n         * A map from target to changes to the target. See TargetChange.\n         */\n        targetChanges, \n        /**\n         * A set of which documents have changed or been deleted, along with the\n         * doc's new values (if not deleted).\n         */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: Object(__WEBPACK_IMPORTED_MODULE_2__platform_platform__[\"b\" /* emptyByteString */])()\n        };\n    };\n    return RemoteEvent;\n}());\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nvar CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"a\" /* documentKeySet */])();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.equals = function (other) {\n        return other !== null && this.docs.equals(other.docs);\n    };\n    return ResetMapping;\n}());\n\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.equals = function (other) {\n        return (other !== null &&\n            this.addedDocuments.equals(other.addedDocuments) &&\n            this.removedDocuments.equals(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\n\n\n//# sourceMappingURL=remote_event.js.map\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BATCHID_UNKNOWN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return MutationBatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return MutationBatchResult; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_misc__ = __webpack_require__(78);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(maybeDoc.key.equals(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(maybeDoc.key.equals(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = Object(__WEBPACK_IMPORTED_MODULE_0__collections__[\"a\" /* documentKeySet */])();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.equals = function (other) {\n        return (this.batchId === other.batchId &&\n            __WEBPACK_IMPORTED_MODULE_2__util_misc__[\"b\" /* arrayEquals */](this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\n\n/** The result of applying a mutation batch to the backend. */\nvar MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = Object(__WEBPACK_IMPORTED_MODULE_0__collections__[\"c\" /* documentVersionMap */])();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\n\n\n//# sourceMappingURL=mutation_batch.js.map\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FieldMask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return ServerTimestampTransform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return FieldTransform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return MutationResult; });\n/* unused harmony export MutationType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return Precondition; });\n/* unused harmony export Mutation */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return SetMutation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return PatchMutation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return TransformMutation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DeleteMutation; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__field_value__ = __webpack_require__(86);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.equals = function (other) {\n        return __WEBPACK_IMPORTED_MODULE_2__util_misc__[\"b\" /* arrayEquals */](this.fields, other.fields);\n    };\n    return FieldMask;\n}());\n\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.equals = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\n\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.equals = function (other) {\n        return (this.field.equals(other.field) && this.transform.equals(other.transform));\n    };\n    return FieldTransform;\n}());\n\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n         * The version at which the mutation was committed or null for a delete.\n         */\n        version, \n        /**\n         * The resulting fields returned from the backend after a\n         * TransformMutation has been committed. Contains one FieldValue for each\n         * FieldTransform that was in the mutation.\n         *\n         * Will be null if the mutation was not a TransformMutation.\n         */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\n\nvar MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */] && maybeDoc.version.equals(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */];\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_3__document__[\"b\" /* NoDocument */];\n            }\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.equals = function (other) {\n        return (__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"c\" /* equals */](this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(maybeDoc.key.equals(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */]) {\n            return maybeDoc.version;\n        }\n        else {\n            return __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN;\n        }\n    };\n    return Mutation;\n}());\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar SetMutation = /** @class */ (function (_super) {\n    __extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */](this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */](this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.equals = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.equals(other.key) &&\n            this.value.equals(other.value) &&\n            this.precondition.equals(other.precondition));\n    };\n    return SetMutation;\n}(Mutation));\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar PatchMutation = /** @class */ (function (_super) {\n    __extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */](this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */](this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.equals = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.equals(other.key) &&\n            this.fieldMask.equals(other.fieldMask) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */]) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = __WEBPACK_IMPORTED_MODULE_4__field_value__[\"h\" /* ObjectValue */].EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(Mutation));\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar TransformMutation = /** @class */ (function (_super) {\n    __extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */](this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */](this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.equals = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.equals(other.key) &&\n            __WEBPACK_IMPORTED_MODULE_2__util_misc__[\"b\" /* arrayEquals */](this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_3__document__[\"a\" /* Document */], 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(doc.key.equals(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                transformResults.push(new __WEBPACK_IMPORTED_MODULE_4__field_value__[\"j\" /* ServerTimestampValue */](localWriteTime));\n            }\n            else {\n                return Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(Mutation));\n\n/** A mutation that deletes the document at the given key. */\nvar DeleteMutation = /** @class */ (function (_super) {\n    __extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"b\" /* NoDocument */](this.key, __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(maybeDoc.key.equals(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new __WEBPACK_IMPORTED_MODULE_3__document__[\"b\" /* NoDocument */](this.key, __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc());\n    };\n    DeleteMutation.prototype.equals = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.equals(other.key) &&\n            this.precondition.equals(other.precondition));\n    };\n    return DeleteMutation;\n}(Mutation));\n\n\n//# sourceMappingURL=mutation.js.map\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SortedSet; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sorted_map__ = __webpack_require__(85);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new __WEBPACK_IMPORTED_MODULE_0__sorted_map__[\"a\" /* SortedMap */](this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\n\n\n//# sourceMappingURL=sorted_set.js.map\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ChangeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return SyncState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DocumentChangeSet; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_sorted_map__ = __webpack_require__(85);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nvar SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new __WEBPACK_IMPORTED_MODULE_2__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_0__model_document_key__[\"a\" /* DocumentKey */].comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\n\n\n//# sourceMappingURL=view_snapshot.js.map\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ReferenceSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DocReference; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_sorted_set__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new __WEBPACK_IMPORTED_MODULE_3__util_sorted_set__[\"a\" /* SortedSet */](DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new __WEBPACK_IMPORTED_MODULE_3__util_sorted_set__[\"a\" /* SortedSet */](DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = __WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = __WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        var keys = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return __WEBPACK_IMPORTED_MODULE_4__persistence_promise__[\"a\" /* PersistencePromise */].resolve(firstRef !== null && key.equals(firstRef.key));\n    };\n    return ReferenceSet;\n}());\n\nvar DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (__WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].comparator(left.key, right.key) ||\n            Object(__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"f\" /* primitiveComparator */])(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (Object(__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"f\" /* primitiveComparator */])(left.targetOrBatchId, right.targetOrBatchId) ||\n            __WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\n\n\n//# sourceMappingURL=reference_set.js.map\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SimpleDb; });\n/* unused harmony export IterationController */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return SimpleDbTransaction; });\n/* unused harmony export SimpleDbStore */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'Opening database:', name);\n        return new __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */](function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!!store, 'Object store not part of transaction: ' + storeName);\n        return new SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */](function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */]) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */](function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SDK_VERSION; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_app__ = __webpack_require__(14);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = __WEBPACK_IMPORTED_MODULE_0__firebase_app__[\"default\"].SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Blob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return PublicBlob; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__platform_platform__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_api__ = __webpack_require__(101);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_input_validation__ = __webpack_require__(89);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_misc__ = __webpack_require__(78);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new __WEBPACK_IMPORTED_MODULE_2__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_2__util_error__[\"a\" /* Code */].UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!__WEBPACK_IMPORTED_MODULE_0__platform_platform__[\"a\" /* PlatformSupport */].getPlatform().base64Available) {\n        throw new __WEBPACK_IMPORTED_MODULE_2__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_2__util_error__[\"a\" /* Code */].UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Blob.fromBase64String', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_input_validation__[\"c\" /* validateArgType */])('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = __WEBPACK_IMPORTED_MODULE_0__platform_platform__[\"a\" /* PlatformSupport */].getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new __WEBPACK_IMPORTED_MODULE_2__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_2__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw Object(__WEBPACK_IMPORTED_MODULE_3__util_input_validation__[\"a\" /* invalidClassError */])('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return __WEBPACK_IMPORTED_MODULE_0__platform_platform__[\"a\" /* PlatformSupport */].getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return Object(__WEBPACK_IMPORTED_MODULE_4__util_misc__[\"f\" /* primitiveComparator */])(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nvar PublicBlob = Object(__WEBPACK_IMPORTED_MODULE_1__util_api__[\"a\" /* makeConstructorPrivate */])(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = makeConstructorPrivate;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__error__ = __webpack_require__(74);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nfunction makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new __WEBPACK_IMPORTED_MODULE_0__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_0__error__[\"a\" /* Code */].INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return GeoPoint; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_input_validation__ = __webpack_require__(89);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_misc__ = __webpack_require__(78);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('GeoPoint', arguments, 2);\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_input_validation__[\"c\" /* validateArgType */])('GeoPoint', 'number', 1, latitude);\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_input_validation__[\"c\" /* validateArgType */])('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new __WEBPACK_IMPORTED_MODULE_0__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_0__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new __WEBPACK_IMPORTED_MODULE_0__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_0__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (Object(__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"f\" /* primitiveComparator */])(this._lat, other._lat) ||\n            Object(__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"f\" /* primitiveComparator */])(this._long, other._long));\n    };\n    return GeoPoint;\n}());\n\n\n//# sourceMappingURL=geo_point.js.map\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return Query; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return RelationOp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return RelationFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return NullFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return NanFilter; });\n/* harmony export (immutable) */ __webpack_exports__[\"i\"] = fieldFilter;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Direction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Bound; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return OrderBy; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_field_value__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_path__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_types__ = __webpack_require__(90);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.equals(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(this.getInequalityFilterField() == null ||\n            !(filter instanceof RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.equals(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(!__WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(!__WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].isDocumentKey(this.path), 'No ordering allowed for document query');\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!Object(__WEBPACK_IMPORTED_MODULE_6__util_types__[\"a\" /* isNullOrUndefined */])(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!Object(__WEBPACK_IMPORTED_MODULE_6__util_types__[\"a\" /* isNullOrUndefined */])(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.equals = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].equals(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].equals(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.equals(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.equals(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.equals(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !Object(__WEBPACK_IMPORTED_MODULE_6__util_types__[\"a\" /* isNullOrUndefined */])(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return __WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (__WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.equals(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\n\nvar RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.equals = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\n\nvar RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(this.value instanceof __WEBPACK_IMPORTED_MODULE_2__model_field_value__[\"i\" /* RefValue */], 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = __WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case RelationOp.LESS_THAN:\n                return comparison < 0;\n            case RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case RelationOp.EQUAL:\n                return comparison === 0;\n            case RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.equals = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.equals(other.op) &&\n                this.field.equals(other.field) &&\n                this.value.equals(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\n\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.equals = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\n\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.equals = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\n\n/**\n * Creates a filter based on the provided arguments.\n */\nfunction fieldFilter(field, op, value) {\n    if (value.equals(__WEBPACK_IMPORTED_MODULE_2__model_field_value__[\"g\" /* NullValue */].INSTANCE)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.equals(__WEBPACK_IMPORTED_MODULE_2__model_field_value__[\"d\" /* DoubleValue */].NAN)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(component instanceof __WEBPACK_IMPORTED_MODULE_2__model_field_value__[\"i\" /* RefValue */], 'Bound has a non-key value where the key path is being used.');\n                comparison = __WEBPACK_IMPORTED_MODULE_1__model_document_key__[\"a\" /* DocumentKey */].comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.equals(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? __WEBPACK_IMPORTED_MODULE_0__model_document__[\"a\" /* Document */].compareByKey(d1, d2)\n            : __WEBPACK_IMPORTED_MODULE_0__model_document__[\"a\" /* Document */].compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.equals = function (other) {\n        return this.dir === other.dir && this.field.equals(other.field);\n    };\n    return OrderBy;\n}());\n\nvar KEY_ORDERING_ASC = new OrderBy(__WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new OrderBy(__WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isPermanentError;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = mapCodeFromRpcStatus;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = mapCodeFromRpcCode;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = mapRpcCodeFromCode;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = mapCodeFromHttpStatus;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_log__ = __webpack_require__(77);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nfunction isPermanentError(code) {\n    switch (code) {\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OK:\n            return Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Treated status OK as error');\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].CANCELLED:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DEADLINE_EXCEEDED:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].RESOURCE_EXHAUSTED:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INTERNAL:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAUTHENTICATED:\n            return false;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].NOT_FOUND:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ALREADY_EXISTS:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].PERMISSION_DENIED:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ABORTED:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OUT_OF_RANGE:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNIMPLEMENTED:\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DATA_LOSS:\n            return true;\n        default:\n            return Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nfunction mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nfunction mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */]('GRPC error has no .code');\n        return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OK;\n        case RpcCode.CANCELLED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].CANCELLED;\n        case RpcCode.UNKNOWN:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DATA_LOSS;\n        default:\n            return Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nfunction mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OK:\n            return RpcCode.OK;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].CANCELLED:\n            return RpcCode.CANCELLED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INTERNAL:\n            return RpcCode.INTERNAL;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ABORTED:\n            return RpcCode.ABORTED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"b\" /* fail */])('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OK;\n        case 400:// Bad Request\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAUTHENTICATED;\n        case 403:// Forbidden\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].PERMISSION_DENIED;\n        case 404:// Not Found\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].NOT_FOUND;\n        case 409:// Conflict\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].CANCELLED;\n        case 500:// Internal Server Error\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].OK;\n            if (status >= 400 && status < 500)\n                return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INTERNAL;\n            return __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FieldPath; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = fromDotSeparatedString;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_path__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_input_validation__ = __webpack_require__(89);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_2__util_input_validation__[\"h\" /* validateNamedArrayAtLeastNumberOfElements */])('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            Object(__WEBPACK_IMPORTED_MODULE_2__util_input_validation__[\"c\" /* validateArgType */])('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new __WEBPACK_IMPORTED_MODULE_0__model_path__[\"a\" /* FieldPath */](fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(__WEBPACK_IMPORTED_MODULE_0__model_path__[\"a\" /* FieldPath */].keyField().canonicalString());\n    return FieldPath;\n}());\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nfunction fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ObjectMap; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__obj__ = __webpack_require__(82);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.equals(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        __WEBPACK_IMPORTED_MODULE_0__obj__[\"c\" /* forEach */](this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return __WEBPACK_IMPORTED_MODULE_0__obj__[\"e\" /* isEmpty */](this.inner);\n    };\n    return ObjectMap;\n}());\n\n\n//# sourceMappingURL=obj_map.js.map\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = encode;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = decode;\n/* unused harmony export prefixSuccessor */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_path__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nfunction encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nfunction decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return __WEBPACK_IMPORTED_MODULE_0__model_path__[\"b\" /* ResourcePath */].EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new __WEBPACK_IMPORTED_MODULE_0__model_path__[\"b\" /* ResourcePath */](segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nfunction prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Deferred; });\n/* unused harmony export sequence */\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nfunction sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return JsonProtoSerializer; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api_blob__ = __webpack_require__(100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_geo_point__ = __webpack_require__(102);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_database_info__ = __webpack_require__(110);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_query__ = __webpack_require__(103);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_timestamp__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__local_query_data__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__model_field_value__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__model_mutation__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__model_path__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__util_types__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__existence_filter__ = __webpack_require__(119);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__rpc_error__ = __webpack_require__(104);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__watch_change__ = __webpack_require__(111);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"b\" /* Direction */].ASCENDING.name] = 'ASCENDING';\n    dirs[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"b\" /* Direction */].DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].LESS_THAN.name] = 'LESS_THAN';\n    ops[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].GREATER_THAN.name] = 'GREATER_THAN';\n    ops[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[__WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!__WEBPACK_IMPORTED_MODULE_15__util_types__[\"a\" /* isNullOrUndefined */](value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return parseInt(value, 10);\n    }\n    else {\n        return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? __WEBPACK_IMPORTED_MODULE_13__util_error__[\"a\" /* Code */].UNKNOWN\n            : Object(__WEBPACK_IMPORTED_MODULE_17__rpc_error__[\"c\" /* mapCodeFromRpcCode */])(status.code);\n        return new __WEBPACK_IMPORTED_MODULE_13__util_error__[\"b\" /* FirestoreError */](code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!__WEBPACK_IMPORTED_MODULE_15__util_types__[\"a\" /* isNullOrUndefined */](val)) {\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return __WEBPACK_IMPORTED_MODULE_15__util_types__[\"a\" /* isNullOrUndefined */](result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return __WEBPACK_IMPORTED_MODULE_5__core_timestamp__[\"a\" /* Timestamp */].fromISOString(date);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new __WEBPACK_IMPORTED_MODULE_5__core_timestamp__[\"a\" /* Timestamp */](seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return __WEBPACK_IMPORTED_MODULE_0__api_blob__[\"a\" /* Blob */].fromBase64String(blob);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return __WEBPACK_IMPORTED_MODULE_0__api_blob__[\"a\" /* Blob */].fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!!version, \"Trying to deserialize version that isn't set\");\n        return __WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__[\"a\" /* SnapshotVersion */].fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = __WEBPACK_IMPORTED_MODULE_11__model_path__[\"b\" /* ResourcePath */].fromString(name);\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new __WEBPACK_IMPORTED_MODULE_8__model_document_key__[\"a\" /* DocumentKey */](this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return __WEBPACK_IMPORTED_MODULE_11__model_path__[\"b\" /* ResourcePath */].EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new __WEBPACK_IMPORTED_MODULE_11__model_path__[\"b\" /* ResourcePath */]([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new __WEBPACK_IMPORTED_MODULE_11__model_path__[\"b\" /* ResourcePath */]([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"g\" /* NullValue */]) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"c\" /* BooleanValue */]) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"f\" /* IntegerValue */]) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"d\" /* DoubleValue */]) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"k\" /* StringValue */]) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"h\" /* ObjectValue */]) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"a\" /* ArrayValue */]) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"l\" /* TimestampValue */]) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"e\" /* GeoPointValue */]) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"b\" /* BlobValue */]) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"i\" /* RefValue */]) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"g\" /* NullValue */].INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"c\" /* BooleanValue */].of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"f\" /* IntegerValue */](parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"d\" /* DoubleValue */].NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"d\" /* DoubleValue */].POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"d\" /* DoubleValue */].NEGATIVE_INFINITY;\n                }\n            }\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"d\" /* DoubleValue */](obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"k\" /* StringValue */](obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"a\" /* ArrayValue */](values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"l\" /* TimestampValue */](this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"e\" /* GeoPointValue */](new __WEBPACK_IMPORTED_MODULE_1__api_geo_point__[\"a\" /* GeoPoint */](latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"b\" /* BlobValue */](blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new __WEBPACK_IMPORTED_MODULE_2__core_database_info__[\"a\" /* DatabaseId */](resourceName.get(1), resourceName.get(3));\n            var key = new __WEBPACK_IMPORTED_MODULE_8__model_document_key__[\"a\" /* DocumentKey */](this.extractLocalPathFromResourceName(resourceName));\n            return new __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"i\" /* RefValue */](dbId, key);\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new __WEBPACK_IMPORTED_MODULE_7__model_document__[\"a\" /* Document */](this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = __WEBPACK_IMPORTED_MODULE_9__model_field_value__[\"h\" /* ObjectValue */].EMPTY;\n        __WEBPACK_IMPORTED_MODULE_14__util_obj__[\"c\" /* forEach */](map, function (key, value) {\n            result = result.set(new __WEBPACK_IMPORTED_MODULE_11__model_path__[\"a\" /* FieldPath */]([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new __WEBPACK_IMPORTED_MODULE_7__model_document__[\"a\" /* Document */](key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new __WEBPACK_IMPORTED_MODULE_7__model_document__[\"b\" /* NoDocument */](key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Added:\n                return 'ADD';\n            case __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Current:\n                return 'CURRENT';\n            case __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].NoChange:\n                return 'NO_CHANGE';\n            case __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Removed:\n                return 'REMOVE';\n            case __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Reset:\n                return 'RESET';\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"b\" /* ExistenceFilterChange */]) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"a\" /* DocumentWatchChange */]) {\n            if (watchChange.newDoc instanceof __WEBPACK_IMPORTED_MODULE_7__model_document__[\"a\" /* Document */]) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof __WEBPACK_IMPORTED_MODULE_7__model_document__[\"b\" /* NoDocument */]) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"d\" /* WatchTargetChange */]) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: Object(__WEBPACK_IMPORTED_MODULE_17__rpc_error__[\"e\" /* mapRpcCodeFromCode */])(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"d\" /* WatchTargetChange */](state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new __WEBPACK_IMPORTED_MODULE_7__model_document__[\"a\" /* Document */](key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"a\" /* DocumentWatchChange */](updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : __WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc();\n            var doc = new __WEBPACK_IMPORTED_MODULE_7__model_document__[\"b\" /* NoDocument */](key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"a\" /* DocumentWatchChange */]([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"a\" /* DocumentWatchChange */]([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new __WEBPACK_IMPORTED_MODULE_16__existence_filter__[\"a\" /* ExistenceFilter */](count);\n            var targetId = filter.targetId;\n            watchChange = new __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"b\" /* ExistenceFilterChange */](targetId, existenceFilter);\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].NoChange;\n        }\n        else if (state === 'ADD') {\n            return __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Added;\n        }\n        else if (state === 'REMOVE') {\n            return __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Removed;\n        }\n        else if (state === 'CURRENT') {\n            return __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Current;\n        }\n        else if (state === 'RESET') {\n            return __WEBPACK_IMPORTED_MODULE_18__watch_change__[\"e\" /* WatchTargetChangeState */].Reset;\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return __WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return __WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN;\n        }\n        if (!targetChange.readTime) {\n            return __WEBPACK_IMPORTED_MODULE_4__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"h\" /* SetMutation */]) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"a\" /* DeleteMutation */]) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"e\" /* PatchMutation */]) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"i\" /* TransformMutation */]) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"f\" /* Precondition */].NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"e\" /* PatchMutation */](key, value, fieldMask, precondition);\n            }\n            else {\n                return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"h\" /* SetMutation */](key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"a\" /* DeleteMutation */](key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"i\" /* TransformMutation */](key, fieldTransforms);\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"f\" /* Precondition */].updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"f\" /* Precondition */].exists(precondition.exists);\n        }\n        else {\n            return __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"f\" /* Precondition */].NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"d\" /* MutationResult */](version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(fieldTransform.transform instanceof __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"g\" /* ServerTimestampTransform */], 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = __WEBPACK_IMPORTED_MODULE_11__model_path__[\"a\" /* FieldPath */].fromServerFormat(proto.fieldPath);\n        return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"c\" /* FieldTransform */](fieldPath, __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"g\" /* ServerTimestampTransform */].instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"f\" /* Query */].atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(__WEBPACK_IMPORTED_MODULE_11__model_path__[\"b\" /* ResourcePath */].EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"f\" /* Query */](path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case __WEBPACK_IMPORTED_MODULE_6__local_query_data__[\"b\" /* QueryPurpose */].Listen:\n                return null;\n            case __WEBPACK_IMPORTED_MODULE_6__local_query_data__[\"b\" /* QueryPurpose */].ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case __WEBPACK_IMPORTED_MODULE_6__local_query_data__[\"b\" /* QueryPurpose */].LimboResolution:\n                return 'limbo-document';\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof __WEBPACK_IMPORTED_MODULE_3__core_query__[\"g\" /* RelationFilter */]\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"a\" /* Bound */](position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"b\" /* Direction */].ASCENDING;\n            case 'DESCENDING':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"b\" /* Direction */].DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].EQUAL;\n            case 'GREATER_THAN':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return __WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unspecified relation');\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return __WEBPACK_IMPORTED_MODULE_11__model_path__[\"a\" /* FieldPath */].fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"e\" /* OrderBy */](this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof __WEBPACK_IMPORTED_MODULE_3__core_query__[\"g\" /* RelationFilter */]) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"g\" /* RelationFilter */](this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof __WEBPACK_IMPORTED_MODULE_3__core_query__[\"c\" /* NanFilter */]) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof __WEBPACK_IMPORTED_MODULE_3__core_query__[\"d\" /* NullFilter */]) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"c\" /* NanFilter */](nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"d\" /* NullFilter */](nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unspecified filter');\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return __WEBPACK_IMPORTED_MODULE_11__model_path__[\"a\" /* FieldPath */].fromServerFormat(path); });\n        return new __WEBPACK_IMPORTED_MODULE_10__model_mutation__[\"b\" /* FieldMask */](fields);\n    };\n    return JsonProtoSerializer;\n}());\n\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DatabaseInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DatabaseId; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_misc__ = __webpack_require__(78);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\n\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (Object(__WEBPACK_IMPORTED_MODULE_0__util_misc__[\"f\" /* primitiveComparator */])(this.projectId, other.projectId) ||\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_misc__[\"f\" /* primitiveComparator */])(this.database, other.database));\n    };\n    return DatabaseId;\n}());\n\n\n//# sourceMappingURL=database_info.js.map\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DocumentWatchChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ExistenceFilterChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return WatchTargetChangeState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return WatchTargetChange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return WatchChangeAggregator; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_platform__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__remote_event__ = __webpack_require__(92);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n         * The new document or NoDocument if it was deleted. Is null if the\n         * document went out of view without the server sending a new document.\n         */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\n\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\n\nvar WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = Object(__WEBPACK_IMPORTED_MODULE_1__platform_platform__[\"b\" /* emptyByteString */])(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"d\" /* maybeDocumentMap */])();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = __WEBPACK_IMPORTED_MODULE_3__util_obj__[\"f\" /* shallowCopy */](pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        Object(__WEBPACK_IMPORTED_MODULE_2__util_assert__[\"a\" /* assert */])(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_2__util_assert__[\"b\" /* fail */])('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_2__util_assert__[\"a\" /* assert */])(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        __WEBPACK_IMPORTED_MODULE_3__util_obj__[\"d\" /* forEachNumber */](this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"b\" /* RemoteEvent */](this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"a\" /* CurrentStatusUpdate */].None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"d\" /* UpdateMapping */](),\n                resumeToken: Object(__WEBPACK_IMPORTED_MODULE_1__platform_platform__[\"b\" /* emptyByteString */])()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!__WEBPACK_IMPORTED_MODULE_3__util_obj__[\"a\" /* contains */](this.pendingTargetResponses, targetId) &&\n            __WEBPACK_IMPORTED_MODULE_3__util_obj__[\"a\" /* contains */](this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!__WEBPACK_IMPORTED_MODULE_3__util_obj__[\"a\" /* contains */](_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"d\" /* UpdateMapping */]();\n                        change.currentStatusUpdate = __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"a\" /* CurrentStatusUpdate */].None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    Object(__WEBPACK_IMPORTED_MODULE_2__util_assert__[\"a\" /* assert */])(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"a\" /* CurrentStatusUpdate */].MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new __WEBPACK_IMPORTED_MODULE_4__remote_event__[\"c\" /* ResetMapping */]();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    Object(__WEBPACK_IMPORTED_MODULE_2__util_assert__[\"b\" /* fail */])('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\n\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return OnlineState; });\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Describes the online state of the Firestore client */\nvar OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it was\n     * previously in an unknown state and is trying to establish a connection.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * succesful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client has tried to establish a connection but has failed.\n     * This state is reached after either a connection attempt failed or a\n     * healthy stream was closed for unexpected reasons.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DocumentSet; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_sorted_map__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__document_key__ = __webpack_require__(76);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || __WEBPACK_IMPORTED_MODULE_3__document_key__[\"a\" /* DocumentKey */].comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return __WEBPACK_IMPORTED_MODULE_3__document_key__[\"a\" /* DocumentKey */].comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = Object(__WEBPACK_IMPORTED_MODULE_2__collections__[\"b\" /* documentMap */])();\n        this.sortedSet = new __WEBPACK_IMPORTED_MODULE_1__util_sorted_map__[\"a\" /* SortedMap */](this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.equals = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.equals(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\n\n\n//# sourceMappingURL=document_set.js.map\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EagerGarbageCollector; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return __WEBPACK_IMPORTED_MODULE_1__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n        return __WEBPACK_IMPORTED_MODULE_1__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = __WEBPACK_IMPORTED_MODULE_1__persistence_promise__[\"a\" /* PersistencePromise */].resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return __WEBPACK_IMPORTED_MODULE_1__persistence_promise__[\"a\" /* PersistencePromise */].resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\n\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return TargetIdGenerator; });\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\n\n\n//# sourceMappingURL=target_id_generator.js.map\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FieldValueImpl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DeleteFieldValueImpl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return ServerTimestampFieldValueImpl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return PublicFieldValue; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_api__ = __webpack_require__(101);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\n\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    __extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\n\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    __extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nvar PublicFieldValue = Object(__WEBPACK_IMPORTED_MODULE_0__util_api__[\"a\" /* makeConstructorPrivate */])(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__platform_platform__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__browser_platform__ = __webpack_require__(118);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\n__WEBPACK_IMPORTED_MODULE_0__platform_platform__[\"a\" /* PlatformSupport */].setPlatform(new __WEBPACK_IMPORTED_MODULE_1__browser_platform__[\"a\" /* BrowserPlatform */]());\n\n//# sourceMappingURL=browser_init.js.map\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BrowserPlatform; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__remote_serializer__ = __webpack_require__(109);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webchannel_connection__ = __webpack_require__(120);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new __WEBPACK_IMPORTED_MODULE_1__webchannel_connection__[\"a\" /* WebChannelConnection */](databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new __WEBPACK_IMPORTED_MODULE_0__remote_serializer__[\"a\" /* JsonProtoSerializer */](databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\n\n\n//# sourceMappingURL=browser_platform.js.map\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ExistenceFilter; });\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.equals = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\n\n\n//# sourceMappingURL=existence_filter.js.map\n\n\n/***/ }),\n/* 120 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return WebChannelConnection; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__ = __webpack_require__(121);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_version__ = __webpack_require__(99);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__remote_rpc_error__ = __webpack_require__(104);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__remote_stream_bridge__ = __webpack_require__(122);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_log__ = __webpack_require__(77);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + __WEBPACK_IMPORTED_MODULE_1__core_version__[\"a\" /* SDK_VERSION */];\nvar XHR_TIMEOUT_SECS = 15;\nvar WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new __WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"XhrIoPool\"]();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"EventType\"].COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case __WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"ErrorCode\"].NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case __WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"ErrorCode\"].TIMEOUT:\n                                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case __WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"ErrorCode\"].HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](Object(__WEBPACK_IMPORTED_MODULE_2__remote_rpc_error__[\"b\" /* mapCodeFromHttpStatus */])(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = Object(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"createWebChannelTransport\"])();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        // tslint:disable-next-line:no-any\n        var streamBridge = new __WEBPACK_IMPORTED_MODULE_3__remote_stream_bridge__[\"a\" /* StreamBridge */]({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"WebChannel\"].EventType.OPEN, function () {\n            if (!closed) {\n                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"WebChannel\"].EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"WebChannel\"].EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(__WEBPACK_IMPORTED_MODULE_0__firebase_webchannel_wrapper__[\"WebChannel\"].EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                // WebChannel delivers message events as array. If batching\n                // is not enabled (it's off by default) each message will be\n                // delivered alone, resulting in a single element array.\n                var msgData = msg.data[0];\n                Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = Object(__WEBPACK_IMPORTED_MODULE_2__remote_rpc_error__[\"d\" /* mapCodeFromRpcStatus */])(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = __WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](code, message));\n                    channel.close();\n                }\n                else {\n                    __WEBPACK_IMPORTED_MODULE_6__util_log__[\"b\" /* debug */](LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\n\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Ab=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.w=this.w}var qa=0,ra={};w.prototype.i=!1;w.prototype.Z=function(){if(!this.i&&(this.i=!0,this.A(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.A=function(){if(this.w)for(;this.w.length;)this.w.shift()()};var sa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Ra=function(){var a=x;if(Ma)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:\"\");if(z){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ja={};\nfunction Ta(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Ua;var Va=k.document;\nUa=Va&&z?Oa()||(\"CSS1Compat\"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!z||9<=Number(Ua),Ya=z&&!Ta(\"9\"),Za=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Pa=!0}A.prototype.b=function(){this.Pa=!1};function $a(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:ab[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u($a,A);var ab=Wa({2:\"touch\",3:\"pen\",4:\"mouse\"});$a.prototype.b=function(){$a.L.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var bb=\"closure_listenable_\"+(1E6*Math.random()|0);function cb(a){return!(!a||!a[bb])}var db=0;function eb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++db;this.Y=this.ca=!1}function fb(a){a.Y=!0;a.listener=null;a.a=null;a.src=null;a.ga=null};function gb(a){this.src=a;this.a={};this.b=0}gb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=hb(a,b,d,e);-1<h?(b=a[h],c||(b.ca=!1)):(b=new eb(b,this.src,f,!!d,e),b.ca=c,a.push(b));return b};function ib(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(fb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function jb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=hb(a,c,d,e));return-1<b?a[b]:null}\nfunction hb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Y&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.aa(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new gb(a));c=m.add(b,c,d,h,f);if(c.a)return c;d=sb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.Ha(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}function vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=pb(c),cb(a)?a.va(b,c,d,e):a&&(a=rb(a))&&(b=jb(a,b,c,d,e))&&wb(b)}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Y){var b=a.src;if(cb(b))ib(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(ib(c,a),0==c.b&&(c.src=null,b[kb]=null)):fb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Y&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ca&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Y)return!0;if(!Xa){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new $a(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew $a(b,this))}function rb(a){a=a[kb];return a instanceof gb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function B(){w.call(this);this.c=new gb(this);this.P=this;this.J=null}u(B,w);B.prototype[bb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.A=function(){B.L.A.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,fb(d[e]);delete a.a[c];a.b--}}this.J=null};g.aa=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Ha=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};g.va=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=hb(f,b,c,d);-1<b&&(fb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--))}};\nfunction Ab(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Y&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ca&&ib(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Pa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Lb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Lb(){this.next=this.b=this.a=null}Lb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Lb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.za;c.za=null;a()}};return function(a){d.next={za:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.ib,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.$=!1;g.K=null;g.ib=function(){if(this.$){var a=t()-this.g;0<a&&a<.8*this.b?this.K=this.a.setTimeout(this.f,this.b-a):(this.K&&(this.a.clearTimeout(this.K),this.K=null),this.dispatchEvent(\"tick\"),this.$&&(this.K=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.$=!0;this.K||(this.K=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.$=!1;a.K&&(a.a.clearTimeout(a.K),a.K=null)}g.A=function(){Xb.L.A.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.bb,this);this.a=[]}u($b,w);g=$b.prototype;g.ha=!1;g.X=null;g.Xa=function(a){this.a=arguments;this.X?this.ha=!0:ac(this)};g.A=function(){$b.L.A.call(this);this.X&&(k.clearTimeout(this.X),this.X=null,this.ha=!1,this.a=[])};g.bb=function(){this.X=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.X=Zb(a.b,a.c);a.f.apply(null,a.a)};function C(a){w.call(this);this.b=a;this.a={}}u(C,w);var bc=[];C.prototype.aa=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=nb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nC.prototype.va=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.va(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=pb(c),d=!!d,b=cb(a)?jb(a.c,String(b),c,d,e):a?(a=rb(a))?jb(a,b,c,d,e):null:null,b&&(wb(b),delete this.a[b.key])};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}C.prototype.A=function(){C.L.A.call(this);cc(this)};C.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c){this.reset(a,b,c,void 0,void 0)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function D(a,b){this.name=a;this.value=b}D.prototype.toString=function(){return this.name};var gc=new D(\"SEVERE\",1E3),hc=new D(\"WARNING\",900),ic=new D(\"INFO\",800),jc=new D(\"CONFIG\",700),kc=new D(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}fc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar mc={},nc=null;function oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function E(a,b){a&&a.log(hc,b,void 0)}function pc(a,b){a&&a.log(ic,b,void 0)}function F(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}qc.prototype.Ea=function(){this.b=!1};function rc(a,b,c,d,e,f){H(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var G=m[v].split(\"=\");if(1<G.length){var Z=G[0];G=G[1];var Mb=Z.split(\"_\");h=2<=Mb.length&&\"type\"==Mb[1]?h+(Z+\"=\"+G+\"&\"):h+(Z+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction sc(a,b,c,d,e,f,h){H(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function tc(a,b,c,d){H(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+uc(a,c)+(d?\" \"+d:\"\")})}function vc(a,b){H(a,function(){return\"TIMEOUT: \"+b})}function I(a,b){F(a.a,b)}function wc(a,b,c){(a=a.a)&&a.log(gc,c||\"Exception\",b)}function H(a,b){pc(a.a,b)}function xc(a,b){(a=a.a)&&a.log(gc,b,void 0)}\nfunction uc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return I(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var yc=new B;function zc(a){A.call(this,\"serverreachability\",a)}u(zc,A);function Ac(a){yc.dispatchEvent(new zc(yc,a))}function Bc(a){A.call(this,\"statevent\",a)}u(Bc,A);function J(a){yc.dispatchEvent(new Bc(yc,a))}function Cc(a){A.call(this,\"timingevent\",a)}u(Cc,A);function Dc(a,b,c){yc.dispatchEvent(new Cc(yc,a,b,c))}function Ec(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Fc={NO_ERROR:0,jb:1,qb:2,pb:3,mb:4,ob:5,rb:6,Ra:7,TIMEOUT:8,ub:9};var Gc={lb:\"complete\",yb:\"success\",Sa:\"error\",Ra:\"abort\",wb:\"ready\",xb:\"readystatechange\",TIMEOUT:\"timeout\",sb:\"incrementaldata\",vb:\"progress\",nb:\"downloadprogress\",zb:\"uploadprogress\"};function Hc(){}Hc.prototype.a=null;function Ic(a){var b;(b=a.a)||(b={},Jc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Kc;function Lc(){}u(Lc,Hc);function Mc(a){return(a=Jc(a))?new ActiveXObject(a):new XMLHttpRequest}function Jc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Kc=new Lc;function K(a,b,c,d){this.i=a;this.b=b;this.f=c;this.T=d||1;this.N=new C(this);this.S=Nc;a=this.H=new Xb;a.b=Oc;a.K&&a.$?(Yb(a),a.start()):a.K&&Yb(a);this.j=null;this.c=!1;this.m=this.g=this.h=this.J=this.D=this.U=this.w=null;this.s=[];this.a=null;this.F=0;this.l=this.o=null;this.C=-1;this.B=!1;this.P=0;this.I=null;this.M=!1}var Nc=45E3,Oc=250;\nfunction Pc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Qc={},Rc={};g=K.prototype;g.setTimeout=function(a){this.S=a};function Sc(a,b,c){a.J=1;a.h=Tc(L(b));a.m=c;a.M=!0;Uc(a,null)}function Vc(a,b,c,d){a.J=1;a.h=Tc(L(b));a.m=null;a.M=c;Uc(a,d)}\nfunction Uc(a,b){a.D=t();Wc(a);a.g=L(a.h);Xc(a.g,\"t\",a.T);a.F=0;a.a=a.i.da(a.i.ia()?b:null);0<a.P&&(a.I=new $b(r(a.Qa,a,a.a),a.P));a.N.aa(a.a,\"readystatechange\",a.fb);b=a.j?Ea(a.j):{};a.m?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.m,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));Ac(1);rc(a.b,a.o,a.g,a.f,a.T,a.m)}g.fb=function(a){a=a.target;var b=this.I;b&&3==M(a)?(I(this.b,\"Throttling readystatechange.\"),b.Xa()):this.Qa(a)};\ng.Qa=function(a){try{a==this.a?Yc(this):E(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;wc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else wc(this.b,c,\"No response text\")}finally{}};\nfunction Yc(a){var b=M(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Ka&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?Ac(3):Ac(2));Zc(a);var e=a.a.W();a.C=e;(c=a.a.V())||I(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.c=200==e;sc(a.b,a.o,a.g,a.f,a.T,b,e);a.c?(a.M?($c(a,b,c),Ka&&a.c&&3==b&&ad(a)):(tc(a.b,a.f,c,null),bd(a,c)),4==b&&cd(a),a.c&&!a.B&&(4==b?a.i.ua(a):(a.c=!1,Wc(a)))):(400==e&&0<c.indexOf(\"Unknown SID\")?(a.l=3,J(12),E(a.b.a,\"XMLHTTP Unknown SID (\"+a.f+\")\")):(a.l=0,J(13),\nE(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.f+\")\")),cd(a),dd(a))}}function $c(a,b,c){for(var d=!0;!a.B&&a.F<c.length;){var e=ed(a,c);if(e==Rc){4==b&&(a.l=4,J(14),d=!1);tc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Qc){a.l=4;J(15);tc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else tc(a.b,a.f,e,null),bd(a,e)}4==b&&0==c.length&&(a.l=1,J(16),d=!1);a.c=a.c&&d;d||(tc(a.b,a.f,c,\"[Invalid Chunked Response]\"),cd(a),dd(a))}\ng.eb=function(){var a=M(this.a),b=this.a.V();this.F<b.length&&(Zc(this),$c(this,a,b),this.c&&4!=a&&Wc(this))};function ad(a){a.N.aa(a.H,\"tick\",a.eb);a.H.start()}function ed(a,b){var c=a.F,d=b.indexOf(\"\\n\",c);if(-1==d)return Rc;c=Number(b.substring(c,d));if(isNaN(c))return Qc;d+=1;if(d+c>b.length)return Rc;b=b.substr(d,c);a.F=d+c;return b}g.cancel=function(){this.B=!0;cd(this)};function Wc(a){a.U=t()+a.S;fd(a,a.S)}\nfunction fd(a,b){if(null!=a.w)throw Error(\"WatchDog timer not null\");a.w=Ec(r(a.cb,a),b)}function Zc(a){a.w&&(k.clearTimeout(a.w),a.w=null)}g.cb=function(){this.w=null;var a=t();0<=a-this.U?(this.c&&xc(this.b,\"Received watchdog timeout even though request loaded successfully\"),vc(this.b,this.g),2!=this.J&&(Ac(3),J(17)),cd(this),this.l=2,dd(this)):(E(this.b.a,\"WatchDog timer called too early\"),fd(this,this.U-a))};function dd(a){a.i.Ja()||a.B||a.i.ua(a)}\nfunction cd(a){Zc(a);var b=a.I;b&&\"function\"==typeof b.Z&&b.Z();a.I=null;Yb(a.H);cc(a.N);a.a&&(b=a.a,a.a=null,b.abort(),b.Z())}function bd(a,b){try{a.i.Ma(a,b),Ac(4)}catch(c){wc(a.b,c,\"Error in httprequest callback\")}};function gd(a){if(a.v&&\"function\"==typeof a.v)return a.v();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction hd(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.v&&\"function\"==typeof a.v)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=gd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof N?(c=a.O(),d=a.v()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=N.prototype;g.u=function(){return this.c};g.v=function(){id(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){id(this);return this.a.concat()};\nfunction jd(a){a.b={};a.a.length=0;a.c=0}function kd(a,b){return O(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&id(a),!0):!1}function id(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return O(this.b,a)?this.b[a]:b};g.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var ld=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function md(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function P(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof P?(this.h=void 0!==b?b:a.h,nd(this,a.f),this.j=a.j,od(this,a.b),pd(this,a.i),this.a=a.a,qd(this,rd(a.c)),this.g=a.g):a&&(c=String(a).match(ld))?(this.h=!!b,nd(this,c[1]||\"\",!0),this.j=sd(c[2]||\"\"),od(this,c[3]||\"\",!0),pd(this,c[4]),this.a=sd(c[5]||\"\",!0),qd(this,c[6]||\"\",!0),this.g=sd(c[7]||\"\")):(this.h=!!b,this.c=new td(null,this.h))}\nP.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ud(b,vd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ud(b,vd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ud(c,\"/\"==c.charAt(0)?wd:xd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ud(c,yd));return a.join(\"\")};\nP.prototype.resolve=function(a){var b=L(this),c=!!a.f;c?nd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?od(b,a.b):c=null!=a.i;var d=a.a;if(c)pd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?qd(b,rd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function L(a){return new P(a)}function nd(a,b,c){a.f=c?sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function od(a,b,c){a.b=c?sd(b,!0):b}function pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function qd(a,b,c){b instanceof td?(a.c=b,zd(a.c,a.h)):(c||(b=ud(b,Ad)),a.c=new td(b,a.h))}\nfunction Q(a,b,c){a.c.set(b,c)}function Xc(a,b,c){n(c)||(c=[String(c)]);Bd(a.c,b,c)}function Tc(a){Q(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function Cd(a){return a instanceof P?L(a):new P(a,void 0)}function Dd(a,b,c,d){var e=new P(null,void 0);a&&nd(e,a);b&&od(e,b);c&&pd(e,c);d&&(e.a=d);return e}function sd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ud(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Ed),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Ed(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var vd=/[#\\/\\?@]/g,xd=/[#\\?:]/g,wd=/[#\\?]/g,Ad=/[#\\?@]/g,yd=/#/g;function td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function R(a){a.a||(a.a=new N,a.b=0,a.c&&md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=td.prototype;g.u=function(){R(this);return this.b};\ng.add=function(a,b){R(this);this.c=null;a=Fd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Gd(a,b){R(a);b=Fd(a,b);O(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,kd(a.a,b))}function Hd(a,b){R(a);b=Fd(a,b);return O(a.a.b,b)}g.forEach=function(a,b){R(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){R(this);for(var a=this.a.v(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.v=function(a){R(this);var b=[];if(l(a))Hd(this,a)&&(b=xa(b,this.a.get(Fd(this,a))));else{a=this.a.v();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){R(this);this.c=null;a=Fd(this,a);Hd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.v(a):[];return 0<a.length?String(a[0]):b};\nfunction Bd(a,b,c){Gd(a,b);0<c.length&&(a.c=null,a.a.set(Fd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.v(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function rd(a){var b=new td;b.c=a.c;a.a&&(b.a=new N(a.a),b.b=a.b);return b}\nfunction Fd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function zd(a,b){b&&!a.f&&(R(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Gd(this,b),Bd(this,c,a))},a));a.f=b};function Id(){this.a=t()}var Jd=null;Id.prototype.set=function(a){this.a=a};Id.prototype.reset=function(){this.set(t())};Id.prototype.get=function(){return this.a};function Kd(){Jd||(Jd=new Id)}function Ld(){Jd||(Jd=new Id)}u(Ld,Kd);function Md(){}var Nd={OPEN:\"a\",kb:\"b\",Sa:\"c\",tb:\"d\"};function Od(){A.call(this,\"d\")}u(Od,A);function Pd(){A.call(this,\"c\")}u(Pd,A);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Qd.prototype;g.R=null;\nfunction Rd(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.H.a;if(null!=b)I(a.b,function(){return true?\"Buffered\":\"Unbuffered\"}),J(4),b?(J(10),Sd(a.a,a,!1)):(J(11),Sd(a.a,a,!0));else{a.c=new K(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.l);J(4);Xc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.J;d&&e&&Q(c,d,e);Vc(a.c,c,!1,a.g)}}g.da=function(a){return this.a.da(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ja=function(){return!1};\ng.Ma=function(a,b){this.f=a.C;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.D&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.J=a:E(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.ma.a.parse(b)}catch(e){wc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==\nthis.R)if(this.h)J(6);else if(\"11111\"==b){if(J(5),this.h=!0,!z||10<=Number(Ua))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)}else J(7),this.h=!1};\ng.ua=function(){this.f=this.c.C;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),J(10),Sd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?J(8):1==this.R&&J(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.ra=function(){return this.a.ra()};function Vd(){this.a=this.b=null};function S(){this.a=new N}function Wd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}S.prototype.u=function(){return this.a.u()};S.prototype.add=function(a){this.a.set(Wd(a),a)};S.prototype.contains=function(a){a=Wd(a);return O(this.a.b,a)};S.prototype.v=function(){return this.a.v()};function Xd(a,b){this.a=a;this.b=b};function Yd(a){this.g=a||Zd;this.f=k.pa&&k.pa.Ka&&k.pa.Ka()&&k.pa.Ka().Bb?this.g:1;this.a=null;1<this.f&&(this.a=new S);this.b=null;this.c=[]}var Zd=10;function $d(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new S,a.b&&(ae(a,a.b),a.b=null))}function be(a){return a.b?!0:a.a?a.a.u()>=a.f:!1}function ce(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function ae(a,b){a.a?a.a.add(b):a.b=b}\nfunction de(a,b){a.b&&a.b==b?a.b=null:a.a&&a.a.contains(b)&&kd(a.a.a,Wd(b))}Yd.prototype.cancel=function(){this.c=ee(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.v(),function(a){a.cancel()}),jd(this.a.a))};function ee(a){if(null!=a.b)return a.c.concat(a.b.s);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ta(a.a.v(),function(a){b=b.concat(a.s)});return b}return ya(a.c)}function fe(a,b){a.c=a.c.concat(b)};function ge(){}ge.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};ge.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function he(){this.a=new ge}function ie(a,b,c){var d=c||\"\";try{hd(a,function(a,c){var e=a;p(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function je(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(ke,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(ke,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(ke,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(ke,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function ke(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){wc(a,f)}};function T(a){B.call(this);this.headers=new N;this.F=a||null;this.f=!1;this.D=this.a=null;this.M=this.s=\"\";this.j=0;this.g=\"\";this.h=this.I=this.o=this.H=!1;this.l=0;this.B=null;this.N=le;this.C=this.m=!1}u(T,B);var le=\"\";T.prototype.b=oc(\"goog.net.XhrIo\");var me=/^https?$/i,ne=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.s+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.s=a;this.g=\"\";this.j=0;this.M=b;this.H=!1;this.f=!0;this.a=this.F?Mc(this.F):Mc(Kc);this.D=this.F?Ic(this.F):Ic(Kc);this.a.onreadystatechange=r(this.La,this);try{F(this.b,U(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){F(this.b,U(this,\"Error opening Xhr: \"+f.message));oe(this,f);return}a=c||\"\";var e=new N(this.headers);\nd&&hd(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(ne,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{pe(this),0<this.l&&(this.C=qe(this.a),F(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ia,this)):this.B=Zb(this.Ia,this.l,this)),F(this.b,U(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){F(this.b,U(this,\"Send error: \"+f.message)),oe(this,f)}};function qe(a){return z&&Ta(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ia=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,F(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function oe(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;re(a);se(a)}function re(a){a.H||(a.H=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(F(this.b,U(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),se(this))};g.A=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),se(this,!0));T.L.A.call(this)};g.La=function(){this.i||(this.I||this.o||this.h?te(this):this.ab())};g.ab=function(){te(this)};\nfunction te(a){if(a.f&&\"undefined\"!=typeof goog)if(a.D[1]&&4==M(a)&&2==a.W())F(a.b,U(a,\"Local request error detected and ignored\"));else if(a.o&&4==M(a))Zb(a.La,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==M(a)){F(a.b,U(a,\"Request complete\"));a.f=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.s).match(ld)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!me.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",re(a))}finally{se(a)}}}function se(a,b){if(a.a){pe(a);var c=a.a,d=a.D[0]?aa:null;a.a=null;a.D=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(gc,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function pe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction M(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<M(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<M(this)?this.a.statusText:\"\"}catch(a){return F(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return F(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Ya=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};g.Fa=function(){return this.j};g.Za=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.M+\" \"+a.s+\" \"+a.W()+\"]\"};function ue(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function ve(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ue(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}Q(a,b,c);return a};function we(a){this.ya=0;this.g=[];this.a=new qc;this.H=new Vd;this.ja=this.wa=this.F=this.ka=this.b=this.J=this.j=this.U=this.h=this.M=this.i=null;this.Ua=this.P=0;this.la=this.B=this.o=this.m=this.l=this.f=null;this.s=this.xa=this.N=-1;this.T=this.w=this.C=0;this.S=a&&a.supportsCrossDomainXhr||!1;this.I=\"\";this.c=new Yd(a&&a.concurrentRequestLimit);this.ma=new he;this.D=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ta=a&&a.fastHandshake||!1;a&&a.Ea&&this.a.Ea()}g=we.prototype;\ng.oa=8;g.G=1;function xe(a){I(a.a,\"disconnect()\");ye(a);if(3==a.G){var b=a.P++,c=L(a.F);Q(c,\"SID\",a.I);Q(c,\"RID\",b);Q(c,\"TYPE\",\"terminate\");ze(a,c);b=new K(a,a.a,b,void 0);b.J=2;b.h=Tc(L(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.da(null),b.a.fa(b.h));b.D=t();Wc(b)}Ae(a)}\nfunction ye(a){a.B&&(a.B.abort(),a.B=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);Be(a);a.c.cancel();a.l&&(k.clearTimeout(a.l),a.l=null)}function Ce(a,b){1E3==a.g.length&&xc(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Xd(a.Ua++,b));3==a.G&&De(a)}g.Ja=function(){return 0==this.G};function De(a){be(a.c)||a.l||(a.l=Ec(r(a.Oa,a),0),a.C=0)}\nfunction Ee(a,b){var c=a.c;if((c.b?1:c.a?c.a.u():0)>=a.c.f-(a.l?1:0))return xc(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.l)return I(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.s.concat(a.g),!0;if(1==a.G||2==a.G||2<=a.C)return!1;I(a.a,\"Going to retry POST\");a.l=Ec(r(a.Oa,a,b),Fe(a,a.C));a.C++;return!0}\ng.Oa=function(a){this.l=null;I(this.a,\"startForwardChannel_\");if(1==this.G)if(a)xc(this.a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new K(this,this.a,a,void 0),c=this.i;this.M&&(c?(c=Ea(c),Ga(c,this.M)):c=this.M);null===this.h&&(b.j=c);var d=Ge(this,b),e=L(this.F);Q(e,\"RID\",a);Q(e,\"CVER\",21);this.D&&this.j&&Q(e,\"X-HTTP-Session-Id\",this.j);ze(this,e);this.h&&c&&ve(e,this.h,c);ae(this.c,b);this.Ta?(Q(e,\"$req\",d),Sc(b,e,null)):Sc(b,\ne,d);this.G=2}else 3==this.G&&(a?He(this,a):0==this.g.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):be(this.c)?xc(this.a,\"startForwardChannel_ returned: connection already in progress\"):(He(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction He(a,b){var c;b?c=b.f:c=a.P++;var d=L(a.F);Q(d,\"SID\",a.I);Q(d,\"RID\",c);Q(d,\"AID\",a.N);ze(a,d);a.h&&a.i&&ve(d,a.h,a.i);c=new K(a,a.a,c,a.C+1);null===a.h&&(c.j=a.i);b&&(a.g=b.s.concat(a.g));b=Ge(a,c);c.setTimeout(Math.round(1E4)+Math.round(1E4*Math.random()));ae(a.c,c);Sc(c,d,b)}function ze(a,b){a.f&&hd({},function(a,d){Q(b,d,a)})}\nfunction Ge(a,b){var c=Math.min(a.g.length,1E3),d=a.f?r(a.f.Va,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var G=e[v].a,Z=e[v].b;G-=f;if(0>G)f=Math.max(0,e[v].a-100),m=!1;else try{ie(Z,h,\"req\"+G+\"_\")}catch(Mb){d&&d(Z)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.s=a;return d}function Ie(a){if(!a.b&&!a.m){a.T=1;var b=a.Na;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.w=0}}\nfunction Je(a){if(a.b||a.m)return xc(a.a,\"Request already in progress\"),!1;if(3<=a.w)return!1;I(a.a,\"Going to retry GET\");a.T++;a.m=Ec(r(a.Na,a),Fe(a,a.w));a.w++;return!0}\ng.Na=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new K(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.P=0;var a=L(this.wa);Q(a,\"RID\",\"rpc\");Q(a,\"SID\",this.I);Q(a,\"CI\",this.la?\"0\":\"1\");Q(a,\"AID\",this.N);ze(this,a);Q(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&ve(a,this.h,this.i);Vc(this.b,a,!0,this.ja);I(this.a,\"New Request created\")};\nfunction Sd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&$d(a.c,d);a.la=c;a.s=b.f;I(a.a,\"connectChannel_()\");a.F=Ke(a,a.ka);De(a)}function Ud(a,b){I(a.a,\"Test Connection Failed\");a.s=b.f;V(a,2)}\ng.Ma=function(a,b){if(0!=this.G&&(this.b==a||ce(this.c,a)))if(this.s=a.C,ce(this.c,a)&&3==this.G){try{var c=this.ma.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Be(this),this.b.cancel(),this.b=null;else break a;else E(this.a.a,\"We do not have a BackChannel established\");Je(this);J(18)}else this.xa=b[1],a=this.xa-this.N,0<a&&(b=\nb[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.la&&0==this.w&&!this.o&&(this.o=Ec(r(this.$a,this),6E3)));else I(this.a,\"Bad POST response data returned\"),V(this,11)}else if(this.b==a&&Be(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.ma.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.G)if(\"c\"==d[0]){this.I=d[1];this.ja=d[2];var e=d[3];null!=e&&(this.oa=e,H(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.ya=d,H(this.a,\"SVER=\"+this.ya));\nthis.D&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&$d(this.c,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.J=d,Q(this.F,this.j,d)):E(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.G=3;this.f&&this.f.Da();this.wa=Td(this,this.ja,this.ka);Ie(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.G&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):xe(this):\"noop\"!=d[0]&&this.f&&this.f.Ca(d),this.w=0)}};\ng.$a=function(){null!=this.o&&(this.o=null,this.b.cancel(),this.b=null,Je(this),J(19))};function Be(a){null!=a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.ua=function(a){I(this.a,\"Request complete\");var b=null;if(this.b==a){Be(this);this.b=null;var c=2}else if(ce(this.c,a))b=a.s,de(this.c,a),c=1;else return;this.s=a.C;if(0!=this.G)if(a.c)1==c?(Dc(a.m?a.m.length:0,t()-a.D,this.C),De(this)):Ie(this);else{var d=a.l;if(3==d||0==d&&0<this.s)I(this.a,\"Not retrying due to error type\");else{var e=this;I(this.a,function(){return\"Maybe retrying, last error: \"+Pc(d,e.s)});if(1==c&&Ee(this,a)||2==c&&Je(this))return;I(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&fe(this.c,b);I(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Fe(a,b){var c=5E3+Math.floor(1E4*Math.random());a.ra()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){H(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=r(a.hb,a);c||(c=new P(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||nd(c,\"https\"),Tc(c));je(c.toString(),d)}else J(2);I(a.a,\"HttpChannel: error - \"+b);a.G=0;a.f&&a.f.Ba(b);Ae(a);ye(a)}g.hb=function(a){a?(H(this.a,\"Successfully pinged google.com\"),J(2)):(H(this.a,\"Failed to ping google.com\"),J(1))};\nfunction Ae(a){a.G=0;a.s=-1;if(a.f){var b=ee(a.c);if(0!=b.length||0!=a.g.length)I(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,ya(a.g),a.g.length=0;a.f.Aa()}}function Ke(a,b){b=Le(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Le(a,a.ia()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Le(a,b,c){var d=Cd(c);if(\"\"!=d.b)b&&od(d,b+\".\"+d.b),pd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Dd(e.protocol,f,e.port,c)}a.U&&Ba(a.U,function(a,b){Q(d,b,a)});b=a.j;c=a.J;b&&c&&Q(d,b,c);Q(d,\"VER\",a.oa);ze(a,d);return d}g.da=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.m=this.S;return a};g.ra=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Ld;function Me(){}g=Me.prototype;g.Da=function(){};\ng.Ca=function(){};g.Ba=function(){};g.Aa=function(){};g.Va=function(){};function Ne(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Oe(){if(z&&!(10<=Number(Ua)))throw Error(\"Environmental error: no available transport.\");}Oe.prototype.a=function(a,b){return new W(a,b)};\nfunction W(a,b){B.call(this);this.a=new we(b);this.b=a;this.s=b&&b.testUrl?b.testUrl:Ne(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nthis.a.M=a;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.h=a);this.o=b&&b.supportsCrossDomainXhr||!1;this.m=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],E(this.f,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Pe(this)}u(W,B);\nW.prototype.j=function(){this.a.f=this.h;this.o&&(this.a.S=!0);var a=this.a,b=this.s,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");J(0);a.ka=c;a.U=d||{};a.D&&(I(a.a,\"connect() bypassed channel-test.\"),a.H.b=[],a.H.a=!1);I(a.a,\"connectTest_()\");a.B=new Qd(a,a.a);null===a.h&&(a.B.i=a.i);c=b;a.h&&a.i&&(c=ve(b,a.h,a.i));a=a.B;a.l=c;b=Ke(a.a,a.l);J(3);c=a.a.H.b;null!=c?(a.g=c[0],a.R=1,Rd(a)):(Xc(b,\"MODE\",\"init\"),!a.a.D&&a.a.j&&Xc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new K(a,a.b,void 0,void 0),a.c.j=a.i,Vc(a.c,\nb,!1,null),a.R=0)};W.prototype.close=function(){xe(this.a)};W.prototype.l=function(a){if(l(a)){var b={};b.__data__=a;Ce(this.a,b)}else this.m?(b={},b.__data__=Db(a),Ce(this.a,b)):Ce(this.a,a)};W.prototype.A=function(){this.a.f=null;delete this.h;xe(this.a);delete this.a;W.L.A.call(this)};function Qe(a){Od.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}u(Qe,Od);\nfunction Re(){Pd.call(this);this.status=1}u(Re,Pd);function Pe(a){this.a=a}u(Pe,Me);Pe.prototype.Da=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Pe.prototype.Ca=function(a){this.a.dispatchEvent(new Qe(a))};Pe.prototype.Ba=function(a){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Re(a))};Pe.prototype.Aa=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Se=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Oe);function Te(){this.b=[];this.a=[]}function Ue(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Te.prototype.u=function(){return this.b.length+this.a.length};Te.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Te.prototype.v=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ve(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(We);this.a=new Te;this.b=new S;this.g=null;this.ba()}u(Ve,w);var We=\"[goog.structs.Pool] Min can not be greater than max\";g=Ve.prototype;g.ea=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.u()&&(b=Ue(this.a),!this.ta(b));)this.ba();!b&&this.u()<this.c&&(b=this.qa());b&&(this.g=a,this.b.add(b));return b}};g.gb=function(a){return kd(this.b.a,Wd(a))?(this.na(a),!0):!1};\ng.na=function(a){kd(this.b.a,Wd(a));this.ta(a)&&this.u()<this.c?this.a.a.push(a):Xe(a)};g.ba=function(){for(var a=this.a;this.u()<this.h;){var b=this.qa();a.a.push(b)}for(;this.u()>this.c&&0<this.a.u();)Xe(Ue(a))};g.qa=function(){return{}};function Xe(a){if(\"function\"==typeof a.Z)a.Z();else for(var b in a)a[b]=null}g.ta=function(a){return\"function\"==typeof a.Wa?a.Wa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.u=function(){return this.a.u()+this.b.u()};\ng.A=function(){Ve.L.A.call(this);if(0<this.b.u())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Xe(Ue(a));delete this.a};function Ye(a,b){this.a=a;this.b=b};function Ze(a){this.a=[];if(a)a:{if(a instanceof Ze){var b=a.O();a=a.v();if(0>=this.u()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Ye(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)$e(this,b[d],a[d])}}function $e(a,b,c){var d=a.a;d.push(new Ye(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Ze.prototype.v=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nZe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Ze.prototype.u=function(){return this.a.length};function af(){Ze.call(this)}u(af,Ze);function X(a,b){this.f=new af;Ve.call(this,a,b)}u(X,Ve);g=X.prototype;g.ea=function(a,b){if(!a)return X.L.ea.call(this);$e(this.f,void 0!==b?b:100,a);this.sa()};g.sa=function(){for(var a=this.f;0<a.u();){var b=this.ea();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.na=function(a){X.L.na.call(this,a);this.sa()};g.ba=function(){X.L.ba.call(this);this.sa()};g.A=function(){X.L.A.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Y(a,b,c,d){this.l=a;this.j=!!d;X.call(this,b,c)}u(Y,X);Y.prototype.qa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Y.prototype.ta=function(a){return!a.i&&!a.a};Oe.prototype.createWebChannel=Oe.prototype.a;W.prototype.send=W.prototype.l;W.prototype.open=W.prototype.j;W.prototype.close=W.prototype.close;Fc.NO_ERROR=0;Fc.TIMEOUT=8;Fc.HTTP_ERROR=6;Gc.COMPLETE=\"complete\";Md.EventType=Nd;Nd.OPEN=\"a\";Nd.CLOSE=\"b\";Nd.ERROR=\"c\";Nd.MESSAGE=\"d\";B.prototype.listen=B.prototype.aa;Y.prototype.getObject=Y.prototype.ea;Y.prototype.releaseObject=Y.prototype.gb;T.prototype.listenOnce=T.prototype.Ha;T.prototype.getLastError=T.prototype.Za;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Ya;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Se,ErrorCode:Fc,EventType:Gc,WebChannel:Md,XhrIoPool:Y};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 122 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return StreamBridge; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\n\n\n//# sourceMappingURL=stream_bridge.js.map\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = configureForFirebase;\n/* unused harmony export configureForStandalone */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api_blob__ = __webpack_require__(100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_database__ = __webpack_require__(124);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__api_field_path__ = __webpack_require__(105);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__api_field_value__ = __webpack_require__(116);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__api_geo_point__ = __webpack_require__(102);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_obj__ = __webpack_require__(82);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar firestoreNamespace = {\n    Firestore: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"e\" /* PublicFirestore */],\n    GeoPoint: __WEBPACK_IMPORTED_MODULE_4__api_geo_point__[\"a\" /* GeoPoint */],\n    Blob: __WEBPACK_IMPORTED_MODULE_0__api_blob__[\"b\" /* PublicBlob */],\n    Transaction: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"h\" /* PublicTransaction */],\n    WriteBatch: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"i\" /* PublicWriteBatch */],\n    DocumentReference: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"c\" /* PublicDocumentReference */],\n    DocumentSnapshot: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"d\" /* PublicDocumentSnapshot */],\n    Query: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"f\" /* PublicQuery */],\n    QuerySnapshot: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"g\" /* PublicQuerySnapshot */],\n    CollectionReference: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"b\" /* PublicCollectionReference */],\n    FieldPath: __WEBPACK_IMPORTED_MODULE_2__api_field_path__[\"a\" /* FieldPath */],\n    FieldValue: __WEBPACK_IMPORTED_MODULE_3__api_field_value__[\"c\" /* PublicFieldValue */],\n    setLogLevel: __WEBPACK_IMPORTED_MODULE_1__api_database__[\"a\" /* Firestore */].setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nfunction configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new __WEBPACK_IMPORTED_MODULE_1__api_database__[\"a\" /* Firestore */](app); }, Object(__WEBPACK_IMPORTED_MODULE_5__util_obj__[\"f\" /* shallowCopy */])(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nfunction configureForStandalone(exportObject) {\n    var copiedNamespace = Object(__WEBPACK_IMPORTED_MODULE_5__util_obj__[\"f\" /* shallowCopy */])(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = __WEBPACK_IMPORTED_MODULE_1__api_database__[\"a\" /* Firestore */];\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Firestore; });\n/* unused harmony export Transaction */\n/* unused harmony export WriteBatch */\n/* unused harmony export DocumentReference */\n/* unused harmony export DocumentSnapshot */\n/* unused harmony export Query */\n/* unused harmony export QuerySnapshot */\n/* unused harmony export CollectionReference */\n/* unused harmony export changesFromSnapshot */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return PublicFirestore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return PublicTransaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return PublicWriteBatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return PublicDocumentReference; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return PublicDocumentSnapshot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return PublicQuery; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return PublicQuerySnapshot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return PublicCollectionReference; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__field_path__ = __webpack_require__(105);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_database_info__ = __webpack_require__(110);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_firestore_client__ = __webpack_require__(125);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_query__ = __webpack_require__(103);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_field_value__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_mutation__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__model_path__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__platform_platform__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__util_api__ = __webpack_require__(101);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__util_async_observer__ = __webpack_require__(148);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__util_async_queue__ = __webpack_require__(149);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__util_input_validation__ = __webpack_require__(89);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__credentials__ = __webpack_require__(150);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__observer__ = __webpack_require__(152);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__user_data_converter__ = __webpack_require__(153);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"j\" /* validateNamedType */])('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"i\" /* validateNamedOptionalType */])('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = __WEBPACK_IMPORTED_MODULE_19__util_obj__[\"b\" /* defaulted */](settings.ssl, DEFAULT_SSL);\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"k\" /* validateOptionNames */])('settings', settings, ['host', 'ssl', 'credentials']);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"i\" /* validateNamedOptionalType */])('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.equals = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this._queue = new __WEBPACK_IMPORTED_MODULE_14__util_async_queue__[\"a\" /* AsyncQueue */]();\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            disableNetwork: function () { return _this._firestoreClient.disableNetwork(); },\n            enableNetwork: function () { return _this._firestoreClient.enableNetwork(); },\n            drainAsyncQueue: function (executeDelayedTasks) {\n                return _this._queue.drain(executeDelayedTasks);\n            }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new __WEBPACK_IMPORTED_MODULE_20__credentials__[\"b\" /* FirebaseCredentialsProvider */](app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new __WEBPACK_IMPORTED_MODULE_1__core_database_info__[\"a\" /* DatabaseId */](external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new __WEBPACK_IMPORTED_MODULE_20__credentials__[\"a\" /* EmptyCredentialsProvider */]();\n        }\n        config.settings = new FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Firestore.settings', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Firestore.settings', 'object', 1, settingsLiteral);\n        if (__WEBPACK_IMPORTED_MODULE_19__util_obj__[\"a\" /* contains */](settingsLiteral, 'persistence')) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.equals(newSettings)) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = Object(__WEBPACK_IMPORTED_MODULE_20__credentials__[\"c\" /* makeCredentialsProvider */])(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new __WEBPACK_IMPORTED_MODULE_1__core_database_info__[\"b\" /* DatabaseInfo */](this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.equals(thisDb)) {\n                    throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new __WEBPACK_IMPORTED_MODULE_22__user_data_converter__[\"a\" /* DocumentKeyReference */](_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new __WEBPACK_IMPORTED_MODULE_22__user_data_converter__[\"b\" /* UserDataConverter */](preConverter);\n        this._firestoreClient = new __WEBPACK_IMPORTED_MODULE_2__core_firestore_client__[\"a\" /* FirestoreClient */](__WEBPACK_IMPORTED_MODULE_10__platform_platform__[\"a\" /* PlatformSupport */].getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!__WEBPACK_IMPORTED_MODULE_19__util_obj__[\"a\" /* contains */](options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (__WEBPACK_IMPORTED_MODULE_19__util_obj__[\"a\" /* contains */](options, 'firestoreId')) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (__WEBPACK_IMPORTED_MODULE_19__util_obj__[\"a\" /* contains */](options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new __WEBPACK_IMPORTED_MODULE_1__core_database_info__[\"a\" /* DatabaseId */](projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Firestore.collection', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new CollectionReference(__WEBPACK_IMPORTED_MODULE_9__model_path__[\"b\" /* ResourcePath */].fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Firestore.doc', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return DocumentReference.forPath(__WEBPACK_IMPORTED_MODULE_9__model_path__[\"b\" /* ResourcePath */].fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Firestore.runTransaction', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (__WEBPACK_IMPORTED_MODULE_17__util_log__[\"d\" /* getLogLevel */]()) {\n                case __WEBPACK_IMPORTED_MODULE_17__util_log__[\"a\" /* LogLevel */].DEBUG:\n                    return 'debug';\n                case __WEBPACK_IMPORTED_MODULE_17__util_log__[\"a\" /* LogLevel */].ERROR:\n                    return 'error';\n                case __WEBPACK_IMPORTED_MODULE_17__util_log__[\"a\" /* LogLevel */].SILENT:\n                    return 'silent';\n                default:\n                    return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown log level: ' + __WEBPACK_IMPORTED_MODULE_17__util_log__[\"d\" /* getLogLevel */]());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Firestore.setLogLevel', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                __WEBPACK_IMPORTED_MODULE_17__util_log__[\"e\" /* setLogLevel */](__WEBPACK_IMPORTED_MODULE_17__util_log__[\"a\" /* LogLevel */].DEBUG);\n                break;\n            case 'error':\n                __WEBPACK_IMPORTED_MODULE_17__util_log__[\"e\" /* setLogLevel */](__WEBPACK_IMPORTED_MODULE_17__util_log__[\"a\" /* LogLevel */].ERROR);\n                break;\n            case 'silent':\n                __WEBPACK_IMPORTED_MODULE_17__util_log__[\"e\" /* setLogLevel */](__WEBPACK_IMPORTED_MODULE_17__util_log__[\"a\" /* LogLevel */].SILENT);\n                break;\n            default:\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\n\n/**\n * A reference to a transaction.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof __WEBPACK_IMPORTED_MODULE_5__model_document__[\"b\" /* NoDocument */]) {\n                return new DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof __WEBPACK_IMPORTED_MODULE_0__field_path__[\"a\" /* FieldPath */]) {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\n\nvar WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"f\" /* Precondition */].NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof __WEBPACK_IMPORTED_MODULE_0__field_path__[\"a\" /* FieldPath */]) {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"f\" /* Precondition */].exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"a\" /* DeleteMutation */](ref._key, __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"f\" /* Precondition */].NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new __WEBPACK_IMPORTED_MODULE_6__model_document_key__[\"a\" /* DocumentKey */](path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('DocumentReference.collection', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = __WEBPACK_IMPORTED_MODULE_9__model_path__[\"b\" /* ResourcePath */].fromString(pathString);\n        return new CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"a\" /* invalidClassError */])('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.equals(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"f\" /* Precondition */].NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof __WEBPACK_IMPORTED_MODULE_0__field_path__[\"a\" /* FieldPath */]) {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"f\" /* Precondition */].exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"a\" /* DeleteMutation */](this._key, __WEBPACK_IMPORTED_MODULE_8__model_mutation__[\"f\" /* Precondition */].NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !Object(__WEBPACK_IMPORTED_MODULE_21__observer__[\"a\" /* isPartialObserver */])(args[currArg])) {\n            options = args[currArg];\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"k\" /* validateOptionNames */])('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"i\" /* validateNamedOptionalType */])('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (Object(__WEBPACK_IMPORTED_MODULE_21__observer__[\"a\" /* isPartialObserver */])(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"l\" /* validateOptionalArgType */])('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"l\" /* validateOptionalArgType */])('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new __WEBPACK_IMPORTED_MODULE_13__util_async_observer__[\"a\" /* AsyncObserver */]({\n            next: function (snapshot) {\n                if (observer.next) {\n                    Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(__WEBPACK_IMPORTED_MODULE_3__core_query__[\"f\" /* Query */].atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\n\nvar DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('DocumentSnapshot.data', arguments, 0);\n        if (!this._document) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.data().');\n        }\n        return this.convertObject(this._document.data);\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('DocumentSnapshot.get', arguments, 1);\n        if (!this._document) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.get().');\n        }\n        var value = this._document.data.field(Object(__WEBPACK_IMPORTED_MODULE_22__user_data_converter__[\"c\" /* fieldPathFromArgument */])('DocumentSnapshot.get', fieldPath));\n        return value === undefined ? undefined : this.convertValue(value);\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return {\n                hasPendingWrites: this._document !== null && this._document.hasLocalMutations,\n                fromCache: this._fromCache\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.convertObject = function (data) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value) {\n        if (value instanceof __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"h\" /* ObjectValue */]) {\n            return this.convertObject(value);\n        }\n        else if (value instanceof __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"a\" /* ArrayValue */]) {\n            return this.convertArray(value);\n        }\n        else if (value instanceof __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"i\" /* RefValue */]) {\n            var key = value.value();\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.equals(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                __WEBPACK_IMPORTED_MODULE_17__util_log__[\"c\" /* error */](\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value();\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value);\n        });\n    };\n    return DocumentSnapshot;\n}());\n\nvar Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Query.where', arguments, 3);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Query.where', 'string', 2, opStr);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"f\" /* validateDefined */])('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = Object(__WEBPACK_IMPORTED_MODULE_22__user_data_converter__[\"c\" /* fieldPathFromArgument */])('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new __WEBPACK_IMPORTED_MODULE_9__model_path__[\"b\" /* ResourcePath */]([value]));\n                Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"i\" /* RefValue */](this.firestore._databaseId, new __WEBPACK_IMPORTED_MODULE_6__model_document_key__[\"a\" /* DocumentKey */](path));\n            }\n            else if (value instanceof DocumentReference) {\n                var ref = value;\n                fieldValue = new __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"i\" /* RefValue */](this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"m\" /* valueDescription */])(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = Object(__WEBPACK_IMPORTED_MODULE_3__core_query__[\"i\" /* fieldFilter */])(fieldPath, __WEBPACK_IMPORTED_MODULE_3__core_query__[\"h\" /* RelationOp */].fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('Query.orderBy', arguments, 1, 2);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"l\" /* validateOptionalArgType */])('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = __WEBPACK_IMPORTED_MODULE_3__core_query__[\"b\" /* Direction */].ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = __WEBPACK_IMPORTED_MODULE_3__core_query__[\"b\" /* Direction */].DESCENDING;\n        }\n        else {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = Object(__WEBPACK_IMPORTED_MODULE_22__user_data_converter__[\"c\" /* fieldPathFromArgument */])('Query.orderBy', field);\n        var orderBy = new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"e\" /* OrderBy */](fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Query.limit', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"d\" /* validateAtLeastNumberOfArgs */])('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"a\" /* invalidClassError */])('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.equals(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"f\" /* validateDefined */])(methodName, 1, docOrField);\n        if (docOrField instanceof DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"i\" /* RefValue */](this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"a\" /* Bound */](components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new __WEBPACK_IMPORTED_MODULE_6__model_document_key__[\"a\" /* DocumentKey */](this._query.path.child(rawValue));\n                components.push(new __WEBPACK_IMPORTED_MODULE_7__model_field_value__[\"i\" /* RefValue */](this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new __WEBPACK_IMPORTED_MODULE_3__core_query__[\"a\" /* Bound */](components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !Object(__WEBPACK_IMPORTED_MODULE_21__observer__[\"a\" /* isPartialObserver */])(args[currArg])) {\n            options = args[currArg];\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"k\" /* validateOptionNames */])('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"i\" /* validateNamedOptionalType */])('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"i\" /* validateNamedOptionalType */])('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (Object(__WEBPACK_IMPORTED_MODULE_21__observer__[\"a\" /* isPartialObserver */])(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('Query.onSnapshot', 'function', currArg, args[currArg]);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"l\" /* validateOptionalArgType */])('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"l\" /* validateOptionalArgType */])('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new __WEBPACK_IMPORTED_MODULE_13__util_async_observer__[\"a\" /* AsyncObserver */]({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof __WEBPACK_IMPORTED_MODULE_3__core_query__[\"g\" /* RelationFilter */] && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.equals(filter.field)) {\n                throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.equals(inequality)) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\n\nvar QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = {\n            fromCache: _snapshot.fromCache,\n            hasPendingWrites: _snapshot.hasPendingWrites\n        };\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('QuerySnapshot.forEach', arguments, 1, 2);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new DocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\n\nvar CollectionReference = /** @class */ (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, __WEBPACK_IMPORTED_MODULE_3__core_query__[\"f\" /* Query */].atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new DocumentReference(new __WEBPACK_IMPORTED_MODULE_6__model_document_key__[\"a\" /* DocumentKey */](parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"e\" /* validateBetweenNumberOfArgs */])('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = __WEBPACK_IMPORTED_MODULE_18__util_misc__[\"a\" /* AutoId */].newId();\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = __WEBPACK_IMPORTED_MODULE_9__model_path__[\"b\" /* ResourcePath */].fromString(pathString);\n        return DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"g\" /* validateExactNumberOfArgs */])('CollectionReference.add', arguments, 1);\n        Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"c\" /* validateArgType */])('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(Query));\n\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"k\" /* validateOptionNames */])(methodName, options, ['merge']);\n    Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"i\" /* validateNamedOptionalType */])(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof DocumentReference)) {\n        throw Object(__WEBPACK_IMPORTED_MODULE_16__util_input_validation__[\"a\" /* invalidClassError */])(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new __WEBPACK_IMPORTED_MODULE_15__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_15__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nfunction changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(change.type === __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Added, 'Invalid event type for first snapshot');\n            Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"a\" /* assert */])(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Added:\n            return 'added';\n        case __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Modified:\n        case __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Metadata:\n            return 'modified';\n        case __WEBPACK_IMPORTED_MODULE_4__core_view_snapshot__[\"a\" /* ChangeType */].Removed:\n            return 'removed';\n        default:\n            return Object(__WEBPACK_IMPORTED_MODULE_12__util_assert__[\"b\" /* fail */])('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nvar PublicFirestore = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(Firestore, 'Use firebase.firestore() instead.');\nvar PublicTransaction = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(Transaction, 'Use firebase.firestore().runTransaction() instead.');\nvar PublicWriteBatch = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(WriteBatch, 'Use firebase.firestore().batch() instead.');\nvar PublicDocumentReference = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(DocumentReference, 'Use firebase.firestore().doc() instead.');\nvar PublicDocumentSnapshot = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(DocumentSnapshot);\nvar PublicQuery = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(Query);\nvar PublicQuerySnapshot = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(QuerySnapshot);\nvar PublicCollectionReference = Object(__WEBPACK_IMPORTED_MODULE_11__util_api__[\"a\" /* makeConstructorPrivate */])(CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FirestoreClient; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__event_manager__ = __webpack_require__(126);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sync_engine__ = __webpack_require__(127);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__local_eager_garbage_collector__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__local_indexeddb_persistence__ = __webpack_require__(130);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__local_local_store__ = __webpack_require__(135);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__local_memory_persistence__ = __webpack_require__(138);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__local_no_op_garbage_collector__ = __webpack_require__(142);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__remote_datastore__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__remote_remote_store__ = __webpack_require__(146);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__remote_serializer__ = __webpack_require__(109);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__util_promise__ = __webpack_require__(108);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n         * Asynchronous queue responsible for all of our internal processing. When\n         * we get incoming work from the user (via public API) or the network\n         * (incoming GRPC messages), we should always schedule onto this queue.\n         * This ensures all of our work is properly serialized (e.g. we don't\n         * start processing a new operation while the previous one is waiting for\n         * an async I/O to complete).\n         */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new __WEBPACK_IMPORTED_MODULE_12__util_promise__[\"a\" /* Deferred */]();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new __WEBPACK_IMPORTED_MODULE_12__util_promise__[\"a\" /* Deferred */]();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === __WEBPACK_IMPORTED_MODULE_10__util_error__[\"a\" /* Code */].FAILED_PRECONDITION ||\n            error.code === __WEBPACK_IMPORTED_MODULE_10__util_error__[\"a\" /* Code */].UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new __WEBPACK_IMPORTED_MODULE_6__local_no_op_garbage_collector__[\"a\" /* NoOpGarbageCollector */]();\n        var storagePrefix = __WEBPACK_IMPORTED_MODULE_3__local_indexeddb_persistence__[\"a\" /* IndexedDbPersistence */].buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new __WEBPACK_IMPORTED_MODULE_9__remote_serializer__[\"a\" /* JsonProtoSerializer */](this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new __WEBPACK_IMPORTED_MODULE_3__local_indexeddb_persistence__[\"a\" /* IndexedDbPersistence */](storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new __WEBPACK_IMPORTED_MODULE_2__local_eager_garbage_collector__[\"a\" /* EagerGarbageCollector */]();\n        this.persistence = new __WEBPACK_IMPORTED_MODULE_5__local_memory_persistence__[\"a\" /* MemoryPersistence */]();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new __WEBPACK_IMPORTED_MODULE_4__local_local_store__[\"a\" /* LocalStore */](_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new __WEBPACK_IMPORTED_MODULE_7__remote_datastore__[\"a\" /* Datastore */](_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.eventMgr.onOnlineStateChanged(onlineState);\n            };\n            _this.remoteStore = new __WEBPACK_IMPORTED_MODULE_8__remote_remote_store__[\"a\" /* RemoteStore */](_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new __WEBPACK_IMPORTED_MODULE_1__sync_engine__[\"a\" /* SyncEngine */](_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new __WEBPACK_IMPORTED_MODULE_0__event_manager__[\"a\" /* EventManager */](_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        Object(__WEBPACK_IMPORTED_MODULE_11__util_log__[\"b\" /* debug */])(LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new __WEBPACK_IMPORTED_MODULE_0__event_manager__[\"b\" /* QueryListener */](query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new __WEBPACK_IMPORTED_MODULE_12__util_promise__[\"a\" /* Deferred */]();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\n\n\n//# sourceMappingURL=firestore_client.js.map\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EventManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return QueryListener; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__types__ = __webpack_require__(112);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__view_snapshot__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_document_set__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_obj_map__ = __webpack_require__(106);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new __WEBPACK_IMPORTED_MODULE_4__util_obj_map__[\"a\" /* ObjectMap */](function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = __WEBPACK_IMPORTED_MODULE_0__types__[\"a\" /* OnlineState */].Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.onOnlineStateChanged(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onOnlineStateChanged(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = __WEBPACK_IMPORTED_MODULE_0__types__[\"a\" /* OnlineState */].Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== __WEBPACK_IMPORTED_MODULE_1__view_snapshot__[\"a\" /* ChangeType */].Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = {\n                query: snap.query,\n                docs: snap.docs,\n                oldDocs: snap.oldDocs,\n                docChanges: docChanges,\n                fromCache: snap.fromCache,\n                hasPendingWrites: snap.hasPendingWrites,\n                syncStateChanged: snap.syncStateChanged\n            };\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== __WEBPACK_IMPORTED_MODULE_0__types__[\"a\" /* OnlineState */].Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === __WEBPACK_IMPORTED_MODULE_0__types__[\"a\" /* OnlineState */].Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = {\n            query: snap.query,\n            docs: snap.docs,\n            oldDocs: __WEBPACK_IMPORTED_MODULE_2__model_document_set__[\"a\" /* DocumentSet */].emptySet(snap.docs),\n            docChanges: QueryListener.getInitialViewChanges(snap),\n            fromCache: snap.fromCache,\n            hasPendingWrites: snap.hasPendingWrites,\n            syncStateChanged: true\n        };\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: __WEBPACK_IMPORTED_MODULE_1__view_snapshot__[\"a\" /* ChangeType */].Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\n\n\n//# sourceMappingURL=event_manager.js.map\n\n\n/***/ }),\n/* 127 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SyncEngine; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__local_eager_garbage_collector__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__local_local_view_changes__ = __webpack_require__(128);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__local_query_data__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__local_reference_set__ = __webpack_require__(97);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__remote_remote_event__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__util_obj_map__ = __webpack_require__(106);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__util_sorted_map__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__util_types__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__query__ = __webpack_require__(103);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__target_id_generator__ = __webpack_require__(115);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__view__ = __webpack_require__(129);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new __WEBPACK_IMPORTED_MODULE_11__util_obj_map__[\"a\" /* ObjectMap */](function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new __WEBPACK_IMPORTED_MODULE_12__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_5__model_document_key__[\"a\" /* DocumentKey */].comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new __WEBPACK_IMPORTED_MODULE_3__local_reference_set__[\"b\" /* ReferenceSet */]();\n        this.limboCollector = new __WEBPACK_IMPORTED_MODULE_0__local_eager_garbage_collector__[\"a\" /* EagerGarbageCollector */]();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = __WEBPACK_IMPORTED_MODULE_16__target_id_generator__[\"a\" /* TargetIdGenerator */].forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new __WEBPACK_IMPORTED_MODULE_17__view__[\"c\" /* View */](query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (Object(__WEBPACK_IMPORTED_MODULE_13__util_types__[\"a\" /* isNullOrUndefined */])(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        __WEBPACK_IMPORTED_MODULE_10__util_obj__[\"d\" /* forEachNumber */](remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    __WEBPACK_IMPORTED_MODULE_6__remote_remote_event__[\"a\" /* CurrentStatusUpdate */].MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new __WEBPACK_IMPORTED_MODULE_4__model_document__[\"b\" /* NoDocument */](limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new __WEBPACK_IMPORTED_MODULE_12__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_5__model_document_key__[\"a\" /* DocumentKey */].comparator);\n            docMap = docMap.insert(limboKey, new __WEBPACK_IMPORTED_MODULE_4__model_document__[\"b\" /* NoDocument */](limboKey, __WEBPACK_IMPORTED_MODULE_15__snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc()));\n            var event_1 = new __WEBPACK_IMPORTED_MODULE_6__remote_remote_event__[\"b\" /* RemoteEvent */](__WEBPACK_IMPORTED_MODULE_15__snapshot_version__[\"a\" /* SnapshotVersion */].MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new __WEBPACK_IMPORTED_MODULE_12__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_9__util_misc__[\"f\" /* primitiveComparator */]);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof __WEBPACK_IMPORTED_MODULE_17__view__[\"a\" /* AddedLimboDocument */]) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof __WEBPACK_IMPORTED_MODULE_17__view__[\"b\" /* RemovedLimboDocument */]) {\n                __WEBPACK_IMPORTED_MODULE_8__util_log__[\"b\" /* debug */](LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"b\" /* fail */])('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            __WEBPACK_IMPORTED_MODULE_8__util_log__[\"b\" /* debug */](LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = __WEBPACK_IMPORTED_MODULE_14__query__[\"f\" /* Query */].atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new __WEBPACK_IMPORTED_MODULE_2__local_query_data__[\"a\" /* QueryData */](query, limboTargetId, __WEBPACK_IMPORTED_MODULE_2__local_query_data__[\"b\" /* QueryPurpose */].Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = __WEBPACK_IMPORTED_MODULE_1__local_local_view_changes__[\"a\" /* LocalViewChanges */].fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_assert__[\"a\" /* assert */])(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\n\n\n//# sourceMappingURL=sync_engine.js.map\n\n\n/***/ }),\n/* 128 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LocalViewChanges; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_view_snapshot__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_collections__ = __webpack_require__(75);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"a\" /* documentKeySet */])();\n        var removedKeys = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"a\" /* documentKeySet */])();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case __WEBPACK_IMPORTED_MODULE_0__core_view_snapshot__[\"a\" /* ChangeType */].Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case __WEBPACK_IMPORTED_MODULE_0__core_view_snapshot__[\"a\" /* ChangeType */].Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\n\n\n//# sourceMappingURL=local_view_changes.js.map\n\n\n/***/ }),\n/* 129 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AddedLimboDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return RemovedLimboDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return View; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_document_set__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__remote_remote_event__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__view_snapshot__ = __webpack_require__(96);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\n\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n        this.documentSet = new __WEBPACK_IMPORTED_MODULE_2__model_document_set__[\"a\" /* DocumentSet */](query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"b\" /* DocumentChangeSet */]();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof __WEBPACK_IMPORTED_MODULE_1__model_document__[\"a\" /* Document */] ? newMaybeDoc : null;\n            if (newDoc) {\n                Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(key.equals(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.equals(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Removed, doc: oldDoc });\n            }\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"c\" /* SyncState */].Synced : __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"c\" /* SyncState */].Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            return {\n                snapshot: {\n                    query: this.query,\n                    docs: docChanges.documentSet,\n                    oldDocs: oldDocs,\n                    docChanges: changes,\n                    fromCache: newSyncState === __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"c\" /* SyncState */].Local,\n                    syncStateChanged: syncStateChanged,\n                    hasPendingWrites: !docChanges.mutatedKeys.isEmpty()\n                },\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof __WEBPACK_IMPORTED_MODULE_3__remote_remote_event__[\"c\" /* ResetMapping */]) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof __WEBPACK_IMPORTED_MODULE_3__remote_remote_event__[\"d\" /* UpdateMapping */]) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case __WEBPACK_IMPORTED_MODULE_3__remote_remote_event__[\"a\" /* CurrentStatusUpdate */].MarkCurrent:\n                    this.current = true;\n                    break;\n                case __WEBPACK_IMPORTED_MODULE_3__remote_remote_event__[\"a\" /* CurrentStatusUpdate */].MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case __WEBPACK_IMPORTED_MODULE_3__remote_remote_event__[\"a\" /* CurrentStatusUpdate */].None:\n                    break;\n                default:\n                    Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\n\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Added:\n                return 1;\n            case __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Modified:\n                return 2;\n            case __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case __WEBPACK_IMPORTED_MODULE_5__view_snapshot__[\"a\" /* ChangeType */].Removed:\n                return 0;\n            default:\n                return Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n\n/***/ }),\n/* 130 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return IndexedDbPersistence; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__indexeddb_mutation_queue__ = __webpack_require__(131);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__indexeddb_query_cache__ = __webpack_require__(132);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__indexeddb_remote_document_cache__ = __webpack_require__(133);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__local_serializer__ = __webpack_require__(134);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__persistence_promise__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__simple_db__ = __webpack_require__(98);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nvar LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new __WEBPACK_IMPORTED_MODULE_8__local_serializer__[\"a\" /* LocalSerializer */](serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return __WEBPACK_IMPORTED_MODULE_10__simple_db__[\"a\" /* SimpleDb */].openOrCreate(this.dbName, __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"l\" /* SCHEMA_VERSION */], __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"m\" /* createOrUpgradeDb */])\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return __WEBPACK_IMPORTED_MODULE_4__indexeddb_mutation_queue__[\"a\" /* IndexedDbMutationQueue */].forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new __WEBPACK_IMPORTED_MODULE_5__indexeddb_query_cache__[\"a\" /* IndexedDbQueryCache */](this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new __WEBPACK_IMPORTED_MODULE_6__indexeddb_remote_document_cache__[\"a\" /* IndexedDbRemoteDocumentCache */](this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        __WEBPACK_IMPORTED_MODULE_2__util_log__[\"b\" /* debug */](LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"a\" /* ALL_STORES */], function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return __WEBPACK_IMPORTED_MODULE_10__simple_db__[\"a\" /* SimpleDb */].isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */].store], function (txn) {\n            var store = txn.store(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */].store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */](_this.ownerId, Date.now());\n                    __WEBPACK_IMPORTED_MODULE_2__util_log__[\"b\" /* debug */](LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    __WEBPACK_IMPORTED_MODULE_2__util_log__[\"b\" /* debug */](LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return __WEBPACK_IMPORTED_MODULE_9__persistence_promise__[\"a\" /* PersistencePromise */].reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */].store], function (txn) {\n            var store = txn.store(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */].store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    __WEBPACK_IMPORTED_MODULE_2__util_log__[\"b\" /* debug */](LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return __WEBPACK_IMPORTED_MODULE_9__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */].store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return __WEBPACK_IMPORTED_MODULE_9__persistence_promise__[\"a\" /* PersistencePromise */].reject(_this.persistenceError);\n            }\n            else {\n                return __WEBPACK_IMPORTED_MODULE_9__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */]('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */].store);\n                return store.put('owner', new __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"f\" /* DbOwner */](_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */](reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            __WEBPACK_IMPORTED_MODULE_2__util_log__[\"b\" /* debug */](LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */]('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */]('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return __WEBPACK_IMPORTED_MODULE_3__util_misc__[\"a\" /* AutoId */].newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\n\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n\n/***/ }),\n/* 131 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return IndexedDbMutationQueue; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_sorted_set__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__encoded_resource_path__ = __webpack_require__(107);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__persistence_promise__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__simple_db__ = __webpack_require__(98);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n         * The normalized userId (e.g. null UID => \"\" userId) used to store /\n         * retrieve mutations.\n         */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"d\" /* DbMutationQueue */](_this.userId, __WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */], \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = __WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = __WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = Object(__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"d\" /* immediatePredecessor */])(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new __WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__[\"b\" /* MutationBatch */](batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = __WEBPACK_IMPORTED_MODULE_4__encoded_resource_path__[\"b\" /* encode */](mutation.key.path);\n                var indexKey = __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].PLACEHOLDER);\n            }\n            return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(__WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */]), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(__WEBPACK_IMPORTED_MODULE_0__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */]), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = __WEBPACK_IMPORTED_MODULE_4__encoded_resource_path__[\"a\" /* decode */](encodedPath);\n            if (userID !== _this.userId || !documentKey.path.equals(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new __WEBPACK_IMPORTED_MODULE_3__util_sorted_set__[\"a\" /* SortedSet */](__WEBPACK_IMPORTED_MODULE_2__util_misc__[\"f\" /* primitiveComparator */]);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = __WEBPACK_IMPORTED_MODULE_4__encoded_resource_path__[\"a\" /* decode */](encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(__WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = __WEBPACK_IMPORTED_MODULE_4__encoded_resource_path__[\"a\" /* decode */](key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\n\nfunction validateStreamToken(token) {\n    Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"c\" /* DbMutationBatch */].store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"b\" /* DbDocumentMutation */].store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, __WEBPACK_IMPORTED_MODULE_5__indexeddb_schema__[\"d\" /* DbMutationQueue */].store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof __WEBPACK_IMPORTED_MODULE_7__simple_db__[\"b\" /* SimpleDbTransaction */]) {\n        return txn.store(store);\n    }\n    else {\n        return Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n\n/***/ }),\n/* 132 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return IndexedDbQueryCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_timestamp__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__ = __webpack_require__(107);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__persistence_promise__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__simple_db__ = __webpack_require__(98);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\nvar IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"j\" /* DbTargetGlobal */](\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"j\" /* DbTargetGlobal */].key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].fromTimestamp(new __WEBPACK_IMPORTED_MODULE_1__core_timestamp__[\"a\" /* Timestamp */](lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return __WEBPACK_IMPORTED_MODULE_8__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"j\" /* DbTargetGlobal */].key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(__WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"j\" /* DbTargetGlobal */].key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"h\" /* DbTarget */].queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.equals(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = __WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__[\"b\" /* encode */](key.path);\n            promises.push(store.put(new __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"i\" /* DbTargetDocument */](targetId, path)));\n        });\n        return __WEBPACK_IMPORTED_MODULE_8__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = __WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__[\"b\" /* encode */](key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return __WEBPACK_IMPORTED_MODULE_8__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = __WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__[\"a\" /* decode */](key[1]);\n                var docKey = new __WEBPACK_IMPORTED_MODULE_3__model_document_key__[\"a\" /* DocumentKey */](path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return __WEBPACK_IMPORTED_MODULE_8__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = Object(__WEBPACK_IMPORTED_MODULE_2__model_collections__[\"a\" /* documentKeySet */])();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = __WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__[\"a\" /* decode */](key[1]);\n            var docKey = new __WEBPACK_IMPORTED_MODULE_3__model_document_key__[\"a\" /* DocumentKey */](path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = __WEBPACK_IMPORTED_MODULE_6__encoded_resource_path__[\"b\" /* encode */](key.path);\n        var range = IDBKeyRange.bound([path], [Object(__WEBPACK_IMPORTED_MODULE_5__util_misc__[\"e\" /* immediateSuccessor */])(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"i\" /* DbTargetDocument */].documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return getStore(txn, __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"h\" /* DbTarget */].store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return getStore(txn, __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"j\" /* DbTargetGlobal */].store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return getStore(txn, __WEBPACK_IMPORTED_MODULE_7__indexeddb_schema__[\"i\" /* DbTargetDocument */].store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof __WEBPACK_IMPORTED_MODULE_9__simple_db__[\"b\" /* SimpleDbTransaction */]) {\n        return txn.store(store);\n    }\n    else {\n        return Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n\n/***/ }),\n/* 133 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return IndexedDbRemoteDocumentCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__indexeddb_schema__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__simple_db__ = __webpack_require__(98);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"b\" /* documentMap */])();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_1__model_document__[\"a\" /* Document */] && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof __WEBPACK_IMPORTED_MODULE_4__simple_db__[\"b\" /* SimpleDbTransaction */]) {\n        return txn.store(__WEBPACK_IMPORTED_MODULE_3__indexeddb_schema__[\"g\" /* DbRemoteDocument */].store);\n    }\n    else {\n        return Object(__WEBPACK_IMPORTED_MODULE_2__util_assert__[\"b\" /* fail */])('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n\n/***/ }),\n/* 134 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LocalSerializer; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_timestamp__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_mutation_batch__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__query_data__ = __webpack_require__(91);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** Serializer for values stored in the LocalStore. */\nvar LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = __WEBPACK_IMPORTED_MODULE_3__model_document_key__[\"a\" /* DocumentKey */].fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new __WEBPACK_IMPORTED_MODULE_1__core_timestamp__[\"a\" /* Timestamp */](readTime.seconds, readTime.nanos);\n            return new __WEBPACK_IMPORTED_MODULE_2__model_document__[\"b\" /* NoDocument */](key, __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].fromTimestamp(timestamp));\n        }\n        else {\n            return Object(__WEBPACK_IMPORTED_MODULE_5__util_assert__[\"b\" /* fail */])('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_2__model_document__[\"a\" /* Document */]) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"g\" /* DbRemoteDocument */](null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"k\" /* DbTimestamp */](timestamp.seconds, timestamp.nanos);\n            return new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"g\" /* DbRemoteDocument */](new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"e\" /* DbNoDocument */](path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"c\" /* DbMutationBatch */](userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = __WEBPACK_IMPORTED_MODULE_1__core_timestamp__[\"a\" /* Timestamp */].fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new __WEBPACK_IMPORTED_MODULE_4__model_mutation_batch__[\"b\" /* MutationBatch */](dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new __WEBPACK_IMPORTED_MODULE_1__core_timestamp__[\"a\" /* Timestamp */](dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new __WEBPACK_IMPORTED_MODULE_7__query_data__[\"a\" /* QueryData */](query, dbTarget.targetId, __WEBPACK_IMPORTED_MODULE_7__query_data__[\"b\" /* QueryPurpose */].Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        Object(__WEBPACK_IMPORTED_MODULE_5__util_assert__[\"a\" /* assert */])(__WEBPACK_IMPORTED_MODULE_7__query_data__[\"b\" /* QueryPurpose */].Listen === queryData.purpose, 'Only queries with purpose ' +\n            __WEBPACK_IMPORTED_MODULE_7__query_data__[\"b\" /* QueryPurpose */].Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"k\" /* DbTimestamp */](timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_5__util_assert__[\"a\" /* assert */])(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new __WEBPACK_IMPORTED_MODULE_6__indexeddb_schema__[\"h\" /* DbTarget */](queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n\n/***/ }),\n/* 135 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LocalStore; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_target_id_generator__ = __webpack_require__(115);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_timestamp__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_mutation_batch__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__remote_remote_event__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__local_documents_view__ = __webpack_require__(136);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__persistence_promise__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__query_data__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__reference_set__ = __webpack_require__(97);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__remote_document_change_buffer__ = __webpack_require__(137);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n         * The garbage collector collects documents that should no longer be\n         * cached (e.g. if they are no longer retained by the above reference sets\n         * and the garbage collector is performing eager collection).\n         */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new __WEBPACK_IMPORTED_MODULE_12__reference_set__[\"b\" /* ReferenceSet */]();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = __WEBPACK_IMPORTED_MODULE_1__core_target_id_generator__[\"a\" /* TargetIdGenerator */].forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new __WEBPACK_IMPORTED_MODULE_9__local_documents_view__[\"a\" /* LocalDocumentsView */](this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new __WEBPACK_IMPORTED_MODULE_9__local_documents_view__[\"a\" /* LocalDocumentsView */](_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = Object(__WEBPACK_IMPORTED_MODULE_3__model_collections__[\"a\" /* documentKeySet */])();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = __WEBPACK_IMPORTED_MODULE_1__core_target_id_generator__[\"a\" /* TargetIdGenerator */].forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== __WEBPACK_IMPORTED_MODULE_4__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */]) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = __WEBPACK_IMPORTED_MODULE_2__core_timestamp__[\"a\" /* Timestamp */].now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = Object(__WEBPACK_IMPORTED_MODULE_3__model_collections__[\"a\" /* documentKeySet */])();\n                    return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n                }\n                else {\n                    var documentBuffer_1 = new __WEBPACK_IMPORTED_MODULE_13__remote_document_change_buffer__[\"a\" /* RemoteDocumentChangeBuffer */](_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new __WEBPACK_IMPORTED_MODULE_13__remote_document_change_buffer__[\"a\" /* RemoteDocumentChangeBuffer */](this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            __WEBPACK_IMPORTED_MODULE_8__util_obj__[\"d\" /* forEachNumber */](remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof __WEBPACK_IMPORTED_MODULE_5__remote_remote_event__[\"c\" /* ResetMapping */]) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof __WEBPACK_IMPORTED_MODULE_5__remote_remote_event__[\"d\" /* UpdateMapping */]) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"b\" /* fail */])('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = Object(__WEBPACK_IMPORTED_MODULE_3__model_collections__[\"a\" /* documentKeySet */])();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.equals(__WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        __WEBPACK_IMPORTED_MODULE_7__util_log__[\"b\" /* debug */](LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.equals(__WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN)) {\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = __WEBPACK_IMPORTED_MODULE_4__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new __WEBPACK_IMPORTED_MODULE_11__query_data__[\"a\" /* QueryData */](query, targetId, __WEBPACK_IMPORTED_MODULE_11__query_data__[\"b\" /* QueryPurpose */].Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (__WEBPACK_IMPORTED_MODULE_8__util_obj__[\"e\" /* isEmpty */](_this.targetIds)) {\n                    var documentBuffer_2 = new __WEBPACK_IMPORTED_MODULE_13__remote_document_change_buffer__[\"a\" /* RemoteDocumentChangeBuffer */](_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve(Object(__WEBPACK_IMPORTED_MODULE_3__model_collections__[\"a\" /* documentKeySet */])());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            __WEBPACK_IMPORTED_MODULE_8__util_obj__[\"e\" /* isEmpty */](this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = Object(__WEBPACK_IMPORTED_MODULE_3__model_collections__[\"a\" /* documentKeySet */])();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = __WEBPACK_IMPORTED_MODULE_10__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        Object(__WEBPACK_IMPORTED_MODULE_6__util_assert__[\"a\" /* assert */])(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\n\n\n//# sourceMappingURL=local_store.js.map\n\n\n/***/ }),\n/* 136 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LocalDocumentsView; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"d\" /* maybeDocumentMap */])();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new __WEBPACK_IMPORTED_MODULE_2__model_document__[\"b\" /* NoDocument */](key, __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return __WEBPACK_IMPORTED_MODULE_5__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (__WEBPACK_IMPORTED_MODULE_3__model_document_key__[\"a\" /* DocumentKey */].isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new __WEBPACK_IMPORTED_MODULE_3__model_document_key__[\"a\" /* DocumentKey */](docPath)).next(function (maybeDoc) {\n            var result = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"b\" /* documentMap */])();\n            if (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_2__model_document__[\"a\" /* Document */]) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"a\" /* documentKeySet */])();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof __WEBPACK_IMPORTED_MODULE_2__model_document__[\"a\" /* Document */]) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return __WEBPACK_IMPORTED_MODULE_5__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof __WEBPACK_IMPORTED_MODULE_2__model_document__[\"a\" /* Document */]) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof __WEBPACK_IMPORTED_MODULE_2__model_document__[\"b\" /* NoDocument */]) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return __WEBPACK_IMPORTED_MODULE_5__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\n\n\n//# sourceMappingURL=local_documents_view.js.map\n\n\n/***/ }),\n/* 137 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RemoteDocumentChangeBuffer; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"d\" /* maybeDocumentMap */])();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\n\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n\n/***/ }),\n/* 138 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MemoryPersistence; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__memory_mutation_queue__ = __webpack_require__(139);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__memory_query_cache__ = __webpack_require__(140);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__memory_remote_document_cache__ = __webpack_require__(141);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new __WEBPACK_IMPORTED_MODULE_4__memory_remote_document_cache__[\"a\" /* MemoryRemoteDocumentCache */]();\n        this.queryCache = new __WEBPACK_IMPORTED_MODULE_3__memory_query_cache__[\"a\" /* MemoryQueryCache */]();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new __WEBPACK_IMPORTED_MODULE_2__memory_mutation_queue__[\"a\" /* MemoryMutationQueue */]();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_log__[\"b\" /* debug */])(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n\n/***/ }),\n/* 139 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MemoryMutationQueue; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_mutation_batch__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__platform_platform__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_sorted_set__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__persistence_promise__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__reference_set__ = __webpack_require__(97);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nvar MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = __WEBPACK_IMPORTED_MODULE_1__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = Object(__WEBPACK_IMPORTED_MODULE_2__platform_platform__[\"b\" /* emptyByteString */])();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new __WEBPACK_IMPORTED_MODULE_5__util_sorted_set__[\"a\" /* SortedSet */](__WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */].compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = __WEBPACK_IMPORTED_MODULE_1__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new __WEBPACK_IMPORTED_MODULE_1__model_mutation_batch__[\"b\" /* MutationBatch */](batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new __WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */](mutation.key, batchId));\n        }\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(batch);\n            }\n        }\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new __WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */](documentKey, 0);\n        var end = new __WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */](documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(documentKey.equals(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!__WEBPACK_IMPORTED_MODULE_0__model_document_key__[\"a\" /* DocumentKey */].isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new __WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */](new __WEBPACK_IMPORTED_MODULE_0__model_document_key__[\"a\" /* DocumentKey */](startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new __WEBPACK_IMPORTED_MODULE_5__util_sorted_set__[\"a\" /* SortedSet */](__WEBPACK_IMPORTED_MODULE_4__util_misc__[\"f\" /* primitiveComparator */]);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new __WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */](key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new __WEBPACK_IMPORTED_MODULE_7__reference_set__[\"a\" /* DocReference */](key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve(key.equals(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return __WEBPACK_IMPORTED_MODULE_6__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        Object(__WEBPACK_IMPORTED_MODULE_3__util_assert__[\"a\" /* assert */])(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\n\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n\n/***/ }),\n/* 140 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MemoryQueryCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_obj_map__ = __webpack_require__(106);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__persistence_promise__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__reference_set__ = __webpack_require__(97);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new __WEBPACK_IMPORTED_MODULE_1__util_obj_map__[\"a\" /* ObjectMap */](function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new __WEBPACK_IMPORTED_MODULE_3__reference_set__[\"b\" /* ReferenceSet */]();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return __WEBPACK_IMPORTED_MODULE_2__persistence_promise__[\"a\" /* PersistencePromise */].resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\n\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n\n/***/ }),\n/* 141 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MemoryRemoteDocumentCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"d\" /* maybeDocumentMap */])();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return __WEBPACK_IMPORTED_MODULE_3__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return __WEBPACK_IMPORTED_MODULE_3__persistence_promise__[\"a\" /* PersistencePromise */].resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return __WEBPACK_IMPORTED_MODULE_3__persistence_promise__[\"a\" /* PersistencePromise */].resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"b\" /* documentMap */])();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new __WEBPACK_IMPORTED_MODULE_2__model_document_key__[\"a\" /* DocumentKey */](query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof __WEBPACK_IMPORTED_MODULE_1__model_document__[\"a\" /* Document */] && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return __WEBPACK_IMPORTED_MODULE_3__persistence_promise__[\"a\" /* PersistencePromise */].resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\n\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n\n/***/ }),\n/* 142 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return NoOpGarbageCollector; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__persistence_promise__ = __webpack_require__(79);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return __WEBPACK_IMPORTED_MODULE_1__persistence_promise__[\"a\" /* PersistencePromise */].resolve(Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"a\" /* documentKeySet */])());\n    };\n    return NoOpGarbageCollector;\n}());\n\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n\n/***/ }),\n/* 143 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Datastore; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__persistent_stream__ = __webpack_require__(144);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new __WEBPACK_IMPORTED_MODULE_2__persistent_stream__[\"b\" /* PersistentWriteStream */](this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new __WEBPACK_IMPORTED_MODULE_2__persistent_stream__[\"a\" /* PersistentListenStream */](this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = Object(__WEBPACK_IMPORTED_MODULE_0__model_collections__[\"d\" /* maybeDocumentMap */])();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\n\n\n//# sourceMappingURL=datastore.js.map\n\n\n/***/ }),\n/* 144 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export PersistentStream */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PersistentListenStream; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return PersistentWriteStream; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__backoff__ = __webpack_require__(145);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_types__ = __webpack_require__(90);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.idle = false;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new __WEBPACK_IMPORTED_MODULE_3__backoff__[\"a\" /* ExponentialBackoff */](initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Initializes the idle timer. If no write takes place within one minute, the\n     * WebChannel stream will be closed.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        this.idle = true;\n        this.queue\n            .schedule(function () {\n            return _this.handleIdleCloseTimer();\n        }, IDLE_TIMEOUT_MS)\n            .catch(function (err) {\n            // When the AsyncQueue gets drained during testing, pending Promises\n            // (including these idle checks) will get rejected. We special-case\n            // these cancelled idle checks to make sure that these specific Promise\n            // rejections are not considered unhandled.\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(err.code === __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n        });\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        if (this.isOpen() && this.idle) {\n            // When timing out an idle stream there's no reason to force the stream into backoff when\n            // it restarts so set the stream state to Initial instead of Error.\n            return this.close(PersistentStreamState.Initial);\n        }\n        return Promise.resolve();\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        this.idle = false;\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(finalState == PersistentStreamState.Error || Object(__WEBPACK_IMPORTED_MODULE_4__util_types__[\"a\" /* isNullOrUndefined */])(error), \"Can't provide an error when not in an error state.\");\n        this.cancelIdleCheck();\n        if (finalState != PersistentStreamState.Error) {\n            // If this is an intentional close ensure we don't delay our next connection attempt.\n            this.backoff.reset();\n        }\n        else if (error && error.code === __WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].RESOURCE_EXHAUSTED) {\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n            __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */](error.toString());\n            __WEBPACK_IMPORTED_MODULE_2__util_log__[\"c\" /* error */]('Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        // Clean up the underlying stream because we are no longer interested in events.\n        if (this.stream !== null) {\n            this.tearDown();\n            this.stream.close();\n            this.stream = null;\n        }\n        // This state must be assigned before calling onClose() to allow the callback to\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\n        this.state = finalState;\n        var listener = this.listener;\n        // Clear the listener to avoid bleeding of events from the underlying streams.\n        this.listener = null;\n        // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n        // could trigger undesirable recovery logic, etc.).\n        if (finalState != PersistentStreamState.Stopped) {\n            return listener.onClose(error);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new __WEBPACK_IMPORTED_MODULE_1__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_1__util_error__[\"a\" /* Code */].UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the stream instance has not changed\n                if (_this.stream === stream) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start(listener);\n                Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.isStarted(), \"Can't handle server close on non-started stream\");\n        __WEBPACK_IMPORTED_MODULE_2__util_log__[\"b\" /* debug */](LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    __extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(PersistentStream));\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar PersistentWriteStream = /** @class */ (function (_super) {\n    __extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.isOpen(), 'Writing handshake requires an opened stream');\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.isOpen(), 'Writing mutations requires an opened stream');\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        Object(__WEBPACK_IMPORTED_MODULE_0__util_assert__[\"a\" /* assert */])(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(PersistentStream));\n\n\n//# sourceMappingURL=persistent_stream.js.map\n\n\n/***/ }),\n/* 145 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ExponentialBackoff; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_promise__ = __webpack_require__(108);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n         * The initial delay (used as the base delay on the first retry attempt).\n         * Note that jitter will still be applied, so the actual delay could be as\n         * little as 0.5*initialDelayMs.\n         */\n        initialDelayMs, \n        /**\n         * The multiplier to use to determine the extended base delay after each\n         * attempt.\n         */\n        backoffFactor, \n        /**\n         * The maximum base delay after which no further backoff is performed.\n         * Note that jitter will still be applied, so the actual delay could be as\n         * much as 1.5*maxDelayMs.\n         */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new __WEBPACK_IMPORTED_MODULE_1__util_promise__[\"a\" /* Deferred */]();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            __WEBPACK_IMPORTED_MODULE_0__util_log__[\"b\" /* debug */](LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\n\n\n//# sourceMappingURL=backoff.js.map\n\n\n/***/ }),\n/* 146 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RemoteStore; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_transaction__ = __webpack_require__(147);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_types__ = __webpack_require__(112);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__local_query_data__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_document_key__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_mutation_batch__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__platform_platform__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__remote_event__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__rpc_error__ = __webpack_require__(104);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__watch_change__ = __webpack_require__(111);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = __WEBPACK_IMPORTED_MODULE_6__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = __WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    RemoteStore.prototype.setOnlineStateToHealthy = function () {\n        this.shouldWarnOffline = false;\n        this.updateAndBroadcastOnlineState(__WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Healthy);\n    };\n    RemoteStore.prototype.setOnlineStateToUnknown = function () {\n        // The state is set to unknown when a healthy stream is closed (e.g. due to\n        // a token timeout) or when we have no active listens and therefore there's\n        // no need to start the stream. Assuming there is (possibly in the future)\n        // an active listen, then we will eventually move to state Online or Failed,\n        // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n        // attempts before failing, so we reset the count here.\n        this.watchStreamFailures = 0;\n        this.updateAndBroadcastOnlineState(__WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Unknown);\n    };\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        // The first failure after we are successfully connected moves us to the\n        // 'Unknown' state. We then may make multiple attempts (based on\n        // ONLINE_ATTEMPTS_BEFORE_FAILURE) before we actually report failure.\n        if (this.watchStreamOnlineState === __WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Healthy) {\n            this.setOnlineStateToUnknown();\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    __WEBPACK_IMPORTED_MODULE_10__util_log__[\"c\" /* error */]('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateAndBroadcastOnlineState(__WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.updateAndBroadcastOnlineState = function (onlineState) {\n        var didChange = this.watchStreamOnlineState !== onlineState;\n        this.watchStreamOnlineState = onlineState;\n        if (didChange) {\n            this.onlineStateHandler(onlineState);\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])((this.watchStream == null) == (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.watchStream == null, 'enableNetwork() called with non-null watchStream.');\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.writeStream == null, 'enableNetwork() called with non-null writeStream.');\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateAndBroadcastOnlineState(__WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.updateAndBroadcastOnlineState(__WEBPACK_IMPORTED_MODULE_2__core_types__[\"a\" /* OnlineState */].Failed);\n        // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n        // event).\n        this.watchStream.stop();\n        this.writeStream.stop();\n        this.cleanUpWatchStreamState();\n        this.cleanUpWriteStreamState();\n        this.writeStream = null;\n        this.watchStream = null;\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.shutdown = function () {\n        __WEBPACK_IMPORTED_MODULE_10__util_log__[\"b\" /* debug */](LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetwork();\n        return Promise.resolve(undefined);\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(!__WEBPACK_IMPORTED_MODULE_11__util_obj__[\"a\" /* contains */](this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(__WEBPACK_IMPORTED_MODULE_11__util_obj__[\"a\" /* contains */](this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (__WEBPACK_IMPORTED_MODULE_11__util_obj__[\"e\" /* isEmpty */](this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !__WEBPACK_IMPORTED_MODULE_11__util_obj__[\"e\" /* isEmpty */](this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        __WEBPACK_IMPORTED_MODULE_11__util_obj__[\"d\" /* forEachNumber */](this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.setOnlineStateToUnknown();\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.setOnlineStateToHealthy();\n        if (watchChange instanceof __WEBPACK_IMPORTED_MODULE_14__watch_change__[\"d\" /* WatchTargetChange */] &&\n            watchChange.state === __WEBPACK_IMPORTED_MODULE_14__watch_change__[\"e\" /* WatchTargetChangeState */].Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.equals(__WEBPACK_IMPORTED_MODULE_0__core_snapshot_version__[\"a\" /* SnapshotVersion */].MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new __WEBPACK_IMPORTED_MODULE_14__watch_change__[\"c\" /* WatchChangeAggregator */](snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        __WEBPACK_IMPORTED_MODULE_11__util_obj__[\"d\" /* forEachNumber */](aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new __WEBPACK_IMPORTED_MODULE_5__model_document_key__[\"a\" /* DocumentKey */](query.path);\n                    var deletedDoc = new __WEBPACK_IMPORTED_MODULE_4__model_document__[\"b\" /* NoDocument */](key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof __WEBPACK_IMPORTED_MODULE_12__remote_event__[\"d\" /* UpdateMapping */]) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(mapping instanceof __WEBPACK_IMPORTED_MODULE_12__remote_event__[\"c\" /* ResetMapping */], 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new __WEBPACK_IMPORTED_MODULE_3__local_query_data__[\"a\" /* QueryData */](query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new __WEBPACK_IMPORTED_MODULE_3__local_query_data__[\"a\" /* QueryData */](query, targetId, __WEBPACK_IMPORTED_MODULE_3__local_query_data__[\"b\" /* QueryPurpose */].ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            __WEBPACK_IMPORTED_MODULE_11__util_obj__[\"d\" /* forEachNumber */](remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (__WEBPACK_IMPORTED_MODULE_11__util_obj__[\"a\" /* contains */](_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = __WEBPACK_IMPORTED_MODULE_6__model_mutation_batch__[\"a\" /* BATCHID_UNKNOWN */];\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    if (_this.pendingWrites.length == 0) {\n                        _this.writeStream.markIdle();\n                    }\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = __WEBPACK_IMPORTED_MODULE_6__model_mutation_batch__[\"c\" /* MutationBatchResult */].from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // If the write stream closed due to an error, invoke the error callbacks if\n        // there are pending writes.\n        if (error && this.pendingWrites.length > 0) {\n            Object(__WEBPACK_IMPORTED_MODULE_8__util_assert__[\"a\" /* assert */])(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (Object(__WEBPACK_IMPORTED_MODULE_13__rpc_error__[\"a\" /* isPermanentError */])(error.code) || error.code === __WEBPACK_IMPORTED_MODULE_9__util_error__[\"a\" /* Code */].ABORTED) {\n            __WEBPACK_IMPORTED_MODULE_10__util_log__[\"b\" /* debug */](LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = Object(__WEBPACK_IMPORTED_MODULE_7__platform_platform__[\"b\" /* emptyByteString */])();\n            return this.localStore.setLastStreamToken(Object(__WEBPACK_IMPORTED_MODULE_7__platform_platform__[\"b\" /* emptyByteString */])());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (Object(__WEBPACK_IMPORTED_MODULE_13__rpc_error__[\"a\" /* isPermanentError */])(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new __WEBPACK_IMPORTED_MODULE_1__core_transaction__[\"a\" /* Transaction */](this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        __WEBPACK_IMPORTED_MODULE_10__util_log__[\"b\" /* debug */](LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n        // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n        // (since mutations are per-user).\n        this.disableNetwork();\n        return this.enableNetwork();\n    };\n    return RemoteStore;\n}());\n\n\n//# sourceMappingURL=remote_store.js.map\n\n\n/***/ }),\n/* 147 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Transaction; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__snapshot_version__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_collections__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_document__ = __webpack_require__(80);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_mutation__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_error__ = __webpack_require__(74);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = Object(__WEBPACK_IMPORTED_MODULE_1__model_collections__[\"c\" /* documentVersionMap */])();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof __WEBPACK_IMPORTED_MODULE_2__model_document__[\"b\" /* NoDocument */]) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = __WEBPACK_IMPORTED_MODULE_0__snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.equals(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new __WEBPACK_IMPORTED_MODULE_4__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_4__util_error__[\"a\" /* Code */].ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new __WEBPACK_IMPORTED_MODULE_4__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_4__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return __WEBPACK_IMPORTED_MODULE_3__model_mutation__[\"f\" /* Precondition */].updateTime(version);\n        }\n        else {\n            return __WEBPACK_IMPORTED_MODULE_3__model_mutation__[\"f\" /* Precondition */].NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.equals(__WEBPACK_IMPORTED_MODULE_0__snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new __WEBPACK_IMPORTED_MODULE_4__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_4__util_error__[\"a\" /* Code */].FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return __WEBPACK_IMPORTED_MODULE_3__model_mutation__[\"f\" /* Precondition */].updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return __WEBPACK_IMPORTED_MODULE_3__model_mutation__[\"f\" /* Precondition */].exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new __WEBPACK_IMPORTED_MODULE_3__model_mutation__[\"a\" /* DeleteMutation */](key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, __WEBPACK_IMPORTED_MODULE_0__snapshot_version__[\"a\" /* SnapshotVersion */].forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\n\n\n//# sourceMappingURL=transaction.js.map\n\n\n/***/ }),\n/* 148 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AsyncObserver; });\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\n\n\n//# sourceMappingURL=async_observer.js.map\n\n\n/***/ }),\n/* 149 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AsyncQueue; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__log__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__promise__ = __webpack_require__(108);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__error__ = __webpack_require__(74);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // A list with timeout handles and their respective deferred promises.\n        // Contains an entry for each operation that is queued to run in the future\n        // (i.e. it has a delay that has not yet elapsed). Prior to cleanup, this list\n        // may also contain entries that have already been run (in which case `handle` is\n        // null).\n        this.delayedOperations = [];\n        // The number of operations that are queued to be run in the future (i.e. they\n        // have a delay that has not yet elapsed). Unlike `delayedOperations`, this\n        // is guaranteed to only contain operations that have not yet been run.\n        //\n        // Visible for testing.\n        this.delayedOperationsCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay (in milliseconds) to wait before queuing the\n     * operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"b\" /* fail */])('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOperationsCount++;\n            var delayedOp_1 = {\n                handle: null,\n                op: op,\n                deferred: new __WEBPACK_IMPORTED_MODULE_2__promise__[\"a\" /* Deferred */]()\n            };\n            delayedOp_1.handle = setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return delayedOp_1.op().then(function (result) {\n                        delayedOp_1.deferred.resolve(result);\n                    });\n                });\n                delayedOp_1.handle = null;\n                _this.delayedOperationsCount--;\n                if (_this.delayedOperationsCount === 0) {\n                    _this.delayedOperations = [];\n                }\n            }, delay);\n            this.delayedOperations.push(delayedOp_1);\n            return delayedOp_1.deferred.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                __WEBPACK_IMPORTED_MODULE_1__log__[\"c\" /* error */]('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"a\" /* assert */])(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently scheduled tasks are finished executing. Tasks\n     * scheduled with a delay can be rejected or queued for immediate execution.\n     */\n    AsyncQueue.prototype.drain = function (executeDelayedTasks) {\n        var _this = this;\n        this.delayedOperations.forEach(function (entry) {\n            if (entry.handle) {\n                clearTimeout(entry.handle);\n                if (executeDelayedTasks) {\n                    _this.scheduleInternal(entry.op).then(entry.deferred.resolve, entry.deferred.reject);\n                }\n                else {\n                    entry.deferred.reject(new __WEBPACK_IMPORTED_MODULE_3__error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_3__error__[\"a\" /* Code */].CANCELLED, 'Operation cancelled by shutdown'));\n                }\n            }\n        });\n        this.delayedOperations = [];\n        this.delayedOperationsCount = 0;\n        return this.schedule(function () { return Promise.resolve(); });\n    };\n    return AsyncQueue;\n}());\n\n\n//# sourceMappingURL=async_queue.js.map\n\n\n/***/ }),\n/* 150 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export OAuthToken */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EmptyCredentialsProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FirebaseCredentialsProvider; });\n/* unused harmony export FirstPartyToken */\n/* unused harmony export FirstPartyCredentialsProvider */\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = makeCredentialsProvider;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__auth_user__ = __webpack_require__(151);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_error__ = __webpack_require__(74);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\n\n/** A CredentialsProvider that always yields an empty token. */\nvar EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(__WEBPACK_IMPORTED_MODULE_0__auth_user__[\"a\" /* User */].UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\n\nvar FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.equals(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new __WEBPACK_IMPORTED_MODULE_2__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_2__util_error__[\"a\" /* Code */].ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"b\" /* fail */])('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new __WEBPACK_IMPORTED_MODULE_0__auth_user__[\"a\" /* User */](currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = __WEBPACK_IMPORTED_MODULE_0__auth_user__[\"a\" /* User */].FIRST_PARTY;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        Object(__WEBPACK_IMPORTED_MODULE_1__util_assert__[\"a\" /* assert */])(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(__WEBPACK_IMPORTED_MODULE_0__auth_user__[\"a\" /* User */].FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nfunction makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new __WEBPACK_IMPORTED_MODULE_2__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_2__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n\n/***/ }),\n/* 151 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return User; });\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.equals = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\n\n\n//# sourceMappingURL=user.js.map\n\n\n/***/ }),\n/* 152 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isPartialObserver;\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n\n/***/ }),\n/* 153 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export ParsedSetData */\n/* unused harmony export ParsedUpdateData */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DocumentKeyReference; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return UserDataConverter; });\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = fieldPathFromArgument;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_timestamp__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_field_value__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_mutation__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_path__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_assert__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_error__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_input_validation__ = __webpack_require__(89);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_misc__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_obj__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_sorted_map__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_types__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__blob__ = __webpack_require__(100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__field_path__ = __webpack_require__(105);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__field_value__ = __webpack_require__(116);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__geo_point__ = __webpack_require__(102);\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"e\" /* PatchMutation */](key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"h\" /* SetMutation */](key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"i\" /* TransformMutation */](key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"e\" /* PatchMutation */](key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"i\" /* TransformMutation */](key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call.*/\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.Set, methodName, __WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.MergeSet, methodName, __WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"b\" /* FieldMask */](context.fieldMask);\n        return new ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Update, methodName, __WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"h\" /* ObjectValue */].EMPTY;\n        __WEBPACK_IMPORTED_MODULE_8__util_obj__[\"c\" /* forEach */](input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof __WEBPACK_IMPORTED_MODULE_13__field_value__[\"a\" /* DeleteFieldValueImpl */]) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"b\" /* FieldMask */](fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new ParseContext(UserDataSource.Update, methodName, __WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"h\" /* ObjectValue */].EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof __WEBPACK_IMPORTED_MODULE_13__field_value__[\"a\" /* DeleteFieldValueImpl */]) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"b\" /* FieldMask */](fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.QueryValue, methodName, __WEBPACK_IMPORTED_MODULE_3__model_path__[\"a\" /* FieldPath */].EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(parsed != null, 'Parsed data should not be null.');\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"g\" /* NullValue */].INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"a\" /* ArrayValue */](result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new __WEBPACK_IMPORTED_MODULE_9__util_sorted_map__[\"a\" /* SortedMap */](__WEBPACK_IMPORTED_MODULE_7__util_misc__[\"f\" /* primitiveComparator */]);\n        __WEBPACK_IMPORTED_MODULE_8__util_obj__[\"c\" /* forEach */](obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"h\" /* ObjectValue */](result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"g\" /* NullValue */].INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (__WEBPACK_IMPORTED_MODULE_10__util_types__[\"b\" /* isSafeInteger */](value)) {\n                return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"f\" /* IntegerValue */](value);\n            }\n            else {\n                return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"d\" /* DoubleValue */](value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"c\" /* BooleanValue */].of(value);\n        }\n        else if (typeof value === 'string') {\n            return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"k\" /* StringValue */](value);\n        }\n        else if (value instanceof Date) {\n            return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"l\" /* TimestampValue */](__WEBPACK_IMPORTED_MODULE_0__core_timestamp__[\"a\" /* Timestamp */].fromDate(value));\n        }\n        else if (value instanceof __WEBPACK_IMPORTED_MODULE_14__geo_point__[\"a\" /* GeoPoint */]) {\n            return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"e\" /* GeoPointValue */](value);\n        }\n        else if (value instanceof __WEBPACK_IMPORTED_MODULE_11__blob__[\"a\" /* Blob */]) {\n            return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"b\" /* BlobValue */](value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new __WEBPACK_IMPORTED_MODULE_1__model_field_value__[\"i\" /* RefValue */](value.databaseId, value.key);\n        }\n        else if (value instanceof __WEBPACK_IMPORTED_MODULE_13__field_value__[\"b\" /* FieldValueImpl */]) {\n            if (value instanceof __WEBPACK_IMPORTED_MODULE_13__field_value__[\"a\" /* DeleteFieldValueImpl */]) {\n                if (context.dataSource == UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"a\" /* assert */])(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof __WEBPACK_IMPORTED_MODULE_13__field_value__[\"d\" /* ServerTimestampFieldValueImpl */]) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"c\" /* FieldTransform */](context.path, __WEBPACK_IMPORTED_MODULE_2__model_mutation__[\"g\" /* ServerTimestampTransform */].instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return Object(__WEBPACK_IMPORTED_MODULE_4__util_assert__[\"b\" /* fail */])('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + Object(__WEBPACK_IMPORTED_MODULE_6__util_input_validation__[\"m\" /* valueDescription */])(value));\n        }\n    };\n    return UserDataConverter;\n}());\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof __WEBPACK_IMPORTED_MODULE_14__geo_point__[\"a\" /* GeoPoint */]) &&\n        !(input instanceof __WEBPACK_IMPORTED_MODULE_11__blob__[\"a\" /* Blob */]) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof __WEBPACK_IMPORTED_MODULE_13__field_value__[\"b\" /* FieldValueImpl */]));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !Object(__WEBPACK_IMPORTED_MODULE_6__util_input_validation__[\"b\" /* isPlainObject */])(input)) {\n        var description = Object(__WEBPACK_IMPORTED_MODULE_6__util_input_validation__[\"m\" /* valueDescription */])(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction fieldPathFromArgument(methodName, path) {\n    if (path instanceof __WEBPACK_IMPORTED_MODULE_12__field_path__[\"a\" /* FieldPath */]) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return Object(__WEBPACK_IMPORTED_MODULE_12__field_path__[\"b\" /* fromDotSeparatedString */])(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new __WEBPACK_IMPORTED_MODULE_5__util_error__[\"b\" /* FirestoreError */](__WEBPACK_IMPORTED_MODULE_5__util_error__[\"a\" /* Code */].INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n\n/***/ })\n]));\n\n\n// WEBPACK FOOTER //\n// static/js/0.d81330c5.chunk.js","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport './src/platform_browser/browser_init';\nimport { configureForFirebase } from './src/platform/config';\nexport function registerFirestore(instance) {\n    configureForFirebase(instance);\n}\nregisterFirestore(firebase);\n\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/index.js\n// module id = 72\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SDK_VERSION } from '../core/version';\nimport { error } from './log';\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n    error(message);\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nexport function assert(assertion, message) {\n    if (!assertion) {\n        fail(message);\n    }\n}\n\n//# sourceMappingURL=assert.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/assert.js\n// module id = 73\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.\n//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum\nexport var Code = {\n    // Causes are copied from:\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n    /** Not an error; returned on success. */\n    OK: 'ok',\n    /** The operation was cancelled (typically by the caller). */\n    CANCELLED: 'cancelled',\n    /** Unknown error or an error from a different error domain. */\n    UNKNOWN: 'unknown',\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    INVALID_ARGUMENT: 'invalid-argument',\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    /** Some requested entity (e.g., file or directory) was not found. */\n    NOT_FOUND: 'not-found',\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    ALREADY_EXISTS: 'already-exists',\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    PERMISSION_DENIED: 'permission-denied',\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    UNAUTHENTICATED: 'unauthenticated',\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operation's execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    FAILED_PRECONDITION: 'failed-precondition',\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    ABORTED: 'aborted',\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    OUT_OF_RANGE: 'out-of-range',\n    /** Operation is not implemented or not supported/enabled in this service. */\n    UNIMPLEMENTED: 'unimplemented',\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    INTERNAL: 'internal',\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    UNAVAILABLE: 'unavailable',\n    /** Unrecoverable data loss or corruption. */\n    DATA_LOSS: 'data-loss'\n};\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nvar FirestoreError = /** @class */ (function (_super) {\n    __extends(FirestoreError, _super);\n    function FirestoreError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.name = 'FirebaseError';\n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\n        return _this;\n    }\n    return FirestoreError;\n}(Error));\nexport { FirestoreError };\n\n//# sourceMappingURL=error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/error.js\n// module id = 74\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { DocumentKey } from './document_key';\nvar EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function maybeDocumentMap() {\n    return EMPTY_MAYBE_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentMap() {\n    return EMPTY_DOCUMENT_MAP;\n}\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nexport function documentVersionMap() {\n    return EMPTY_DOCUMENT_VERSION_MAP;\n}\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet() {\n    return EMPTY_DOCUMENT_KEY_SET;\n}\n\n//# sourceMappingURL=collections.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/collections.js\n// module id = 75\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { ResourcePath } from './path';\nvar DocumentKey = /** @class */ (function () {\n    function DocumentKey(path) {\n        this.path = path;\n        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +\n            path.toArray().join('/'));\n    }\n    DocumentKey.prototype.equals = function (other) {\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\n    };\n    DocumentKey.prototype.toString = function () {\n        return this.path.toString();\n    };\n    DocumentKey.comparator = function (k1, k2) {\n        return ResourcePath.comparator(k1.path, k2.path);\n    };\n    DocumentKey.isDocumentKey = function (path) {\n        return path.length % 2 === 0;\n    };\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param path The segments of the path to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromSegments = function (segments) {\n        return new DocumentKey(new ResourcePath(segments.slice()));\n    };\n    /**\n     * Creates and returns a new document key using '/' to split the string into\n     * segments.\n     *\n     * @param path The slash-separated path string to the document\n     * @return A new instance of DocumentKey\n     */\n    DocumentKey.fromPathString = function (path) {\n        return new DocumentKey(ResourcePath.fromString(path));\n    };\n    DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));\n    return DocumentKey;\n}());\nexport { DocumentKey };\n\n//# sourceMappingURL=document_key.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/document_key.js\n// module id = 76\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar logLevel = LogLevel.ERROR;\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel() {\n    return logLevel;\n}\nexport function setLogLevel(newLevel) {\n    logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n    var obj = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        obj[_i - 2] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.DEBUG) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n    }\n}\nexport function error(msg) {\n    var obj = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        obj[_i - 1] = arguments[_i];\n    }\n    if (logLevel <= LogLevel.ERROR) {\n        var time = new Date().toISOString();\n        var args = obj.map(argToString);\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n    }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    else {\n        var platform = PlatformSupport.getPlatform();\n        try {\n            return platform.formatJSON(obj);\n        }\n        catch (e) {\n            // Converting to JSON failed, just log the object directly\n            return obj;\n        }\n    }\n}\n\n//# sourceMappingURL=log.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/log.js\n// module id = 77\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\n// tslint:disable-next-line:class-as-namespace\nvar AutoId = /** @class */ (function () {\n    function AutoId() {\n    }\n    AutoId.newId = function () {\n        // Alphanumeric characters\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var autoId = '';\n        for (var i = 0; i < 20; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);\n        return autoId;\n    };\n    return AutoId;\n}());\nexport { AutoId };\nexport function primitiveComparator(left, right) {\n    if (left < right)\n        return -1;\n    if (left > right)\n        return 1;\n    return 0;\n}\n/** Helper to compare nullable (or undefined-able) objects using equals(). */\nexport function equals(left, right) {\n    if (left !== null && left !== undefined) {\n        return !!(right && left.equals(right));\n    }\n    else {\n        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't\n        // smart enough.\n        return left === right;\n    }\n}\n/** Helper to compare arrays using equals(). */\nexport function arrayEquals(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < left.length; i++) {\n        if (!left[i].equals(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the largest lexicographically smaller string of equal or smaller\n * length. Returns an empty string if there is no such predecessor (if the input\n * is empty).\n *\n * Strings returned from this method can be invalid UTF-16 but this is sufficent\n * in use for indexeddb because that depends on lexicographical ordering but\n * shouldn't be used elsewhere.\n */\nexport function immediatePredecessor(s) {\n    // We can decrement the last character in the string and be done\n    // unless that character is 0 (0x0000), in which case we have to erase the\n    // last character.\n    var lastIndex = s.length - 1;\n    if (s.length === 0) {\n        // Special case the empty string.\n        return '';\n    }\n    else if (s.charAt(lastIndex) === '\\0') {\n        return s.substring(0, lastIndex);\n    }\n    else {\n        return (s.substring(0, lastIndex) +\n            String.fromCharCode(s.charCodeAt(lastIndex) - 1));\n    }\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s) {\n    // Return the input string, with an additional NUL byte appended.\n    return s + '\\0';\n}\n\n//# sourceMappingURL=misc.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/misc.js\n// module id = 78\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nvar PersistencePromise = /** @class */ (function () {\n    function PersistencePromise(callback) {\n        var _this = this;\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\n        // not the user's raw next() or catch() callbacks.\n        this.nextCallback = null;\n        this.catchCallback = null;\n        // When the operation resolves, we'll set result or error and mark isDone.\n        this.result = undefined;\n        this.error = null;\n        this.isDone = false;\n        // Set to true when .then() or .catch() are called and prevents additional\n        // chaining.\n        this.callbackAttached = false;\n        callback(function (value) {\n            _this.isDone = true;\n            _this.result = value;\n            if (_this.nextCallback) {\n                // value should be defined unless T is Void, but we can't express\n                // that in the type system.\n                _this.nextCallback(value);\n            }\n        }, function (error) {\n            _this.isDone = true;\n            _this.error = error;\n            if (_this.catchCallback) {\n                _this.catchCallback(error);\n            }\n        });\n    }\n    PersistencePromise.prototype.catch = function (fn) {\n        return this.next(undefined, fn);\n    };\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\n        var _this = this;\n        if (this.callbackAttached) {\n            fail('Called next() or catch() twice for PersistencePromise');\n        }\n        this.callbackAttached = true;\n        if (this.isDone) {\n            if (!this.error) {\n                return this.wrapSuccess(nextFn, this.result);\n            }\n            else {\n                return this.wrapFailure(catchFn, this.error);\n            }\n        }\n        else {\n            return new PersistencePromise(function (resolve, reject) {\n                _this.nextCallback = function (value) {\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\n                };\n                _this.catchCallback = function (error) {\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\n                };\n            });\n        }\n    };\n    PersistencePromise.prototype.toPromise = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.next(resolve, reject);\n        });\n    };\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\n        try {\n            var result = fn();\n            if (result instanceof PersistencePromise) {\n                return result;\n            }\n            else {\n                return PersistencePromise.resolve(result);\n            }\n        }\n        catch (e) {\n            return PersistencePromise.reject(e);\n        }\n    };\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n        if (nextFn) {\n            return this.wrapUserFunction(function () { return nextFn(value); });\n        }\n        else {\n            // If there's no nextFn, then R must be the same as T but we\n            // can't express that in the type system.\n            return PersistencePromise.resolve(value);\n        }\n    };\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n        if (catchFn) {\n            return this.wrapUserFunction(function () { return catchFn(error); });\n        }\n        else {\n            return PersistencePromise.reject(error);\n        }\n    };\n    PersistencePromise.resolve = function (result) {\n        return new PersistencePromise(function (resolve, reject) {\n            resolve(result);\n        });\n    };\n    PersistencePromise.reject = function (error) {\n        return new PersistencePromise(function (resolve, reject) {\n            reject(error);\n        });\n    };\n    PersistencePromise.waitFor = function (all) {\n        return all.reduce(function (promise, nextPromise, idx) {\n            return promise.next(function () {\n                return nextPromise;\n            });\n        }, PersistencePromise.resolve());\n    };\n    PersistencePromise.map = function (all) {\n        var results = [];\n        var first = true;\n        // initial is ignored, so we can cheat on the type.\n        var initial = PersistencePromise.resolve(null);\n        return all\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (!first) {\n                    results.push(result);\n                }\n                first = false;\n                return nextPromise;\n            });\n        }, initial)\n            .next(function (result) {\n            results.push(result);\n            return results;\n        });\n    };\n    return PersistencePromise;\n}());\nexport { PersistencePromise };\n\n//# sourceMappingURL=persistence_promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/persistence_promise.js\n// module id = 79\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\nexport { NoDocument };\n\n//# sourceMappingURL=document.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/document.js\n// module id = 80\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from './timestamp';\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nvar SnapshotVersion = /** @class */ (function () {\n    function SnapshotVersion(timestamp) {\n        this.timestamp = timestamp;\n    }\n    // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n    // delete this constructor and use a timestamp-backed version everywhere.\n    SnapshotVersion.fromMicroseconds = function (value) {\n        var seconds = Math.floor(value / 1e6);\n        var nanos = (value % 1e6) * 1e3;\n        return new SnapshotVersion(new Timestamp(seconds, nanos));\n    };\n    SnapshotVersion.fromTimestamp = function (value) {\n        return new SnapshotVersion(value);\n    };\n    SnapshotVersion.forDeletedDoc = function () {\n        return SnapshotVersion.MIN;\n    };\n    SnapshotVersion.prototype.compareTo = function (other) {\n        return this.timestamp.compareTo(other.timestamp);\n    };\n    SnapshotVersion.prototype.equals = function (other) {\n        return this.timestamp.equals(other.timestamp);\n    };\n    /** Returns a number representation of the version for use in spec tests. */\n    SnapshotVersion.prototype.toMicroseconds = function () {\n        // Convert to microseconds.\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n    };\n    SnapshotVersion.prototype.toString = function () {\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n    };\n    SnapshotVersion.prototype.toTimestamp = function () {\n        return this.timestamp;\n    };\n    SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));\n    return SnapshotVersion;\n}());\nexport { SnapshotVersion };\n\n//# sourceMappingURL=snapshot_version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/snapshot_version.js\n// module id = 81\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n    var count = 0;\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            count++;\n        }\n    }\n    return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted(value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var num = parseInt(key, 10);\n            if (!isNaN(num)) {\n                fn(num, obj[key]);\n            }\n        }\n    }\n}\nexport function forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n    if (!contains(obj, key)) {\n        obj[key] = valFn();\n    }\n    return obj[key];\n}\nexport function isEmpty(obj) {\n    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function shallowCopy(obj) {\n    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n    var result = {};\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=obj.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/obj.js\n// module id = 82\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nvar PlatformSupport = /** @class */ (function () {\n    function PlatformSupport() {\n    }\n    PlatformSupport.setPlatform = function (platform) {\n        if (PlatformSupport.platform) {\n            fail('Platform already defined');\n        }\n        PlatformSupport.platform = platform;\n    };\n    PlatformSupport.getPlatform = function () {\n        if (!PlatformSupport.platform) {\n            fail('Platform not set');\n        }\n        return PlatformSupport.platform;\n    };\n    return PlatformSupport;\n}());\nexport { PlatformSupport };\n/**\n * Returns the representation of an empty \"proto\" byte string for the\n * platform.\n */\nexport function emptyByteString() {\n    return PlatformSupport.getPlatform().emptyByteString;\n}\n\n//# sourceMappingURL=platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/platform/platform.js\n// module id = 83\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nexport var DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nvar Path = /** @class */ (function () {\n    function Path(segments, offset, length) {\n        this.init(segments, offset, length);\n    }\n    /**\n     * An initialization method that can be called from outside the constructor.\n     * We need this so that we can have a non-static construct method that returns\n     * the polymorphic `this` type.\n     */\n    Path.prototype.init = function (segments, offset, length) {\n        if (offset === undefined) {\n            offset = 0;\n        }\n        else if (offset > segments.length) {\n            fail('offset ' + offset + ' out of range ' + segments.length);\n        }\n        if (length === undefined) {\n            length = segments.length - offset;\n        }\n        else if (length > segments.length - offset) {\n            fail('length ' + length + ' out of range ' + (segments.length - offset));\n        }\n        this.segments = segments;\n        this.offset = offset;\n        this.len = length;\n    };\n    /**\n     * Constructs a new instance of Path using the same concrete type as `this`.\n     * We need this instead of using the normal constructor, because polymorphic\n     * `this` doesn't work on static methods.\n     */\n    Path.prototype.construct = function (segments, offset, length) {\n        var path = Object.create(Object.getPrototypeOf(this));\n        path.init(segments, offset, length);\n        return path;\n    };\n    Object.defineProperty(Path.prototype, \"length\", {\n        get: function () {\n            return this.len;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.equals = function (other) {\n        return Path.comparator(this, other) === 0;\n    };\n    Path.prototype.child = function (nameOrPath) {\n        var segments = this.segments.slice(this.offset, this.limit());\n        if (nameOrPath instanceof Path) {\n            nameOrPath.forEach(function (segment) {\n                segments.push(segment);\n            });\n        }\n        else if (typeof nameOrPath === 'string') {\n            segments.push(nameOrPath);\n        }\n        else {\n            fail('Unknown parameter type for Path.child(): ' + nameOrPath);\n        }\n        return this.construct(segments);\n    };\n    /** The index of one past the last segment of the path. */\n    Path.prototype.limit = function () {\n        return this.offset + this.length;\n    };\n    Path.prototype.popFirst = function (size) {\n        size = size === undefined ? 1 : size;\n        assert(this.length >= size, \"Can't call popFirst() with less segments\");\n        return this.construct(this.segments, this.offset + size, this.length - size);\n    };\n    Path.prototype.popLast = function () {\n        assert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n        return this.construct(this.segments, this.offset, this.length - 1);\n    };\n    Path.prototype.firstSegment = function () {\n        assert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n        return this.segments[this.offset];\n    };\n    Path.prototype.lastSegment = function () {\n        assert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n        return this.segments[this.limit() - 1];\n    };\n    Path.prototype.get = function (index) {\n        assert(index < this.length, 'Index out of range');\n        return this.segments[this.offset + index];\n    };\n    Path.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    Path.prototype.isPrefixOf = function (other) {\n        if (other.length < this.length) {\n            return false;\n        }\n        for (var i = 0; i < this.length; i++) {\n            if (this.get(i) !== other.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Path.prototype.forEach = function (fn) {\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\n            fn(this.segments[i]);\n        }\n    };\n    Path.prototype.toArray = function () {\n        return this.segments.slice(this.offset, this.limit());\n    };\n    Path.comparator = function (p1, p2) {\n        var len = Math.min(p1.length, p2.length);\n        for (var i = 0; i < len; i++) {\n            var left = p1.get(i);\n            var right = p2.get(i);\n            if (left < right)\n                return -1;\n            if (left > right)\n                return 1;\n        }\n        if (p1.length < p2.length)\n            return -1;\n        if (p1.length > p2.length)\n            return 1;\n        return 0;\n    };\n    return Path;\n}());\nexport { Path };\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nvar ResourcePath = /** @class */ (function (_super) {\n    __extends(ResourcePath, _super);\n    function ResourcePath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ResourcePath.prototype.canonicalString = function () {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join('/');\n    };\n    ResourcePath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Creates a resource path from the given slash-delimited string.\n     */\n    ResourcePath.fromString = function (path) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        if (path.indexOf('//') >= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid path (\" + path + \"). Paths must not contain // in them.\");\n        }\n        // We may still have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });\n        return new ResourcePath(segments);\n    };\n    ResourcePath.EMPTY_PATH = new ResourcePath([]);\n    return ResourcePath;\n}(Path));\nexport { ResourcePath };\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\nvar FieldPath = /** @class */ (function (_super) {\n    __extends(FieldPath, _super);\n    function FieldPath() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n    FieldPath.isValidIdentifier = function (segment) {\n        return identifierRegExp.test(segment);\n    };\n    FieldPath.prototype.canonicalString = function () {\n        return this.toArray()\n            .map(function (str) {\n            str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n            if (!FieldPath.isValidIdentifier(str)) {\n                str = '`' + str + '`';\n            }\n            return str;\n        })\n            .join('.');\n    };\n    FieldPath.prototype.toString = function () {\n        return this.canonicalString();\n    };\n    /**\n     * Returns true if this field references the key of a document.\n     */\n    FieldPath.prototype.isKeyField = function () {\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n    };\n    /**\n     * The field designating the key of a document.\n     */\n    FieldPath.keyField = function () {\n        return new FieldPath([DOCUMENT_KEY_NAME]);\n    };\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n    FieldPath.fromServerFormat = function (path) {\n        var segments = [];\n        var current = '';\n        var i = 0;\n        var addCurrentSegment = function () {\n            if (current.length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\n                    \"with '.', end with '.', or contain '..'\");\n            }\n            segments.push(current);\n            current = '';\n        };\n        var inBackticks = false;\n        while (i < path.length) {\n            var c = path[i];\n            if (c === '\\\\') {\n                if (i + 1 === path.length) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n                }\n                var next = path[i + 1];\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n                }\n                current += next;\n                i += 2;\n            }\n            else if (c === '`') {\n                inBackticks = !inBackticks;\n                i++;\n            }\n            else if (c === '.' && !inBackticks) {\n                addCurrentSegment();\n                i++;\n            }\n            else {\n                current += c;\n                i++;\n            }\n        }\n        addCurrentSegment();\n        if (inBackticks) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n        }\n        return new FieldPath(segments);\n    };\n    FieldPath.EMPTY_PATH = new FieldPath([]);\n    return FieldPath;\n}(Path));\nexport { FieldPath };\n\n//# sourceMappingURL=path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/path.js\n// module id = 84\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nvar SortedMap = /** @class */ (function () {\n    function SortedMap(comparator, root) {\n        this.comparator = comparator;\n        this.root = root ? root : LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator, this.root\n            .insert(key, value, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns a copy of the map, with the specified key removed.\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator, this.root\n            .remove(key, this.comparator)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    // Returns the value of the node with the given key, or null.\n    SortedMap.prototype.get = function (key) {\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    // Returns the key of the item *before* the specified key, or null if key is\n    // the first item.\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var node = this.root;\n        var rightParent = null;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw fail('Attempted to find predecessor key for a nonexistent key.' +\n            '  What gives?');\n    };\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    SortedMap.prototype.indexOf = function (key) {\n        // Number of nodes that were pruned when descending right\n        var prunedNodes = 0;\n        var node = this.root;\n        while (!node.isEmpty()) {\n            var cmp = this.comparator(key, node.key);\n            if (cmp === 0) {\n                return prunedNodes + node.left.size;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else {\n                // Count all nodes left of the node plus the node itself\n                prunedNodes += node.left.size + 1;\n                node = node.right;\n            }\n        }\n        // Node not found\n        return -1;\n    };\n    SortedMap.prototype.isEmpty = function () {\n        return this.root.isEmpty();\n    };\n    Object.defineProperty(SortedMap.prototype, \"size\", {\n        // Returns the total number of nodes in the map.\n        get: function () {\n            return this.root.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Returns the minimum key in the map.\n    SortedMap.prototype.minKey = function () {\n        return this.root.minKey();\n    };\n    // Returns the maximum key in the map.\n    SortedMap.prototype.maxKey = function () {\n        return this.root.maxKey();\n    };\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root.inorderTraversal(action);\n    };\n    SortedMap.prototype.forEach = function (fn) {\n        this.inorderTraversal(function (k, v) {\n            fn(k, v);\n            return false;\n        });\n    };\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root.reverseTraversal(action);\n    };\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root, null, this.comparator, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root, key, this.comparator, true, resultGenerator);\n    };\n    return SortedMap;\n}()); // end SortedMap\nexport { SortedMap };\n// An iterator over an LLRBNode.\nvar SortedMapIterator = /** @class */ (function () {\n    function SortedMapIterator(node, startKey, comparator, isReverse, resultGenerator) {\n        this.resultGenerator = resultGenerator || null;\n        this.isReverse = isReverse;\n        this.nodeStack = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move\n                // to the next one\n                this.nodeStack.push(node);\n                if (this.isReverse) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');\n        var node = this.nodeStack.pop();\n        var result;\n        if (this.resultGenerator)\n            result = this.resultGenerator(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack.length === 0)\n            return null;\n        var node = this.nodeStack[this.nodeStack.length - 1];\n        if (this.resultGenerator) {\n            return this.resultGenerator(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}()); // end SortedMapIterator\nexport { SortedMapIterator };\n// Represents a node in a Left-leaning Red-Black tree.\nvar LLRBNode = /** @class */ (function () {\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : LLRBNode.EMPTY;\n        this.right = right != null ? right : LLRBNode.EMPTY;\n        this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    // Returns the minimum node in the tree.\n    LLRBNode.prototype.min = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min();\n        }\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.minKey = function () {\n        return this.min().key;\n    };\n    // Returns the maximum key in the tree.\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    // Returns new tree, with the key/value added.\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var n = this;\n        var cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.removeMin = function () {\n        if (this.left.isEmpty()) {\n            return LLRBNode.EMPTY;\n        }\n        var n = this;\n        if (!n.left.isRed() && !n.left.left.isRed())\n            n = n.moveRedLeft();\n        n = n.copy(null, null, null, n.left.removeMin(), null);\n        return n.fixUp();\n    };\n    // Returns new tree, with the specified item removed.\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var smallest;\n        var n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n                n = n.moveRedLeft();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed())\n                n = n.rotateRight();\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n                n = n.moveRedRight();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return LLRBNode.EMPTY;\n                }\n                else {\n                    smallest = n.right.min();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp();\n    };\n    LLRBNode.prototype.isRed = function () {\n        return this.color;\n    };\n    // Returns new tree after performing any needed rotations.\n    LLRBNode.prototype.fixUp = function () {\n        var n = this;\n        if (n.right.isRed() && !n.left.isRed())\n            n = n.rotateLeft();\n        if (n.left.isRed() && n.left.left.isRed())\n            n = n.rotateRight();\n        if (n.left.isRed() && n.right.isRed())\n            n = n.colorFlip();\n        return n;\n    };\n    LLRBNode.prototype.moveRedLeft = function () {\n        var n = this.colorFlip();\n        if (n.right.left.isRed()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight());\n            n = n.rotateLeft();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.moveRedRight = function () {\n        var n = this.colorFlip();\n        if (n.left.left.isRed()) {\n            n = n.rotateRight();\n            n = n.colorFlip();\n        }\n        return n;\n    };\n    LLRBNode.prototype.rotateLeft = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    LLRBNode.prototype.rotateRight = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    LLRBNode.prototype.colorFlip = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    // For testing.\n    LLRBNode.prototype.checkMaxDepth = function () {\n        var blackDepth = this.check();\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    LLRBNode.prototype.check = function () {\n        if (this.isRed() && this.left.isRed()) {\n            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed()) {\n            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        var blackDepth = this.left.check();\n        if (blackDepth !== this.right.check()) {\n            throw fail('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed() ? 0 : 1);\n        }\n    };\n    LLRBNode.EMPTY = null;\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}()); // end LLRBNode\nexport { LLRBNode };\n// Represents an empty node (a leaf node in the Red-Black Tree).\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n        this.size = 0;\n    }\n    // Returns a copy of the current node.\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    // Returns a copy of the tree, with the specified key/value added.\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value);\n    };\n    // Returns a copy of the tree, with the specified key removed.\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    LLRBEmptyNode.prototype.isRed = function () {\n        return false;\n    };\n    // For testing.\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\n        return true;\n    };\n    LLRBEmptyNode.prototype.check = function () {\n        return 0;\n    };\n    return LLRBEmptyNode;\n}()); // end LLRBEmptyNode\nexport { LLRBEmptyNode };\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n//# sourceMappingURL=sorted_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/sorted_map.js\n// module id = 85\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\nexport { FieldValue };\nvar NullValue = /** @class */ (function (_super) {\n    __extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\nexport { NullValue };\nvar BooleanValue = /** @class */ (function (_super) {\n    __extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    __extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    __extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\nexport { IntegerValue };\nvar DoubleValue = /** @class */ (function (_super) {\n    __extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\nexport { DoubleValue };\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    __extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\nexport { StringValue };\nvar TimestampValue = /** @class */ (function (_super) {\n    __extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    __extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\nexport { ServerTimestampValue };\nvar BlobValue = /** @class */ (function (_super) {\n    __extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\nexport { BlobValue };\nvar RefValue = /** @class */ (function (_super) {\n    __extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\nexport { RefValue };\nvar GeoPointValue = /** @class */ (function (_super) {\n    __extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\nexport { GeoPointValue };\nvar ObjectValue = /** @class */ (function (_super) {\n    __extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(FieldValue));\nexport { ObjectValue };\nvar ArrayValue = /** @class */ (function (_super) {\n    __extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\nexport { ArrayValue };\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/field_value.js\n// module id = 86\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nvar Timestamp = /** @class */ (function () {\n    function Timestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\n        // This will break in the year 10,000.\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\n    }\n    Timestamp.now = function () {\n        return Timestamp.fromEpochMilliseconds(Date.now());\n    };\n    Timestamp.fromDate = function (date) {\n        return Timestamp.fromEpochMilliseconds(date.getTime());\n    };\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\n        var seconds = Math.floor(milliseconds / 1000);\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.fromISOString = function (utc) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        var nanos = 0;\n        var fraction = isoRegExp.exec(utc);\n        assert(!!fraction, 'invalid timestamp: ' + utc);\n        if (fraction[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            var nanoStr = fraction[1];\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\n            nanos = parseInt(nanoStr, 10);\n        }\n        // Parse the date to get the seconds.\n        var date = new Date(utc);\n        var seconds = Math.floor(date.getTime() / 1000);\n        return new Timestamp(seconds, nanos);\n    };\n    Timestamp.prototype.toDate = function () {\n        return new Date(this.toEpochMilliseconds());\n    };\n    Timestamp.prototype.toEpochMilliseconds = function () {\n        return this.seconds * 1000 + this.nanos / 1e6;\n    };\n    Timestamp.prototype.compareTo = function (other) {\n        if (this.seconds === other.seconds) {\n            return primitiveComparator(this.nanos, other.nanos);\n        }\n        return primitiveComparator(this.seconds, other.seconds);\n    };\n    Timestamp.prototype.equals = function (other) {\n        return other.seconds === this.seconds && other.nanos === this.nanos;\n    };\n    Timestamp.prototype.toString = function () {\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\n    };\n    return Timestamp;\n}());\nexport { Timestamp };\n\n//# sourceMappingURL=timestamp.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/timestamp.js\n// module id = 87\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { encode } from './encoded_resource_path';\nexport var SCHEMA_VERSION = 1;\n/** Performs database creation and (in the future) upgrades between versions. */\nexport function createOrUpgradeDb(db, oldVersion) {\n    assert(oldVersion === 0, 'Unexpected upgrade from version ' + oldVersion);\n    db.createObjectStore(DbMutationQueue.store, {\n        keyPath: DbMutationQueue.keyPath\n    });\n    // TODO(mikelehen): Get rid of \"as any\" if/when TypeScript fixes their\n    // types. https://github.com/Microsoft/TypeScript/issues/14322\n    db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbMutationBatch.store, { keyPath: DbMutationBatch.keyPath });\n    var targetDocumentsStore = db.createObjectStore(\n    // tslint:disable-next-line:no-any\n    DbTargetDocument.store, { keyPath: DbTargetDocument.keyPath });\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\n    var targetStore = db.createObjectStore(DbTarget.store, {\n        keyPath: DbTarget.keyPath\n    });\n    // NOTE: This is unique only because the TargetId is the suffix.\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\n    // NOTE: keys for these stores are specified explicitly rather than using a\n    // keyPath.\n    db.createObjectStore(DbDocumentMutation.store);\n    db.createObjectStore(DbRemoteDocument.store);\n    db.createObjectStore(DbOwner.store);\n    db.createObjectStore(DbTargetGlobal.store);\n}\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nvar DbTimestamp = /** @class */ (function () {\n    function DbTimestamp(seconds, nanos) {\n        this.seconds = seconds;\n        this.nanos = nanos;\n    }\n    return DbTimestamp;\n}());\nexport { DbTimestamp };\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can be owned by a single tab at a given time. That tab\n * must validate that it is still the owner before every write operation and\n * should regularly write an updated timestamp to prevent other tabs from\n * \"stealing\" ownership of the db.\n */\nvar DbOwner = /** @class */ (function () {\n    function DbOwner(ownerId, leaseTimestampMs) {\n        this.ownerId = ownerId;\n        this.leaseTimestampMs = leaseTimestampMs;\n    }\n    /** Name of the IndexedDb object store. */\n    DbOwner.store = 'owner';\n    return DbOwner;\n}());\nexport { DbOwner };\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nvar DbMutationQueue = /** @class */ (function () {\n    function DbMutationQueue(\n        /**\n         * The normalized user ID to which this queue belongs.\n         */\n        userId, \n        /**\n         * An identifier for the highest numbered batch that has been acknowledged\n         * by the server. All MutationBatches in this queue with batchIds less\n         * than or equal to this value are considered to have been acknowledged by\n         * the server.\n         */\n        lastAcknowledgedBatchId, \n        /**\n         * A stream token that was previously sent by the server.\n         *\n         * See StreamingWriteRequest in datastore.proto for more details about\n         * usage.\n         *\n         * After sending this token, earlier tokens may not be used anymore so\n         * only a single stream token is retained.\n         */\n        lastStreamToken) {\n        this.userId = userId;\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n        this.lastStreamToken = lastStreamToken;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationQueue.store = 'mutationQueues';\n    /** Keys are automatically assigned via the userId property. */\n    DbMutationQueue.keyPath = 'userId';\n    return DbMutationQueue;\n}());\nexport { DbMutationQueue };\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nvar DbMutationBatch = /** @class */ (function () {\n    function DbMutationBatch(\n        /**\n         * The normalized user ID to which this batch belongs.\n         */\n        userId, \n        /**\n         * An identifier for this batch, allocated by the mutation queue in a\n         * monotonically increasing manner.\n         */\n        batchId, \n        /**\n         * The local write time of the batch, stored as milliseconds since the\n         * epoch.\n         */\n        localWriteTimeMs, \n        /**\n         * A list of mutations to apply. All mutations will be applied atomically.\n         *\n         * Mutations are serialized via JsonProtoSerializer.toMutation().\n         */\n        mutations) {\n        this.userId = userId;\n        this.batchId = batchId;\n        this.localWriteTimeMs = localWriteTimeMs;\n        this.mutations = mutations;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbMutationBatch.store = 'mutations';\n    /** Keys are automatically assigned via the userId, batchId properties. */\n    DbMutationBatch.keyPath = ['userId', 'batchId'];\n    return DbMutationBatch;\n}());\nexport { DbMutationBatch };\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nvar DbDocumentMutation = /** @class */ (function () {\n    function DbDocumentMutation() {\n    }\n    /**\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n     * over all of a user's document mutations.\n     */\n    DbDocumentMutation.prefixForUser = function (userId) {\n        return [userId];\n    };\n    /**\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n     * index to iterate over all at document mutations for a given path or lower.\n     */\n    DbDocumentMutation.prefixForPath = function (userId, path) {\n        return [userId, encode(path)];\n    };\n    /**\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\n     * and deleting into the DbDocumentMutations index.\n     */\n    DbDocumentMutation.key = function (userId, path, batchId) {\n        return [userId, encode(path), batchId];\n    };\n    DbDocumentMutation.store = 'documentMutations';\n    /**\n     * Because we store all the useful information for this store in the key,\n     * there is no useful information to store as the value. The raw (unencoded)\n     * path cannot be stored because IndexedDb doesn't store prototype\n     * information.\n     */\n    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n    return DbDocumentMutation;\n}());\nexport { DbDocumentMutation };\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nvar DbNoDocument = /** @class */ (function () {\n    function DbNoDocument(path, readTime) {\n        this.path = path;\n        this.readTime = readTime;\n    }\n    return DbNoDocument;\n}());\nexport { DbNoDocument };\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb. It\n * represents either a cached document (if it exists) or a cached \"no-document\"\n * (if it is known to not exist).\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nvar DbRemoteDocument = /** @class */ (function () {\n    function DbRemoteDocument(\n        /**\n         * Set to an instance of a DbNoDocument if it is known that no document\n         * exists.\n         */\n        noDocument, \n        /**\n         * Set to an instance of a Document if there's a cached version of the\n         * document.\n         */\n        document) {\n        this.noDocument = noDocument;\n        this.document = document;\n    }\n    DbRemoteDocument.store = 'remoteDocuments';\n    return DbRemoteDocument;\n}());\nexport { DbRemoteDocument };\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nvar DbTarget = /** @class */ (function () {\n    function DbTarget(\n        /**\n         * An auto-generated sequential numeric identifier for the query.\n         *\n         * Queries are stored using their canonicalId as the key, but these\n         * canonicalIds can be quite long so we additionally assign a unique\n         * queryId which can be used by referenced data structures (e.g.\n         * indexes) to minimize the on-disk cost.\n         */\n        targetId, \n        /**\n         * The canonical string representing this query. This is not unique.\n         */\n        canonicalId, \n        /**\n         * The last readTime received from the Watch Service for this query.\n         *\n         * This is the same value as TargetChange.read_time in the protos.\n         */\n        readTime, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data\n         * that matches the query. The resume token essentially identifies a\n         * point in time from which the server should resume sending results.\n         *\n         * This is related to the snapshotVersion in that the resumeToken\n         * effectively also encodes that value, but the resumeToken is opaque\n         * and sometimes encodes additional information.\n         *\n         * A consequence of this is that the resumeToken should be used when\n         * asking the server to reason about where this client is in the watch\n         * stream, but the client should use the snapshotVersion for its own\n         * purposes.\n         *\n         * This is the same value as TargetChange.resume_token in the protos.\n         */\n        resumeToken, \n        /**\n         * A sequence number representing the last time this query was\n         * listened to, used for garbage collection purposes.\n         *\n         * Conventionally this would be a timestamp value, but device-local\n         * clocks are unreliable and they must be able to create new listens\n         * even while disconnected. Instead this should be a monotonically\n         * increasing number that's incremented on each listen call.\n         *\n         * This is different from the queryId since the queryId is an\n         * immutable identifier assigned to the Query on first use while\n         * lastListenSequenceNumber is updated every time the query is\n         * listened to.\n         */\n        lastListenSequenceNumber, \n        /**\n         * The query for this target.\n         *\n         * Because canonical ids are not unique we must store the actual query. We\n         * use the proto to have an object we can persist without having to\n         * duplicate translation logic to and from a `Query` object.\n         */\n        query) {\n        this.targetId = targetId;\n        this.canonicalId = canonicalId;\n        this.readTime = readTime;\n        this.resumeToken = resumeToken;\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\n        this.query = query;\n    }\n    DbTarget.store = 'targets';\n    /** Keys are automatically assigned via the targetId property. */\n    DbTarget.keyPath = 'targetId';\n    /** The name of the queryTargets index. */\n    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n    /**\n     * The index of all canonicalIds to the targets that they match. This is not\n     * a unique mapping because canonicalId does not promise a unique name for all\n     * possible queries, so we append the targetId to make the mapping unique.\n     */\n    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n    return DbTarget;\n}());\nexport { DbTarget };\n/**\n * An object representing an association between a target and a document.\n * Stored in the targetDocument object store to store the documents tracked by a\n * particular target.\n */\nvar DbTargetDocument = /** @class */ (function () {\n    function DbTargetDocument(\n        /**\n         * The targetId identifying a target.\n         */\n        targetId, \n        /**\n         * The path to the document, as encoded in the key.\n         */\n        path) {\n        this.targetId = targetId;\n        this.path = path;\n    }\n    /** Name of the IndexedDb object store.  */\n    DbTargetDocument.store = 'targetDocuments';\n    /** Keys are automatically assigned via the targetId, path properties. */\n    DbTargetDocument.keyPath = ['targetId', 'path'];\n    /** The index name for the reverse index. */\n    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n    /** We also need to create the reverse index for these properties. */\n    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n    return DbTargetDocument;\n}());\nexport { DbTargetDocument };\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nvar DbTargetGlobal = /** @class */ (function () {\n    function DbTargetGlobal(\n        /**\n         * The highest numbered target id across all targets.\n         *\n         * See DbTarget.targetId.\n         */\n        highestTargetId, \n        /**\n         * The highest numbered lastListenSequenceNumber across all targets.\n         *\n         * See DbTarget.lastListenSequenceNumber.\n         */\n        highestListenSequenceNumber, \n        /**\n         * A global snapshot version representing the last consistent snapshot we\n         * received from the backend. This is monotonically increasing and any\n         * snapshots received from the backend prior to this version (e.g. for\n         * targets resumed with a resumeToken) should be suppressed (buffered)\n         * until the backend has caught up to this snapshot version again. This\n         * prevents our cache from ever going backwards in time.\n         */\n        lastRemoteSnapshotVersion) {\n        this.highestTargetId = highestTargetId;\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    /**\n     * The key string used for the single object that exists in the\n     * DbTargetGlobal store.\n     */\n    DbTargetGlobal.key = 'targetGlobalKey';\n    DbTargetGlobal.store = 'targetGlobal';\n    return DbTargetGlobal;\n}());\nexport { DbTargetGlobal };\n/**\n * The list of all IndexedDB stored used by the SDK. This is used when creating\n * transactions so that access across all stores is done atomically.\n */\nexport var ALL_STORES = [\n    DbMutationQueue.store,\n    DbMutationBatch.store,\n    DbDocumentMutation.store,\n    DbRemoteDocument.store,\n    DbTarget.store,\n    DbOwner.store,\n    DbTargetGlobal.store,\n    DbTargetDocument.store\n];\n\n//# sourceMappingURL=indexeddb_schema.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_schema.js\n// module id = 88\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport * as obj from './obj';\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n    if (args.length !== numberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" +\n            formatPlural(numberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n    if (args.length < minNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" +\n            formatPlural(minNumberOfArgs, 'argument') +\n            ', but was called with ' +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" +\n            (maxNumberOfArgs + \" arguments, but was called with \") +\n            formatPlural(args.length, 'argument') +\n            '.');\n    }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n    if (!(value instanceof Array) || value.length < minNumberOfElements) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" +\n            'array with at least ' +\n            (formatPlural(minNumberOfElements, 'element') + \".\"));\n    }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(functionName, type, position, argument) {\n    validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(functionName, type, position, argument) {\n    if (argument !== undefined) {\n        validateArgType(functionName, type, position, argument);\n    }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(functionName, type, optionName, argument) {\n    validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(functionName, type, optionName, argument) {\n    if (argument !== undefined) {\n        validateNamedType(functionName, type, optionName, argument);\n    }\n}\n/** Helper to validate the type of a provided input. */\nfunction validateType(functionName, type, inputName, input) {\n    if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n        var description = valueDescription(input);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" +\n            (\"to be of type \" + type + \", but it was: \" + description));\n    }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        Object.getPrototypeOf(input) === Object.prototype);\n}\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input) {\n    if (input === undefined) {\n        return 'undefined';\n    }\n    else if (input === null) {\n        return 'null';\n    }\n    else if (typeof input === 'string') {\n        if (input.length > 20) {\n            input = input.substring(0, 20) + \"...\";\n        }\n        return JSON.stringify(input);\n    }\n    else if (typeof input === 'number' || typeof input === 'boolean') {\n        return '' + input;\n    }\n    else if (typeof input === 'object') {\n        if (input instanceof Array) {\n            return 'an array';\n        }\n        else {\n            var customObjectName = tryGetCustomObjectType(input);\n            if (customObjectName) {\n                return \"a custom \" + customObjectName + \" object\";\n            }\n            else {\n                return 'an object';\n            }\n        }\n    }\n    else if (typeof input === 'function') {\n        return 'a function';\n    }\n    else {\n        return fail('Unknown wrong type: ' + typeof input);\n    }\n}\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input) {\n    if (input.constructor) {\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n        var results = funcNameRegex.exec(input.constructor.toString());\n        if (results && results.length > 1) {\n            return results[1];\n        }\n    }\n    return null;\n}\n/** Validates the provided argument is defined. */\nexport function validateDefined(functionName, position, argument) {\n    if (argument === undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" +\n            \"argument, but it was undefined.\");\n    }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(functionName, options, optionNames) {\n    obj.forEach(options, function (key, _) {\n        if (optionNames.indexOf(key) < 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" +\n                'Available options: ' +\n                optionNames.join(', '));\n        }\n    });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(functionName, type, position, argument) {\n    var description = valueDescription(argument);\n    return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" +\n        (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\nfunction ordinal(num) {\n    switch (num) {\n        case 1:\n            return 'first';\n        case 2:\n            return 'second';\n        case 3:\n            return 'third';\n        default:\n            return num + 'th';\n    }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num, str) {\n    return num + \" \" + str + (num === 1 ? '' : 's');\n}\n\n//# sourceMappingURL=input_validation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/input_validation.js\n// module id = 89\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport var isInteger = NumberAsAny.isInteger ||\n    (function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    });\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value) {\n    return (isInteger(value) &&\n        value <= MAX_SAFE_INTEGER &&\n        value >= MIN_SAFE_INTEGER);\n}\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value) {\n    if (NumberAsAny.IsNaN) {\n        return NumberAsAny.IsNaN(value);\n    }\n    else {\n        return typeof value === 'number' && isNaN(value);\n    }\n}\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/types.js\n// module id = 90\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\nexport var QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\nexport { QueryData };\n\n//# sourceMappingURL=query_data.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/query_data.js\n// module id = 91\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nvar RemoteEvent = /** @class */ (function () {\n    function RemoteEvent(\n        /**\n         * The snapshot version this event brings us up to, or MIN if not set.\n         */\n        snapshotVersion, \n        /**\n         * A map from target to changes to the target. See TargetChange.\n         */\n        targetChanges, \n        /**\n         * A set of which documents have changed or been deleted, along with the\n         * doc's new values (if not deleted).\n         */\n        documentUpdates) {\n        this.snapshotVersion = snapshotVersion;\n        this.targetChanges = targetChanges;\n        this.documentUpdates = documentUpdates;\n    }\n    RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n        this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n    };\n    RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n        /*\n         * An existence filter mismatch will reset the query and we need to reset\n         * the mapping to contain no documents and an empty resume token.\n         *\n         * Note:\n         *   * The reset mapping is empty, specifically forcing the consumer of the\n         *     change to forget all keys for this targetID;\n         *   * The resume snapshot for this target must be reset\n         *   * The target must be unacked because unwatching and rewatching\n         *     introduces a race for changes.\n         */\n        this.targetChanges[targetId] = {\n            mapping: new ResetMapping(),\n            snapshotVersion: SnapshotVersion.MIN,\n            currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n            resumeToken: emptyByteString()\n        };\n    };\n    return RemoteEvent;\n}());\nexport { RemoteEvent };\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport var CurrentStatusUpdate;\n(function (CurrentStatusUpdate) {\n    /** The current status is not affected and should not be modified. */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n    /** The target must be marked as no longer \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n    /** The target must be marked as \"current\". */\n    CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\nvar EMPTY_KEY_SET = documentKeySet();\nvar ResetMapping = /** @class */ (function () {\n    function ResetMapping() {\n        this.docs = EMPTY_KEY_SET;\n    }\n    Object.defineProperty(ResetMapping.prototype, \"documents\", {\n        get: function () {\n            return this.docs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetMapping.prototype.add = function (key) {\n        this.docs = this.docs.add(key);\n    };\n    ResetMapping.prototype.delete = function (key) {\n        this.docs = this.docs.delete(key);\n    };\n    ResetMapping.prototype.equals = function (other) {\n        return other !== null && this.docs.equals(other.docs);\n    };\n    return ResetMapping;\n}());\nexport { ResetMapping };\nvar UpdateMapping = /** @class */ (function () {\n    function UpdateMapping() {\n        this.addedDocuments = EMPTY_KEY_SET;\n        this.removedDocuments = EMPTY_KEY_SET;\n    }\n    UpdateMapping.prototype.applyToKeySet = function (keys) {\n        var result = keys;\n        this.addedDocuments.forEach(function (key) { return (result = result.add(key)); });\n        this.removedDocuments.forEach(function (key) { return (result = result.delete(key)); });\n        return result;\n    };\n    UpdateMapping.prototype.add = function (key) {\n        this.addedDocuments = this.addedDocuments.add(key);\n        this.removedDocuments = this.removedDocuments.delete(key);\n    };\n    UpdateMapping.prototype.delete = function (key) {\n        this.addedDocuments = this.addedDocuments.delete(key);\n        this.removedDocuments = this.removedDocuments.add(key);\n    };\n    UpdateMapping.prototype.equals = function (other) {\n        return (other !== null &&\n            this.addedDocuments.equals(other.addedDocuments) &&\n            this.removedDocuments.equals(other.removedDocuments));\n    };\n    return UpdateMapping;\n}());\nexport { UpdateMapping };\n\n//# sourceMappingURL=remote_event.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/remote_event.js\n// module id = 92\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet, documentVersionMap } from './collections';\nimport { assert } from '../util/assert';\nimport * as misc from '../util/misc';\nexport var BATCHID_UNKNOWN = -1;\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nvar MutationBatch = /** @class */ (function () {\n    function MutationBatch(batchId, localWriteTime, mutations) {\n        this.batchId = batchId;\n        this.localWriteTime = localWriteTime;\n        this.mutations = mutations;\n    }\n    /**\n     * Applies all the mutations in this MutationBatch to the specified document\n     * to create a new remote document\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     * @param batchResult The result of applying the MutationBatch to the\n     * backend.\n     */\n    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToRemoteDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        var mutationResults = batchResult.mutationResults;\n        assert(mutationResults.length === this.mutations.length, \"Mismatch between mutations length\\n      (\" + this.mutations.length + \") and mutation results length\\n      (\" + mutationResults.length + \").\");\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                var mutationResult = mutationResults[i];\n                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n            }\n        }\n        return maybeDoc;\n    };\n    /**\n     * Computes the local view of a document given all the mutations in this\n     * batch.\n     *\n     * @param docKey The key of the document to apply mutations to.\n     * @param maybeDoc The document to apply mutations to.\n     */\n    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(docKey), \"applyToLocalDocument: key \" + docKey + \" should match maybeDoc key\\n        \" + maybeDoc.key);\n        }\n        for (var i = 0; i < this.mutations.length; i++) {\n            var mutation = this.mutations[i];\n            if (mutation.key.equals(docKey)) {\n                maybeDoc = mutation.applyToLocalView(maybeDoc, this.localWriteTime);\n            }\n        }\n        return maybeDoc;\n    };\n    MutationBatch.prototype.keys = function () {\n        var keySet = documentKeySet();\n        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {\n            var mutation = _a[_i];\n            keySet = keySet.add(mutation.key);\n        }\n        return keySet;\n    };\n    MutationBatch.prototype.equals = function (other) {\n        return (this.batchId === other.batchId &&\n            misc.arrayEquals(this.mutations, other.mutations));\n    };\n    /**\n     * Returns true if this mutation batch has already been removed from the\n     * mutation queue.\n     *\n     * Note that not all implementations of the MutationQueue necessarily use\n     * tombstones as part of their implementation and generally speaking no code\n     * outside the mutation queues should really care about this.\n     */\n    MutationBatch.prototype.isTombstone = function () {\n        return this.mutations.length === 0;\n    };\n    /** Converts this batch into a tombstone */\n    MutationBatch.prototype.toTombstone = function () {\n        return new MutationBatch(this.batchId, this.localWriteTime, []);\n    };\n    return MutationBatch;\n}());\nexport { MutationBatch };\n/** The result of applying a mutation batch to the backend. */\nvar MutationBatchResult = /** @class */ (function () {\n    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, \n        /**\n         * A pre-computed mapping from each mutated document to the resulting\n         * version.\n         */\n        docVersions) {\n        this.batch = batch;\n        this.commitVersion = commitVersion;\n        this.mutationResults = mutationResults;\n        this.streamToken = streamToken;\n        this.docVersions = docVersions;\n    }\n    /**\n     * Creates a new MutationBatchResult for the given batch and results. There\n     * must be one result for each mutation in the batch. This static factory\n     * caches a document=>version mapping (docVersions).\n     */\n    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {\n        assert(batch.mutations.length === results.length, 'Mutations sent ' +\n            batch.mutations.length +\n            ' must equal results received ' +\n            results.length);\n        var versionMap = documentVersionMap();\n        var mutations = batch.mutations;\n        for (var i = 0; i < mutations.length; i++) {\n            var version = results[i].version;\n            if (version === null) {\n                // deletes don't have a version, so we substitute the commitVersion\n                // of the entire batch.\n                version = commitVersion;\n            }\n            versionMap = versionMap.insert(mutations[i].key, version);\n        }\n        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);\n    };\n    return MutationBatchResult;\n}());\nexport { MutationBatchResult };\n\n//# sourceMappingURL=mutation_batch.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/mutation_batch.js\n// module id = 93\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { assert, fail } from '../util/assert';\nimport * as misc from '../util/misc';\nimport { Document, NoDocument } from './document';\nimport { ObjectValue, ServerTimestampValue } from './field_value';\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nvar FieldMask = /** @class */ (function () {\n    function FieldMask(fields) {\n        this.fields = fields;\n        // TODO(dimond): validation of FieldMask\n    }\n    FieldMask.prototype.equals = function (other) {\n        return misc.arrayEquals(this.fields, other.fields);\n    };\n    return FieldMask;\n}());\nexport { FieldMask };\n/** Transforms a value into a server-generated timestamp. */\nvar ServerTimestampTransform = /** @class */ (function () {\n    function ServerTimestampTransform() {\n    }\n    ServerTimestampTransform.prototype.equals = function (other) {\n        return other instanceof ServerTimestampTransform;\n    };\n    ServerTimestampTransform.instance = new ServerTimestampTransform();\n    return ServerTimestampTransform;\n}());\nexport { ServerTimestampTransform };\n/** A field path and the TransformOperation to perform upon it. */\nvar FieldTransform = /** @class */ (function () {\n    function FieldTransform(field, transform) {\n        this.field = field;\n        this.transform = transform;\n    }\n    FieldTransform.prototype.equals = function (other) {\n        return (this.field.equals(other.field) && this.transform.equals(other.transform));\n    };\n    return FieldTransform;\n}());\nexport { FieldTransform };\n/** The result of successfully applying a mutation to the backend. */\nvar MutationResult = /** @class */ (function () {\n    function MutationResult(\n        /**\n         * The version at which the mutation was committed or null for a delete.\n         */\n        version, \n        /**\n         * The resulting fields returned from the backend after a\n         * TransformMutation has been committed. Contains one FieldValue for each\n         * FieldTransform that was in the mutation.\n         *\n         * Will be null if the mutation was not a TransformMutation.\n         */\n        transformResults) {\n        this.version = version;\n        this.transformResults = transformResults;\n    }\n    return MutationResult;\n}());\nexport { MutationResult };\nexport var MutationType;\n(function (MutationType) {\n    MutationType[MutationType[\"Set\"] = 0] = \"Set\";\n    MutationType[MutationType[\"Patch\"] = 1] = \"Patch\";\n    MutationType[MutationType[\"Transform\"] = 2] = \"Transform\";\n    MutationType[MutationType[\"Delete\"] = 3] = \"Delete\";\n})(MutationType || (MutationType = {}));\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nvar Precondition = /** @class */ (function () {\n    function Precondition(updateTime, exists) {\n        this.updateTime = updateTime;\n        this.exists = exists;\n        assert(updateTime === undefined || exists === undefined, 'Precondition can specify \"exists\" or \"updateTime\" but not both');\n    }\n    /** Creates a new Precondition with an exists flag. */\n    Precondition.exists = function (exists) {\n        return new Precondition(undefined, exists);\n    };\n    /** Creates a new Precondition based on a version a document exists at. */\n    Precondition.updateTime = function (version) {\n        return new Precondition(version);\n    };\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\n        /** Returns whether this Precondition is empty. */\n        get: function () {\n            return this.updateTime === undefined && this.exists === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns true if the preconditions is valid for the given document\n     * (or null if no document is available).\n     */\n    Precondition.prototype.isValidFor = function (maybeDoc) {\n        if (this.updateTime !== undefined) {\n            return (maybeDoc instanceof Document && maybeDoc.version.equals(this.updateTime));\n        }\n        else if (this.exists !== undefined) {\n            if (this.exists) {\n                return maybeDoc instanceof Document;\n            }\n            else {\n                return maybeDoc === null || maybeDoc instanceof NoDocument;\n            }\n        }\n        else {\n            assert(this.isNone, 'Precondition should be empty');\n            return true;\n        }\n    };\n    Precondition.prototype.equals = function (other) {\n        return (misc.equals(this.updateTime, other.updateTime) &&\n            this.exists === other.exists);\n    };\n    Precondition.NONE = new Precondition();\n    return Precondition;\n}());\nexport { Precondition };\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also it version.\n * In the case of Set, Patch, and Transform mutations we preserve the existing\n * version. In the case of Delete mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nvar Mutation = /** @class */ (function () {\n    function Mutation() {\n    }\n    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {\n        if (maybeDoc != null) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply a mutation to a document with the same key');\n        }\n    };\n    /**\n     * Returns the version from the given document for use as the result of a\n     * mutation. Mutations are defined to return the version of the base document\n     * only if it is an existing document. Deleted and unknown documents have a\n     * post-mutation version of SnapshotVersion.MIN.\n     */\n    Mutation.getPostMutationVersion = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            return maybeDoc.version;\n        }\n        else {\n            return SnapshotVersion.MIN;\n        }\n    };\n    return Mutation;\n}());\nexport { Mutation };\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nvar SetMutation = /** @class */ (function (_super) {\n    __extends(SetMutation, _super);\n    function SetMutation(key, value, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.value = value;\n        _this.precondition = precondition;\n        _this.type = MutationType.Set;\n        return _this;\n    }\n    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: false\n        });\n    };\n    SetMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        return new Document(this.key, version, this.value, {\n            hasLocalMutations: true\n        });\n    };\n    SetMutation.prototype.equals = function (other) {\n        return (other instanceof SetMutation &&\n            this.key.equals(other.key) &&\n            this.value.equals(other.value) &&\n            this.precondition.equals(other.precondition));\n    };\n    return SetMutation;\n}(Mutation));\nexport { SetMutation };\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nvar PatchMutation = /** @class */ (function (_super) {\n    __extends(PatchMutation, _super);\n    function PatchMutation(key, data, fieldMask, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.data = data;\n        _this.fieldMask = fieldMask;\n        _this.precondition = precondition;\n        _this.type = MutationType.Patch;\n        return _this;\n    }\n    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    PatchMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var version = Mutation.getPostMutationVersion(maybeDoc);\n        var newData = this.patchDocument(maybeDoc);\n        return new Document(this.key, version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    PatchMutation.prototype.equals = function (other) {\n        return (other instanceof PatchMutation &&\n            this.key.equals(other.key) &&\n            this.fieldMask.equals(other.fieldMask) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Patches the data of document if available or creates a new document. Note\n     * that this does not check whether or not the precondition of this patch\n     * holds.\n     */\n    PatchMutation.prototype.patchDocument = function (maybeDoc) {\n        var data;\n        if (maybeDoc instanceof Document) {\n            data = maybeDoc.data;\n        }\n        else {\n            data = ObjectValue.EMPTY;\n        }\n        return this.patchObject(data);\n    };\n    PatchMutation.prototype.patchObject = function (data) {\n        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {\n            var fieldPath = _a[_i];\n            var newValue = this.data.field(fieldPath);\n            if (newValue !== undefined) {\n                data = data.set(fieldPath, newValue);\n            }\n            else {\n                data = data.delete(fieldPath);\n            }\n        }\n        return data;\n    };\n    return PatchMutation;\n}(Mutation));\nexport { PatchMutation };\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nvar TransformMutation = /** @class */ (function (_super) {\n    __extends(TransformMutation, _super);\n    function TransformMutation(key, fieldTransforms) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.fieldTransforms = fieldTransforms;\n        _this.type = MutationType.Transform;\n        // NOTE: We set a precondition of exists: true as a safety-check, since we\n        // always combine TransformMutations with a SetMutation or PatchMutation which\n        // (if successful) should end up with an existing document.\n        _this.precondition = Precondition.exists(true);\n        return _this;\n    }\n    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');\n        var transformResults = mutationResult.transformResults;\n        // TODO(mcg): Relax enforcement of this precondition\n        //\n        // We shouldn't actually enforce the precondition since it already passed on\n        // the backend, but we may not have a local version of the document to\n        // patch, so we use the precondition to prevent incorrectly putting a\n        // partial document into our cache.\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: false\n        });\n    };\n    TransformMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        var doc = this.requireDocument(maybeDoc);\n        var transformResults = this.localTransformResults(localWriteTime);\n        var newData = this.transformObject(doc.data, transformResults);\n        return new Document(this.key, doc.version, newData, {\n            hasLocalMutations: true\n        });\n    };\n    TransformMutation.prototype.equals = function (other) {\n        return (other instanceof TransformMutation &&\n            this.key.equals(other.key) &&\n            misc.arrayEquals(this.fieldTransforms, other.fieldTransforms) &&\n            this.precondition.equals(other.precondition));\n    };\n    /**\n     * Asserts that the given MaybeDocument is actually a Document and verifies\n     * that it matches the key for this mutation. Since we only support\n     * transformations with precondition exists this method is guaranteed to be\n     * safe.\n     */\n    TransformMutation.prototype.requireDocument = function (maybeDoc) {\n        assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);\n        var doc = maybeDoc;\n        assert(doc.key.equals(this.key), 'Can only transform a document with the same key');\n        return doc;\n    };\n    /**\n     * Creates a list of \"transform results\" (a transform result is a field value\n     * representing the result of applying a transform) for use when applying a\n     * TransformMutation locally.\n     *\n     * @param localWriteTime The local time of the transform mutation (used to\n     *     generate ServerTimestampValues).\n     * @return The transform results list.\n     */\n    TransformMutation.prototype.localTransformResults = function (localWriteTime) {\n        var transformResults = [];\n        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {\n            var fieldTransform = _a[_i];\n            var transform = fieldTransform.transform;\n            if (transform instanceof ServerTimestampTransform) {\n                transformResults.push(new ServerTimestampValue(localWriteTime));\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return transformResults;\n    };\n    TransformMutation.prototype.transformObject = function (data, transformResults) {\n        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');\n        for (var i = 0; i < this.fieldTransforms.length; i++) {\n            var fieldTransform = this.fieldTransforms[i];\n            var transform = fieldTransform.transform;\n            var fieldPath = fieldTransform.field;\n            if (transform instanceof ServerTimestampTransform) {\n                data = data.set(fieldPath, transformResults[i]);\n            }\n            else {\n                return fail('Encountered unknown transform: ' + transform);\n            }\n        }\n        return data;\n    };\n    return TransformMutation;\n}(Mutation));\nexport { TransformMutation };\n/** A mutation that deletes the document at the given key. */\nvar DeleteMutation = /** @class */ (function (_super) {\n    __extends(DeleteMutation, _super);\n    function DeleteMutation(key, precondition) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.precondition = precondition;\n        _this.type = MutationType.Delete;\n        return _this;\n    }\n    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {\n        this.verifyKeyMatches(maybeDoc);\n        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');\n        // Unlike applyToLocalView, if we're applying a mutation to a remote\n        // document the server has accepted the mutation so the precondition must\n        // have held.\n        return new NoDocument(this.key, SnapshotVersion.MIN);\n    };\n    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, localWriteTime) {\n        this.verifyKeyMatches(maybeDoc);\n        if (!this.precondition.isValidFor(maybeDoc)) {\n            return maybeDoc;\n        }\n        if (maybeDoc) {\n            assert(maybeDoc.key.equals(this.key), 'Can only apply mutation to document with same key');\n        }\n        return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());\n    };\n    DeleteMutation.prototype.equals = function (other) {\n        return (other instanceof DeleteMutation &&\n            this.key.equals(other.key) &&\n            this.precondition.equals(other.precondition));\n    };\n    return DeleteMutation;\n}(Mutation));\nexport { DeleteMutation };\n\n//# sourceMappingURL=mutation.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/mutation.js\n// module id = 94\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\nexport { SortedSet };\n\n//# sourceMappingURL=sorted_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/sorted_set.js\n// module id = 95\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nexport var ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nexport var SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\nexport { DocumentChangeSet };\n\n//# sourceMappingURL=view_snapshot.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/view_snapshot.js\n// module id = 96\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nvar ReferenceSet = /** @class */ (function () {\n    function ReferenceSet() {\n        // A set of outstanding references to a document sorted by key.\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\n        // A set of outstanding references to a document sorted by target id.\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n        /** Keeps track of keys that have references */\n        this.garbageCollector = null;\n    }\n    /** Returns true if the reference set contains no references. */\n    ReferenceSet.prototype.isEmpty = function () {\n        return this.refsByKey.isEmpty();\n    };\n    /** Adds a reference to the given document key for the given ID. */\n    ReferenceSet.prototype.addReference = function (key, id) {\n        var ref = new DocReference(key, id);\n        this.refsByKey = this.refsByKey.add(ref);\n        this.refsByTarget = this.refsByTarget.add(ref);\n    };\n    /** Add references to the given document keys for the given ID. */\n    ReferenceSet.prototype.addReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.addReference(key, id); });\n    };\n    /**\n     * Removes a reference to the given document key for the given\n     * ID.\n     */\n    ReferenceSet.prototype.removeReference = function (key, id) {\n        this.removeRef(new DocReference(key, id));\n    };\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\n        var _this = this;\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\n    };\n    /**\n     * Clears all references with a given ID. Calls removeRef() for each key\n     * removed.\n     */\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\n        var _this = this;\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            _this.removeRef(ref);\n        });\n    };\n    ReferenceSet.prototype.removeAllReferences = function () {\n        var _this = this;\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\n    };\n    ReferenceSet.prototype.removeRef = function (ref) {\n        this.refsByKey = this.refsByKey.delete(ref);\n        this.refsByTarget = this.refsByTarget.delete(ref);\n        if (this.garbageCollector !== null) {\n            this.garbageCollector.addPotentialGarbageKey(ref.key);\n        }\n    };\n    ReferenceSet.prototype.referencesForId = function (id) {\n        var emptyKey = DocumentKey.EMPTY;\n        var startRef = new DocReference(emptyKey, id);\n        var endRef = new DocReference(emptyKey, id + 1);\n        var keys = documentKeySet();\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n            keys = keys.add(ref.key);\n        });\n        return keys;\n    };\n    ReferenceSet.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    ReferenceSet.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(firstRef !== null && key.equals(firstRef.key));\n    };\n    return ReferenceSet;\n}());\nexport { ReferenceSet };\nvar DocReference = /** @class */ (function () {\n    function DocReference(key, targetOrBatchId) {\n        this.key = key;\n        this.targetOrBatchId = targetOrBatchId;\n    }\n    /** Compare by key then by ID */\n    DocReference.compareByKey = function (left, right) {\n        return (DocumentKey.comparator(left.key, right.key) ||\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\n    };\n    /** Compare by ID then by key */\n    DocReference.compareByTargetId = function (left, right) {\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n            DocumentKey.comparator(left.key, right.key));\n    };\n    return DocReference;\n}());\nexport { DocReference };\n\n//# sourceMappingURL=reference_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/reference_set.js\n// module id = 97\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PersistencePromise } from './persistence_promise';\nvar LOG_TAG = 'SimpleDb';\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nvar SimpleDb = /** @class */ (function () {\n    function SimpleDb(db) {\n        this.db = db;\n    }\n    /** Opens the specified database, creating or upgrading it if necessary. */\n    SimpleDb.openOrCreate = function (name, version, runUpgrade) {\n        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');\n        debug(LOG_TAG, 'Opening database:', name);\n        return new PersistencePromise(function (resolve, reject) {\n            // TODO(mikelehen): Investigate browser compatibility.\n            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n            // suggests IE9 and older WebKit browsers handle upgrade\n            // differently.\n            var request = window.indexedDB.open(name, version);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(new SimpleDb(db));\n            };\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onupgradeneeded = function (event) {\n                debug(LOG_TAG, 'Database \"' + name + '\" requires upgrade from version:', event.oldVersion);\n                // TODO(mikelehen): If/when we need to do an actual data\n                // migration, we'll want to wrap db in a SimpleDb and have the\n                // runUpgrade function return a PersistencePromise, since we'll\n                // likely need to do async reads and writes. For now we're\n                // cheating and just passing the raw IndexedDB in, since\n                // createObjectStore(), etc. are synchronous.\n                var db = event.target.result;\n                runUpgrade(db, event.oldVersion);\n            };\n        }).toPromise();\n    };\n    /** Deletes the specified database. */\n    SimpleDb.delete = function (name) {\n        debug(LOG_TAG, 'Removing database:', name);\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n    };\n    /** Returns true if IndexedDB is available in the current environment. */\n    SimpleDb.isAvailable = function () {\n        if (typeof window === 'undefined' || window.indexedDB == null) {\n            return false;\n        }\n        // We extensively use indexed array values and compound keys,\n        // which IE and Edge do not support. However, they still have indexedDB\n        // defined on the window, so we need to check for them here and make sure\n        // to return that persistence is not enabled for those browsers.\n        // For tracking support of this feature, see here:\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n        // Check the UA string to find out the browser.\n        var ua = window.navigator.userAgent;\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n        // Edge\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n        if (ua.indexOf('MSIE ') > 0 ||\n            ua.indexOf('Trident/') > 0 ||\n            ua.indexOf('Edge/') > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {\n        var transaction = new SimpleDbTransaction(this.db, mode, objectStores);\n        var transactionFnResult = transactionFn(transaction)\n            .catch(function (error) {\n            // Abort the transaction if there was an\n            // error.\n            transaction.abort();\n            return PersistencePromise.reject(error);\n        })\n            .toPromise();\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        return transaction.completionPromise.then(function () { return transactionFnResult; });\n    };\n    SimpleDb.prototype.close = function () {\n        this.db.close();\n    };\n    return SimpleDb;\n}());\nexport { SimpleDb };\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nvar IterationController = /** @class */ (function () {\n    function IterationController(dbCursor) {\n        this.dbCursor = dbCursor;\n        this.shouldStop = false;\n        this.nextKey = null;\n    }\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\n        get: function () {\n            return this.shouldStop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n        get: function () {\n            return this.nextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\n        set: function (value) {\n            this.dbCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This function can be called to stop iteration at any point.\n     */\n    IterationController.prototype.done = function () {\n        this.shouldStop = true;\n    };\n    /**\n     * This function can be called to skip to that next key, which could be\n     * an index or a primary key.\n     */\n    IterationController.prototype.skip = function (key) {\n        this.nextKey = key;\n    };\n    /**\n     * Delete the current cursor value from the object store.\n     *\n     * NOTE: You CANNOT do this with a keysOnly query.\n     */\n    IterationController.prototype.delete = function () {\n        return wrapRequest(this.dbCursor.delete());\n    };\n    return IterationController;\n}());\nexport { IterationController };\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nvar SimpleDbTransaction = /** @class */ (function () {\n    function SimpleDbTransaction(db, mode, objectStoresNames) {\n        var _this = this;\n        this.aborted = false;\n        this.transaction = db.transaction(objectStoresNames, mode);\n        this.completionPromise = new Promise(function (resolve, reject) {\n            // We consider aborting to be \"normal\" and just resolve the promise.\n            // May need to revisit if/when we actually need to abort transactions.\n            _this.transaction.onabort = _this.transaction.oncomplete = function (event) {\n                resolve();\n            };\n            _this.transaction.onerror = function (event) {\n                reject(event.target.error);\n            };\n        });\n    }\n    SimpleDbTransaction.prototype.abort = function () {\n        if (!this.aborted) {\n            debug(LOG_TAG, 'Aborting transaction.');\n            this.aborted = true;\n            this.transaction.abort();\n        }\n    };\n    /**\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n     * operations performed on the SimpleDbStore happen within the context of this\n     * transaction and it cannot be used anymore once the transaction is\n     * completed.\n     *\n     * Note that we can't actually enforce that the KeyType and ValueType are\n     * correct, but they allow type safety through the rest of the consuming code.\n     */\n    SimpleDbTransaction.prototype.store = function (storeName) {\n        var store = this.transaction.objectStore(storeName);\n        assert(!!store, 'Object store not part of transaction: ' + storeName);\n        return new SimpleDbStore(store);\n    };\n    return SimpleDbTransaction;\n}());\nexport { SimpleDbTransaction };\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nvar SimpleDbStore = /** @class */ (function () {\n    function SimpleDbStore(store) {\n        this.store = store;\n    }\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\n        var request;\n        if (value !== undefined) {\n            debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n            request = this.store.put(value, keyOrValue);\n        }\n        else {\n            debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n            request = this.store.put(keyOrValue);\n        }\n        return wrapRequest(request);\n    };\n    /**\n     * Gets the object with the specified key from the specified store, or null\n     * if no object exists with the specified key.\n     *\n     * @key The key of the object to get.\n     * @return The object with the specified key or null if no object exists.\n     */\n    SimpleDbStore.prototype.get = function (key) {\n        var _this = this;\n        var request = this.store.get(key);\n        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.\n        return wrapRequest(request).next(function (result) {\n            // Normalize nonexistence to null.\n            if (result === undefined) {\n                result = null;\n            }\n            debug(LOG_TAG, 'GET', _this.store.name, key, result);\n            return result;\n        });\n    };\n    SimpleDbStore.prototype.delete = function (key) {\n        debug(LOG_TAG, 'DELETE', this.store.name, key);\n        var request = this.store.delete(key);\n        return wrapRequest(request);\n    };\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n        var cursor = this.cursor(this.options(indexOrRange, range));\n        var results = [];\n        return this.iterateCursor(cursor, function (key, value) {\n            results.push(value);\n        }).next(function () {\n            return results;\n        });\n    };\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n        debug(LOG_TAG, 'DELETE ALL', this.store.name);\n        var options = this.options(indexOrRange, range);\n        options.keysOnly = false;\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, function (key, value, control) {\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\n            // calling delete() on an object store with a single key\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n            // however, this requires us *not* to use a keysOnly cursor\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n            // may want to compare the performance of each method.\n            return control.delete();\n        });\n    };\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n        var options;\n        if (!callback) {\n            options = {};\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        var cursor = this.cursor(options);\n        return this.iterateCursor(cursor, callback);\n    };\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n        var results = [];\n        return new PersistencePromise(function (resolve, reject) {\n            cursorRequest.onerror = function (event) {\n                reject(event.target.error);\n            };\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                    resolve();\n                    return;\n                }\n                var controller = new IterationController(cursor);\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\n                if (userResult instanceof PersistencePromise) {\n                    results.push(userResult);\n                }\n                if (controller.isDone) {\n                    resolve();\n                }\n                else if (controller.skipToKey === null) {\n                    cursor.continue();\n                }\n                else {\n                    cursor.continue(controller.skipToKey);\n                }\n            };\n        }).next(function () {\n            return PersistencePromise.waitFor(results);\n        });\n    };\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\n        var indexName = undefined;\n        if (indexOrRange !== undefined) {\n            if (typeof indexOrRange === 'string') {\n                indexName = indexOrRange;\n            }\n            else {\n                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');\n                range = indexOrRange;\n            }\n        }\n        return { index: indexName, range: range };\n    };\n    SimpleDbStore.prototype.cursor = function (options) {\n        var direction = 'next';\n        if (options.reverse) {\n            direction = 'prev';\n        }\n        if (options.index) {\n            var index = this.store.index(options.index);\n            if (options.keysOnly) {\n                return index.openKeyCursor(options.range, direction);\n            }\n            else {\n                return index.openCursor(options.range, direction);\n            }\n        }\n        else {\n            return this.store.openCursor(options.range, direction);\n        }\n    };\n    return SimpleDbStore;\n}());\nexport { SimpleDbStore };\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n    return new PersistencePromise(function (resolve, reject) {\n        request.onsuccess = function (event) {\n            var result = event.target.result;\n            resolve(result);\n        };\n        request.onerror = function (event) {\n            reject(event.target.error);\n        };\n    });\n}\n\n//# sourceMappingURL=simple_db.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/simple_db.js\n// module id = 98\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\n/** The semver (www.semver.org) version of the SDK. */\nexport var SDK_VERSION = firebase.SDK_VERSION;\n\n//# sourceMappingURL=version.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/version.js\n// module id = 99\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\nexport { Blob };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n//# sourceMappingURL=blob.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/blob.js\n// module id = 100\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\nimport { Code, FirestoreError } from './error';\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate(cls, optionalMessage) {\n    function PublicConstructor() {\n        var error = 'This constructor is private.';\n        if (optionalMessage) {\n            error += ' ';\n            error += optionalMessage;\n        }\n        throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n    }\n    // Make sure instanceof checks work and all methods are exposed on the public\n    // constructor\n    PublicConstructor.prototype = cls.prototype;\n    // Copy any static methods/members\n    for (var staticProperty in cls) {\n        if (cls.hasOwnProperty(staticProperty)) {\n            PublicConstructor[staticProperty] = cls[staticProperty];\n        }\n    }\n    return PublicConstructor;\n}\n\n//# sourceMappingURL=api.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/api.js\n// module id = 101\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\nexport { GeoPoint };\n\n//# sourceMappingURL=geo_point.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/geo_point.js\n// module id = 102\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DoubleValue, NullValue, RefValue } from '../model/field_value';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nvar Query = /** @class */ (function () {\n    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\n        if (filters === void 0) { filters = []; }\n        if (limit === void 0) { limit = null; }\n        if (startAt === void 0) { startAt = null; }\n        if (endAt === void 0) { endAt = null; }\n        this.path = path;\n        this.explicitOrderBy = explicitOrderBy;\n        this.filters = filters;\n        this.limit = limit;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.memoizedCanonicalId = null;\n        this.memoizedOrderBy = null;\n        if (this.startAt) {\n            this.assertValidBound(this.startAt);\n        }\n        if (this.endAt) {\n            this.assertValidBound(this.endAt);\n        }\n    }\n    Query.atPath = function (path) {\n        return new Query(path);\n    };\n    Object.defineProperty(Query.prototype, \"orderBy\", {\n        get: function () {\n            if (this.memoizedOrderBy === null) {\n                var inequalityField = this.getInequalityFilterField();\n                var firstOrderByField = this.getFirstOrderByField();\n                if (inequalityField !== null && firstOrderByField === null) {\n                    // In order to implicitly add key ordering, we must also add the\n                    // inequality filter field for it to be a valid query.\n                    // Note that the default inequality field and key ordering is ascending.\n                    if (inequalityField.isKeyField()) {\n                        this.memoizedOrderBy = [KEY_ORDERING_ASC];\n                    }\n                    else {\n                        this.memoizedOrderBy = [\n                            new OrderBy(inequalityField),\n                            KEY_ORDERING_ASC\n                        ];\n                    }\n                }\n                else {\n                    assert(inequalityField === null ||\n                        (firstOrderByField !== null &&\n                            inequalityField.equals(firstOrderByField)), 'First orderBy should match inequality field.');\n                    this.memoizedOrderBy = [];\n                    var foundKeyOrdering = false;\n                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n                        var orderBy = _a[_i];\n                        this.memoizedOrderBy.push(orderBy);\n                        if (orderBy.field.isKeyField()) {\n                            foundKeyOrdering = true;\n                        }\n                    }\n                    if (!foundKeyOrdering) {\n                        // The order of the implicit key ordering always matches the last\n                        // explicit order by\n                        var lastDirection = this.explicitOrderBy.length > 0\n                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n                            : Direction.ASCENDING;\n                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING\n                            ? KEY_ORDERING_ASC\n                            : KEY_ORDERING_DESC);\n                    }\n                }\n            }\n            return this.memoizedOrderBy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Query.prototype.addFilter = function (filter) {\n        assert(this.getInequalityFilterField() == null ||\n            !(filter instanceof RelationFilter) ||\n            !filter.isInequality() ||\n            filter.field.equals(this.getInequalityFilterField()), 'Query must only have one inequality field.');\n        assert(!DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');\n        var newFilters = this.filters.concat([filter]);\n        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.addOrderBy = function (orderBy) {\n        assert(!DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');\n        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var newOrderBy = this.explicitOrderBy.concat([orderBy]);\n        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withLimit = function (limit) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);\n    };\n    Query.prototype.withStartAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);\n    };\n    Query.prototype.withEndAt = function (bound) {\n        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);\n    };\n    // TODO(b/29183165): This is used to get a unique string from a query to, for\n    // example, use as a dictionary key, but the implementation is subject to\n    // collisions. Make it collision-free.\n    Query.prototype.canonicalId = function () {\n        if (this.memoizedCanonicalId === null) {\n            var canonicalId = this.path.canonicalString();\n            canonicalId += '|f:';\n            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n                var filter = _a[_i];\n                canonicalId += filter.canonicalId();\n                canonicalId += ',';\n            }\n            canonicalId += '|ob:';\n            // TODO(dimond): make this collision resistant\n            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {\n                var orderBy = _c[_b];\n                canonicalId += orderBy.canonicalId();\n                canonicalId += ',';\n            }\n            if (!isNullOrUndefined(this.limit)) {\n                canonicalId += '|l:';\n                canonicalId += this.limit;\n            }\n            if (this.startAt) {\n                canonicalId += '|lb:';\n                canonicalId += this.startAt.canonicalId();\n            }\n            if (this.endAt) {\n                canonicalId += '|ub:';\n                canonicalId += this.endAt.canonicalId();\n            }\n            this.memoizedCanonicalId = canonicalId;\n        }\n        return this.memoizedCanonicalId;\n    };\n    Query.prototype.toString = function () {\n        var str = 'Query(' + this.path.canonicalString();\n        if (this.filters.length > 0) {\n            str += \", filters: [\" + this.filters.join(', ') + \"]\";\n        }\n        if (!isNullOrUndefined(this.limit)) {\n            str += ', limit: ' + this.limit;\n        }\n        if (this.explicitOrderBy.length > 0) {\n            str += \", orderBy: [\" + this.explicitOrderBy.join(', ') + \"]\";\n        }\n        if (this.startAt) {\n            str += ', startAt: ' + this.startAt.canonicalId();\n        }\n        if (this.endAt) {\n            str += ', endAt: ' + this.endAt.canonicalId();\n        }\n        return str + ')';\n    };\n    Query.prototype.equals = function (other) {\n        if (this.limit !== other.limit) {\n            return false;\n        }\n        if (this.orderBy.length !== other.orderBy.length) {\n            return false;\n        }\n        for (var i = 0; i < this.orderBy.length; i++) {\n            if (!this.orderBy[i].equals(other.orderBy[i])) {\n                return false;\n            }\n        }\n        if (this.filters.length !== other.filters.length) {\n            return false;\n        }\n        for (var i = 0; i < this.filters.length; i++) {\n            if (!this.filters[i].equals(other.filters[i])) {\n                return false;\n            }\n        }\n        if (!this.path.equals(other.path)) {\n            return false;\n        }\n        if (this.startAt !== null\n            ? !this.startAt.equals(other.startAt)\n            : other.startAt !== null) {\n            return false;\n        }\n        return this.endAt !== null\n            ? this.endAt.equals(other.endAt)\n            : other.endAt === null;\n    };\n    Query.prototype.docComparator = function (d1, d2) {\n        var comparedOnKeyField = false;\n        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            var comp = orderBy.compare(d1, d2);\n            if (comp !== 0)\n                return comp;\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n        }\n        // Assert that we actually compared by key\n        assert(comparedOnKeyField, \"orderBy used that doesn't compare on key field\");\n        return 0;\n    };\n    Query.prototype.matches = function (doc) {\n        return (this.matchesAncestor(doc) &&\n            this.matchesOrderBy(doc) &&\n            this.matchesFilters(doc) &&\n            this.matchesBounds(doc));\n    };\n    Query.prototype.hasLimit = function () {\n        return !isNullOrUndefined(this.limit);\n    };\n    Query.prototype.getFirstOrderByField = function () {\n        return this.explicitOrderBy.length > 0\n            ? this.explicitOrderBy[0].field\n            : null;\n    };\n    Query.prototype.getInequalityFilterField = function () {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (filter instanceof RelationFilter && filter.isInequality()) {\n                return filter.field;\n            }\n        }\n        return null;\n    };\n    Query.prototype.isDocumentQuery = function () {\n        return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;\n    };\n    Query.prototype.matchesAncestor = function (doc) {\n        var docPath = doc.key.path;\n        if (DocumentKey.isDocumentKey(this.path)) {\n            // exact match for document queries\n            return this.path.equals(docPath);\n        }\n        else {\n            // shallow ancestor queries by default\n            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);\n        }\n    };\n    /**\n     * A document must have a value for every ordering clause in order to show up\n     * in the results.\n     */\n    Query.prototype.matchesOrderBy = function (doc) {\n        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            // order by key always matches\n            if (!orderBy.field.isKeyField() &&\n                doc.field(orderBy.field) === undefined) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Query.prototype.matchesFilters = function (doc) {\n        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {\n            var filter = _a[_i];\n            if (!filter.matches(doc)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Makes sure a document is within the bounds, if provided.\n     */\n    Query.prototype.matchesBounds = function (doc) {\n        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n            return false;\n        }\n        return true;\n    };\n    Query.prototype.assertValidBound = function (bound) {\n        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');\n    };\n    return Query;\n}());\nexport { Query };\nvar RelationOp = /** @class */ (function () {\n    function RelationOp(name) {\n        this.name = name;\n    }\n    RelationOp.fromString = function (op) {\n        switch (op) {\n            case '<':\n                return RelationOp.LESS_THAN;\n            case '<=':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case '==':\n                return RelationOp.EQUAL;\n            case '>=':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case '>':\n                return RelationOp.GREATER_THAN;\n            default:\n                return fail('Unknown relation: ' + op);\n        }\n    };\n    RelationOp.prototype.toString = function () {\n        return this.name;\n    };\n    RelationOp.prototype.equals = function (other) {\n        return this.name === other.name;\n    };\n    RelationOp.LESS_THAN = new RelationOp('<');\n    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');\n    RelationOp.EQUAL = new RelationOp('==');\n    RelationOp.GREATER_THAN = new RelationOp('>');\n    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');\n    return RelationOp;\n}());\nexport { RelationOp };\nvar RelationFilter = /** @class */ (function () {\n    function RelationFilter(field, op, value) {\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    RelationFilter.prototype.matches = function (doc) {\n        if (this.field.isKeyField()) {\n            assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');\n            var refValue = this.value;\n            var comparison = DocumentKey.comparator(doc.key, refValue.key);\n            return this.matchesComparison(comparison);\n        }\n        else {\n            var val = doc.field(this.field);\n            return val !== undefined && this.matchesValue(val);\n        }\n    };\n    RelationFilter.prototype.matchesValue = function (value) {\n        // Only compare types with matching backend order (such as double and int).\n        if (this.value.typeOrder !== value.typeOrder) {\n            return false;\n        }\n        return this.matchesComparison(value.compareTo(this.value));\n    };\n    RelationFilter.prototype.matchesComparison = function (comparison) {\n        switch (this.op) {\n            case RelationOp.LESS_THAN:\n                return comparison < 0;\n            case RelationOp.LESS_THAN_OR_EQUAL:\n                return comparison <= 0;\n            case RelationOp.EQUAL:\n                return comparison === 0;\n            case RelationOp.GREATER_THAN:\n                return comparison > 0;\n            case RelationOp.GREATER_THAN_OR_EQUAL:\n                return comparison >= 0;\n            default:\n                return fail('Unknown relation op' + this.op);\n        }\n    };\n    RelationFilter.prototype.isInequality = function () {\n        return this.op !== RelationOp.EQUAL;\n    };\n    RelationFilter.prototype.canonicalId = function () {\n        // TODO(b/29183165): Technically, this won't be unique if two values have\n        // the same description, such as the int 3 and the string \"3\". So we should\n        // add the types in here somehow, too.\n        return (this.field.canonicalString() + this.op.toString() + this.value.toString());\n    };\n    RelationFilter.prototype.equals = function (other) {\n        if (other instanceof RelationFilter) {\n            return (this.op.equals(other.op) &&\n                this.field.equals(other.field) &&\n                this.value.equals(other.value));\n        }\n        else {\n            return false;\n        }\n    };\n    RelationFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" \" + this.op + \" \" + this.value.value();\n    };\n    return RelationFilter;\n}());\nexport { RelationFilter };\n/**\n * Filter that matches 'null' values.\n */\nvar NullFilter = /** @class */ (function () {\n    function NullFilter(field) {\n        this.field = field;\n    }\n    NullFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field);\n        return val !== undefined && val.value() === null;\n    };\n    NullFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS null';\n    };\n    NullFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS null\";\n    };\n    NullFilter.prototype.equals = function (other) {\n        if (other instanceof NullFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NullFilter;\n}());\nexport { NullFilter };\n/**\n * Filter that matches 'NaN' values.\n */\nvar NanFilter = /** @class */ (function () {\n    function NanFilter(field) {\n        this.field = field;\n    }\n    NanFilter.prototype.matches = function (doc) {\n        var val = doc.field(this.field).value();\n        return typeof val === 'number' && isNaN(val);\n    };\n    NanFilter.prototype.canonicalId = function () {\n        return this.field.canonicalString() + ' IS NaN';\n    };\n    NanFilter.prototype.toString = function () {\n        return this.field.canonicalString() + \" IS NaN\";\n    };\n    NanFilter.prototype.equals = function (other) {\n        if (other instanceof NanFilter) {\n            return this.field.equals(other.field);\n        }\n        else {\n            return false;\n        }\n    };\n    return NanFilter;\n}());\nexport { NanFilter };\n/**\n * Creates a filter based on the provided arguments.\n */\nexport function fieldFilter(field, op, value) {\n    if (value.equals(NullValue.INSTANCE)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on null.');\n        }\n        return new NullFilter(field);\n    }\n    else if (value.equals(DoubleValue.NAN)) {\n        if (op !== RelationOp.EQUAL) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals ' + 'comparisons on NaN.');\n        }\n        return new NanFilter(field);\n    }\n    else {\n        return new RelationFilter(field, op, value);\n    }\n}\n/**\n * The direction of sorting in an order by.\n */\nvar Direction = /** @class */ (function () {\n    function Direction(name) {\n        this.name = name;\n    }\n    Direction.prototype.toString = function () {\n        return this.name;\n    };\n    Direction.ASCENDING = new Direction('asc');\n    Direction.DESCENDING = new Direction('desc');\n    return Direction;\n}());\nexport { Direction };\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nvar Bound = /** @class */ (function () {\n    function Bound(position, before) {\n        this.position = position;\n        this.before = before;\n    }\n    Bound.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        var canonicalId = this.before ? 'b:' : 'a:';\n        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {\n            var component = _a[_i];\n            canonicalId += component.toString();\n        }\n        return canonicalId;\n    };\n    /**\n     * Returns true if a document sorts before a bound using the provided sort\n     * order.\n     */\n    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {\n        assert(this.position.length <= orderBy.length, \"Bound has more components than query's orderBy\");\n        var comparison = 0;\n        for (var i = 0; i < this.position.length; i++) {\n            var orderByComponent = orderBy[i];\n            var component = this.position[i];\n            if (orderByComponent.field.isKeyField()) {\n                assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');\n                comparison = DocumentKey.comparator(component.key, doc.key);\n            }\n            else {\n                var docValue = doc.field(orderByComponent.field);\n                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');\n                comparison = component.compareTo(docValue);\n            }\n            if (orderByComponent.dir === Direction.DESCENDING) {\n                comparison = comparison * -1;\n            }\n            if (comparison !== 0) {\n                break;\n            }\n        }\n        return this.before ? comparison <= 0 : comparison < 0;\n    };\n    Bound.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        if (this.before !== other.before ||\n            this.position.length !== other.position.length) {\n            return false;\n        }\n        for (var i = 0; i < this.position.length; i++) {\n            var thisPosition = this.position[i];\n            var otherPosition = other.position[i];\n            return thisPosition.equals(otherPosition);\n        }\n        return true;\n    };\n    return Bound;\n}());\nexport { Bound };\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(field, dir) {\n        this.field = field;\n        if (dir === undefined) {\n            dir = Direction.ASCENDING;\n        }\n        this.dir = dir;\n        this.isKeyOrderBy = field.isKeyField();\n    }\n    OrderBy.prototype.compare = function (d1, d2) {\n        var comparison = this.isKeyOrderBy\n            ? Document.compareByKey(d1, d2)\n            : Document.compareByField(this.field, d1, d2);\n        switch (this.dir) {\n            case Direction.ASCENDING:\n                return comparison;\n            case Direction.DESCENDING:\n                return -1 * comparison;\n            default:\n                return fail('Unknown direction: ' + this.dir);\n        }\n    };\n    OrderBy.prototype.canonicalId = function () {\n        // TODO(b/29183165): Make this collision robust.\n        return this.field.canonicalString() + this.dir.toString();\n    };\n    OrderBy.prototype.toString = function () {\n        return this.field.canonicalString() + \" (\" + this.dir + \")\";\n    };\n    OrderBy.prototype.equals = function (other) {\n        return this.dir === other.dir && this.field.equals(other.field);\n    };\n    return OrderBy;\n}());\nexport { OrderBy };\nvar KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);\nvar KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);\n\n//# sourceMappingURL=query.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/query.js\n// module id = 103\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nvar RpcCode;\n(function (RpcCode) {\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\nexport function isPermanentError(code) {\n    switch (code) {\n        case Code.OK:\n            return fail('Treated status OK as error');\n        case Code.CANCELLED:\n        case Code.UNKNOWN:\n        case Code.DEADLINE_EXCEEDED:\n        case Code.RESOURCE_EXHAUSTED:\n        case Code.INTERNAL:\n        case Code.UNAVAILABLE:\n        // Unauthenticated means something went wrong with our token and we need\n        // to retry with new credentials which will happen automatically.\n        // TODO(b/37325376): Give up after second unauthenticated error.\n        case Code.UNAUTHENTICATED:\n            return false;\n        case Code.INVALID_ARGUMENT:\n        case Code.NOT_FOUND:\n        case Code.ALREADY_EXISTS:\n        case Code.PERMISSION_DENIED:\n        case Code.FAILED_PRECONDITION:\n        // Aborted might be retried in some scenarios, but that is dependant on\n        // the context and should handled individually by the calling code.\n        // See https://cloud.google.com/apis/design/errors.\n        case Code.ABORTED:\n        case Code.OUT_OF_RANGE:\n        case Code.UNIMPLEMENTED:\n        case Code.DATA_LOSS:\n            return true;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status) {\n    // tslint:disable-next-line:no-any lookup by string\n    var code = RpcCode[status];\n    if (code === undefined) {\n        return undefined;\n    }\n    return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code) {\n    if (code === undefined) {\n        // This shouldn't normally happen, but in certain error cases (like trying\n        // to send invalid proto messages) we may get an error with no GRPC code.\n        log.error('GRPC error has no .code');\n        return Code.UNKNOWN;\n    }\n    switch (code) {\n        case RpcCode.OK:\n            return Code.OK;\n        case RpcCode.CANCELLED:\n            return Code.CANCELLED;\n        case RpcCode.UNKNOWN:\n            return Code.UNKNOWN;\n        case RpcCode.DEADLINE_EXCEEDED:\n            return Code.DEADLINE_EXCEEDED;\n        case RpcCode.RESOURCE_EXHAUSTED:\n            return Code.RESOURCE_EXHAUSTED;\n        case RpcCode.INTERNAL:\n            return Code.INTERNAL;\n        case RpcCode.UNAVAILABLE:\n            return Code.UNAVAILABLE;\n        case RpcCode.UNAUTHENTICATED:\n            return Code.UNAUTHENTICATED;\n        case RpcCode.INVALID_ARGUMENT:\n            return Code.INVALID_ARGUMENT;\n        case RpcCode.NOT_FOUND:\n            return Code.NOT_FOUND;\n        case RpcCode.ALREADY_EXISTS:\n            return Code.ALREADY_EXISTS;\n        case RpcCode.PERMISSION_DENIED:\n            return Code.PERMISSION_DENIED;\n        case RpcCode.FAILED_PRECONDITION:\n            return Code.FAILED_PRECONDITION;\n        case RpcCode.ABORTED:\n            return Code.ABORTED;\n        case RpcCode.OUT_OF_RANGE:\n            return Code.OUT_OF_RANGE;\n        case RpcCode.UNIMPLEMENTED:\n            return Code.UNIMPLEMENTED;\n        case RpcCode.DATA_LOSS:\n            return Code.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code) {\n    if (code === undefined) {\n        return RpcCode.OK;\n    }\n    switch (code) {\n        case Code.OK:\n            return RpcCode.OK;\n        case Code.CANCELLED:\n            return RpcCode.CANCELLED;\n        case Code.UNKNOWN:\n            return RpcCode.UNKNOWN;\n        case Code.DEADLINE_EXCEEDED:\n            return RpcCode.DEADLINE_EXCEEDED;\n        case Code.RESOURCE_EXHAUSTED:\n            return RpcCode.RESOURCE_EXHAUSTED;\n        case Code.INTERNAL:\n            return RpcCode.INTERNAL;\n        case Code.UNAVAILABLE:\n            return RpcCode.UNAVAILABLE;\n        case Code.UNAUTHENTICATED:\n            return RpcCode.UNAUTHENTICATED;\n        case Code.INVALID_ARGUMENT:\n            return RpcCode.INVALID_ARGUMENT;\n        case Code.NOT_FOUND:\n            return RpcCode.NOT_FOUND;\n        case Code.ALREADY_EXISTS:\n            return RpcCode.ALREADY_EXISTS;\n        case Code.PERMISSION_DENIED:\n            return RpcCode.PERMISSION_DENIED;\n        case Code.FAILED_PRECONDITION:\n            return RpcCode.FAILED_PRECONDITION;\n        case Code.ABORTED:\n            return RpcCode.ABORTED;\n        case Code.OUT_OF_RANGE:\n            return RpcCode.OUT_OF_RANGE;\n        case Code.UNIMPLEMENTED:\n            return RpcCode.UNIMPLEMENTED;\n        case Code.DATA_LOSS:\n            return RpcCode.DATA_LOSS;\n        default:\n            return fail('Unknown status code: ' + code);\n    }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status) {\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    //\n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n    switch (status) {\n        case 200:// OK\n            return Code.OK;\n        case 400:// Bad Request\n            return Code.INVALID_ARGUMENT;\n        // Other possibilities based on the forward mapping\n        // return Code.FAILED_PRECONDITION;\n        // return Code.OUT_OF_RANGE;\n        case 401:// Unauthorized\n            return Code.UNAUTHENTICATED;\n        case 403:// Forbidden\n            return Code.PERMISSION_DENIED;\n        case 404:// Not Found\n            return Code.NOT_FOUND;\n        case 409:// Conflict\n            return Code.ABORTED;\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n        case 416:// Range Not Satisfiable\n            return Code.OUT_OF_RANGE;\n        case 429:// Too Many Requests\n            return Code.RESOURCE_EXHAUSTED;\n        case 499:// Client Closed Request\n            return Code.CANCELLED;\n        case 500:// Internal Server Error\n            return Code.UNKNOWN;\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n        case 501:// Unimplemented\n            return Code.UNIMPLEMENTED;\n        case 503:// Service Unavailable\n            return Code.UNAVAILABLE;\n        case 504:// Gateway Timeout\n            return Code.DEADLINE_EXCEEDED;\n        default:\n            if (status >= 200 && status < 300)\n                return Code.OK;\n            if (status >= 400 && status < 500)\n                return Code.FAILED_PRECONDITION;\n            if (status >= 500 && status < 600)\n                return Code.INTERNAL;\n            return Code.UNKNOWN;\n    }\n}\n\n//# sourceMappingURL=rpc_error.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/rpc_error.js\n// module id = 104\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new InternalFieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n//# sourceMappingURL=field_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/field_path.js\n// module id = 105\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as objUtil from './obj';\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nvar ObjectMap = /** @class */ (function () {\n    function ObjectMap(mapKeyFn) {\n        this.mapKeyFn = mapKeyFn;\n        /**\n         * The inner map for a key -> value pair. Due to the possibility of\n         * collisions we keep a list of entries that we do a linear search through\n         * to find an actual match. Note that collisions should be rare, so we still\n         * expect near constant time lookups in practice.\n         */\n        this.inner = {};\n    }\n    /** Get a value for this key, or undefined if it does not exist. */\n    ObjectMap.prototype.get = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return undefined;\n        }\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];\n            if (otherKey.equals(key)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    ObjectMap.prototype.has = function (key) {\n        return this.get(key) !== undefined;\n    };\n    /** Put this key and value in the map. */\n    ObjectMap.prototype.set = function (key, value) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            this.inner[id] = [[key, value]];\n            return;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                matches[i] = [key, value];\n                return;\n            }\n        }\n        matches.push([key, value]);\n    };\n    /**\n     * Remove this key from the map. Returns a boolean if anything was deleted.\n     */\n    ObjectMap.prototype.delete = function (key) {\n        var id = this.mapKeyFn(key);\n        var matches = this.inner[id];\n        if (matches === undefined) {\n            return false;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i][0].equals(key)) {\n                if (matches.length === 1) {\n                    delete this.inner[id];\n                }\n                else {\n                    matches.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    ObjectMap.prototype.forEach = function (fn) {\n        objUtil.forEach(this.inner, function (_, entries) {\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                fn(k, v);\n            }\n        });\n    };\n    ObjectMap.prototype.isEmpty = function () {\n        return objUtil.isEmpty(this.inner);\n    };\n    return ObjectMap;\n}());\nexport { ObjectMap };\n\n//# sourceMappingURL=obj_map.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/obj_map.js\n// module id = 106\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encode(path) {\n    var result = '';\n    for (var i = 0; i < path.length; i++) {\n        if (result.length > 0) {\n            result = encodeSeparator(result);\n        }\n        result = encodeSegment(path.get(i), result);\n    }\n    return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n    var result = resultBuf;\n    var length = segment.length;\n    for (var i = 0; i < length; i++) {\n        var c = segment.charAt(i);\n        switch (c) {\n            case '\\0':\n                result += escapeChar + encodedNul;\n                break;\n            case escapeChar:\n                result += escapeChar + encodedEscape;\n                break;\n            default:\n                result += c;\n        }\n    }\n    return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n    return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decode(path) {\n    // Event the empty path must encode as a path of at least length 2. A path\n    // with exactly 2 must be the empty path.\n    var length = path.length;\n    assert(length >= 2, 'Invalid path ' + path);\n    if (length === 2) {\n        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');\n        return ResourcePath.EMPTY_PATH;\n    }\n    // Escape characters cannot exist past the second-to-last position in the\n    // source value.\n    var lastReasonableEscapeIndex = length - 2;\n    var segments = [];\n    var segmentBuilder = '';\n    for (var start = 0; start < length;) {\n        // The last two characters of a valid encoded path must be a separator, so\n        // there must be an end to this segment.\n        var end = path.indexOf(escapeChar, start);\n        if (end < 0 || end > lastReasonableEscapeIndex) {\n            fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        var next = path.charAt(end + 1);\n        switch (next) {\n            case encodedSeparatorChar:\n                var currentPiece = path.substring(start, end);\n                var segment = void 0;\n                if (segmentBuilder.length === 0) {\n                    // Avoid copying for the common case of a segment that excludes \\0\n                    // and \\001\n                    segment = currentPiece;\n                }\n                else {\n                    segmentBuilder += currentPiece;\n                    segment = segmentBuilder;\n                    segmentBuilder = '';\n                }\n                segments.push(segment);\n                break;\n            case encodedNul:\n                segmentBuilder += path.substring(start, end);\n                segmentBuilder += '\\0';\n                break;\n            case encodedEscape:\n                // The escape character can be used in the output to encode itself.\n                segmentBuilder += path.substring(start, end + 1);\n                break;\n            default:\n                fail('Invalid encoded resource path: \"' + path + '\"');\n        }\n        start = end + 2;\n    }\n    return new ResourcePath(segments);\n}\n/**\n * Computes the prefix successor of the given path, computed by encode above.\n * A prefix successor is the first key that cannot be prefixed by the given\n * path. It's useful for defining the end of a prefix scan such that all keys\n * in the scan have the same prefix.\n *\n * Note that this is not a general prefix successor implementation, which is\n * tricky to get right with Strings, given that they encode down to UTF-8.\n * Instead this relies on the fact that all paths encoded by this class are\n * always terminated with a separator, and so a successor can always be\n * cheaply computed by incrementing the last character of the path.\n */\nexport function prefixSuccessor(path) {\n    var c = path.charCodeAt(path.length - 1);\n    // TODO(mcg): this really should be a general thing, but not worth it right\n    // now\n    assert(c === 1, 'successor may only operate on paths generated by encode');\n    return path.substring(0, path.length - 1) + String.fromCharCode(c + 1);\n}\n\n//# sourceMappingURL=encoded_resource_path.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/encoded_resource_path.js\n// module id = 107\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n//# sourceMappingURL=promise.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/promise.js\n// module id = 108\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Bound, Direction, NanFilter, NullFilter, OrderBy, Query, RelationFilter, RelationOp } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { QueryPurpose } from '../local/query_data';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport * as fieldValue from '../model/field_value';\nimport { DeleteMutation, FieldMask, FieldTransform, MutationResult, PatchMutation, Precondition, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as obj from '../util/obj';\nimport * as typeUtils from '../util/types';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode, mapRpcCodeFromCode } from './rpc_error';\nimport { DocumentWatchChange, ExistenceFilterChange, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar DIRECTIONS = (function () {\n    var dirs = {};\n    dirs[Direction.ASCENDING.name] = 'ASCENDING';\n    dirs[Direction.DESCENDING.name] = 'DESCENDING';\n    return dirs;\n})();\nvar OPERATORS = (function () {\n    var ops = {};\n    ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';\n    ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';\n    ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';\n    ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';\n    ops[RelationOp.EQUAL.name] = 'EQUAL';\n    return ops;\n})();\nfunction assertPresent(value, description) {\n    assert(!typeUtils.isNullOrUndefined(value), description + ' is missing');\n}\nfunction parseInt64(value) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    if (typeof value === 'number') {\n        return value;\n    }\n    else if (typeof value === 'string') {\n        return parseInt(value, 10);\n    }\n    else {\n        return fail(\"can't parse \" + value);\n    }\n}\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nvar JsonProtoSerializer = /** @class */ (function () {\n    function JsonProtoSerializer(databaseId, options) {\n        this.databaseId = databaseId;\n        this.options = options;\n    }\n    JsonProtoSerializer.prototype.emptyByteString = function () {\n        if (this.options.useProto3Json) {\n            return '';\n        }\n        else {\n            return new Uint8Array(0);\n        }\n    };\n    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {\n        // byteStrings can be either string or UInt8Array, but the typings say\n        // it's always a string. Cast as string to avoid type check failing\n        return byteString;\n    };\n    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {\n        var code = status.code === undefined\n            ? Code.UNKNOWN\n            : mapCodeFromRpcCode(status.code);\n        return new FirestoreError(code, status.message || '');\n    };\n    /**\n     * Returns a value for a number (or undefined) that's appropriate to put into\n     * a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be. But GRPC actually\n     * expects a { value: <number> } struct.\n     */\n    JsonProtoSerializer.prototype.toInt32Value = function (val) {\n        if (!typeUtils.isNullOrUndefined(val)) {\n            return { value: val };\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Returns a number (or null) from a google.protobuf.Int32Value proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as accepting \"number\" because that's what\n     * our generated proto interfaces say Int32Value must be, but it actually\n     * accepts { value: number } to match our serialization in toInt32Value().\n     */\n    JsonProtoSerializer.prototype.fromInt32Value = function (val) {\n        var result;\n        if (typeof val === 'object') {\n            result = val.value;\n        }\n        else {\n            // We accept raw numbers (without the {value: ... } wrapper) for\n            // compatibility with legacy persisted data.\n            result = val;\n        }\n        return typeUtils.isNullOrUndefined(result) ? null : result;\n    };\n    /**\n     * Returns a value for a Date that's appropriate to put into a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say dates must be. But it's easier and safer\n     * to actually return a Timestamp proto.\n     */\n    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {\n        return {\n            seconds: timestamp.seconds,\n            nanos: timestamp.nanos\n            // tslint:disable-next-line:no-any\n        };\n    };\n    JsonProtoSerializer.prototype.fromTimestamp = function (date) {\n        // The json interface (for the browser) will return an iso timestamp string,\n        // while the proto js library (for node) will return a\n        // google.protobuf.Timestamp instance.\n        if (typeof date === 'string') {\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(this.options.useProto3Json,\n            //   'The timestamp string format requires Proto3.');\n            return Timestamp.fromISOString(date);\n        }\n        else {\n            assert(!!date, 'Cannot deserialize null or undefined timestamp.');\n            // TODO(b/37282237): Use strings for Proto3 timestamps\n            // assert(!this.options.useProto3Json,\n            //   'The timestamp instance format requires Proto JS.');\n            var seconds = parseInt64(date.seconds || '0');\n            var nanos = date.nanos || 0;\n            return new Timestamp(seconds, nanos);\n        }\n    };\n    /**\n     * Returns a value for bytes that's appropriate to put in a proto.\n     * DO NOT USE THIS FOR ANYTHING ELSE.\n     * This method cheats. It's typed as returning \"string\" because that's what\n     * our generated proto interfaces say bytes must be. But it should return\n     * an Uint8Array in Node.\n     */\n    JsonProtoSerializer.prototype.toBytes = function (bytes) {\n        if (this.options.useProto3Json) {\n            return bytes.toBase64();\n        }\n        else {\n            // The typings say it's a string, but it needs to be a Uint8Array in Node.\n            return this.unsafeCastProtoByteString(bytes.toUint8Array());\n        }\n    };\n    /**\n     * Parse the blob from the protos into the internal Blob class. Note that the\n     * typings assume all blobs are strings, but they are actually Uint8Arrays\n     * on Node.\n     */\n    JsonProtoSerializer.prototype.fromBlob = function (blob) {\n        if (typeof blob === 'string') {\n            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');\n            return Blob.fromBase64String(blob);\n        }\n        else {\n            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');\n            return Blob.fromUint8Array(blob);\n        }\n    };\n    JsonProtoSerializer.prototype.toVersion = function (version) {\n        return this.toTimestamp(version.toTimestamp());\n    };\n    JsonProtoSerializer.prototype.fromVersion = function (version) {\n        assert(!!version, \"Trying to deserialize version that isn't set\");\n        return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n    };\n    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {\n        return this.fullyQualifiedPrefixPath(databaseId)\n            .child('documents')\n            .child(path)\n            .canonicalString();\n    };\n    JsonProtoSerializer.prototype.fromResourceName = function (name) {\n        var resource = ResourcePath.fromString(name);\n        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());\n        return resource;\n    };\n    JsonProtoSerializer.prototype.toName = function (key) {\n        return this.toResourceName(this.databaseId, key.path);\n    };\n    JsonProtoSerializer.prototype.fromName = function (name) {\n        var resource = this.fromResourceName(name);\n        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +\n            resource.get(1) +\n            ' vs ' +\n            this.databaseId.projectId);\n        assert((!resource.get(3) && !this.databaseId.database) ||\n            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +\n            resource.get(3) +\n            ' vs ' +\n            this.databaseId.database);\n        return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n    };\n    JsonProtoSerializer.prototype.toQueryPath = function (path) {\n        if (path.length === 0) {\n            // If the path is empty, the backend requires we leave off the /documents\n            // at the end.\n            return this.encodedDatabaseId;\n        }\n        return this.toResourceName(this.databaseId, path);\n    };\n    JsonProtoSerializer.prototype.fromQueryPath = function (name) {\n        var resourceName = this.fromResourceName(name);\n        if (resourceName.length === 4) {\n            return ResourcePath.EMPTY_PATH;\n        }\n        return this.extractLocalPathFromResourceName(resourceName);\n    };\n    Object.defineProperty(JsonProtoSerializer.prototype, \"encodedDatabaseId\", {\n        get: function () {\n            var path = new ResourcePath([\n                'projects',\n                this.databaseId.projectId,\n                'databases',\n                this.databaseId.database\n            ]);\n            return path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {\n        return new ResourcePath([\n            'projects',\n            databaseId.projectId,\n            'databases',\n            databaseId.database\n        ]);\n    };\n    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {\n        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());\n        return resourceName.popFirst(5);\n    };\n    JsonProtoSerializer.prototype.isValidResourceName = function (path) {\n        // Resource names have at least 4 components (project ID, database ID)\n        return (path.length >= 4 &&\n            path.get(0) === 'projects' &&\n            path.get(2) === 'databases');\n    };\n    JsonProtoSerializer.prototype.toValue = function (val) {\n        if (val instanceof fieldValue.NullValue) {\n            return { nullValue: 'NULL_VALUE' };\n        }\n        else if (val instanceof fieldValue.BooleanValue) {\n            return { booleanValue: val.value() };\n        }\n        else if (val instanceof fieldValue.IntegerValue) {\n            return { integerValue: '' + val.value() };\n        }\n        else if (val instanceof fieldValue.DoubleValue) {\n            var doubleValue = val.value();\n            if (this.options.useProto3Json) {\n                // Proto 3 let's us encode NaN and Infinity as string values as\n                // expected by the backend. This is currently not checked by our unit\n                // tests because they rely on protobuf.js.\n                if (isNaN(doubleValue)) {\n                    return { doubleValue: 'NaN' };\n                }\n                else if (doubleValue === Infinity) {\n                    return { doubleValue: 'Infinity' };\n                }\n                else if (doubleValue === -Infinity) {\n                    return { doubleValue: '-Infinity' };\n                }\n            }\n            return { doubleValue: val.value() };\n        }\n        else if (val instanceof fieldValue.StringValue) {\n            return { stringValue: val.value() };\n        }\n        else if (val instanceof fieldValue.ObjectValue) {\n            return { mapValue: this.toMapValue(val) };\n        }\n        else if (val instanceof fieldValue.ArrayValue) {\n            return { arrayValue: this.toArrayValue(val) };\n        }\n        else if (val instanceof fieldValue.TimestampValue) {\n            return {\n                timestampValue: this.toTimestamp(val.internalValue)\n            };\n        }\n        else if (val instanceof fieldValue.GeoPointValue) {\n            return {\n                geoPointValue: {\n                    latitude: val.value().latitude,\n                    longitude: val.value().longitude\n                }\n            };\n        }\n        else if (val instanceof fieldValue.BlobValue) {\n            return {\n                bytesValue: this.toBytes(val.value())\n            };\n        }\n        else if (val instanceof fieldValue.RefValue) {\n            return {\n                referenceValue: this.toResourceName(val.databaseId, val.key.path)\n            };\n        }\n        else {\n            return fail('Unknown FieldValue ' + JSON.stringify(val));\n        }\n    };\n    JsonProtoSerializer.prototype.fromValue = function (obj) {\n        var _this = this;\n        // tslint:disable-next-line:no-any\n        var type = obj['value_type'];\n        if (hasTag(obj, type, 'nullValue')) {\n            return fieldValue.NullValue.INSTANCE;\n        }\n        else if (hasTag(obj, type, 'booleanValue')) {\n            return fieldValue.BooleanValue.of(obj.booleanValue);\n        }\n        else if (hasTag(obj, type, 'integerValue')) {\n            return new fieldValue.IntegerValue(parseInt64(obj.integerValue));\n        }\n        else if (hasTag(obj, type, 'doubleValue')) {\n            if (this.options.useProto3Json) {\n                // Proto 3 uses the string values 'NaN' and 'Infinity'.\n                if (obj.doubleValue === 'NaN') {\n                    return fieldValue.DoubleValue.NAN;\n                }\n                else if (obj.doubleValue === 'Infinity') {\n                    return fieldValue.DoubleValue.POSITIVE_INFINITY;\n                }\n                else if (obj.doubleValue === '-Infinity') {\n                    return fieldValue.DoubleValue.NEGATIVE_INFINITY;\n                }\n            }\n            return new fieldValue.DoubleValue(obj.doubleValue);\n        }\n        else if (hasTag(obj, type, 'stringValue')) {\n            return new fieldValue.StringValue(obj.stringValue);\n        }\n        else if (hasTag(obj, type, 'mapValue')) {\n            return this.fromFields(obj.mapValue.fields || {});\n        }\n        else if (hasTag(obj, type, 'arrayValue')) {\n            // \"values\" is not present if the array is empty\n            assertPresent(obj.arrayValue, 'arrayValue');\n            var values = obj.arrayValue.values || [];\n            return new fieldValue.ArrayValue(values.map(function (v) { return _this.fromValue(v); }));\n        }\n        else if (hasTag(obj, type, 'timestampValue')) {\n            assertPresent(obj.timestampValue, 'timestampValue');\n            return new fieldValue.TimestampValue(this.fromTimestamp(obj.timestampValue));\n        }\n        else if (hasTag(obj, type, 'geoPointValue')) {\n            assertPresent(obj.geoPointValue, 'geoPointValue');\n            var latitude = obj.geoPointValue.latitude || 0;\n            var longitude = obj.geoPointValue.longitude || 0;\n            return new fieldValue.GeoPointValue(new GeoPoint(latitude, longitude));\n        }\n        else if (hasTag(obj, type, 'bytesValue')) {\n            assertPresent(obj.bytesValue, 'bytesValue');\n            var blob = this.fromBlob(obj.bytesValue);\n            return new fieldValue.BlobValue(blob);\n        }\n        else if (hasTag(obj, type, 'referenceValue')) {\n            assertPresent(obj.referenceValue, 'referenceValue');\n            var resourceName = this.fromResourceName(obj.referenceValue);\n            var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));\n            var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));\n            return new fieldValue.RefValue(dbId, key);\n        }\n        else {\n            return fail('Unknown Value proto ' + JSON.stringify(obj));\n        }\n    };\n    /** Creates an api.Document from key and fields (but no create/update time) */\n    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {\n        return {\n            name: this.toName(key),\n            fields: this.toFields(fields)\n        };\n    };\n    JsonProtoSerializer.prototype.toDocument = function (document) {\n        assert(!document.hasLocalMutations, \"Can't serialize documents with mutations.\");\n        return {\n            name: this.toName(document.key),\n            fields: this.toFields(document.data),\n            updateTime: this.toTimestamp(document.version.toTimestamp())\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocument = function (document) {\n        return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.toFields = function (fields) {\n        var _this = this;\n        var result = {};\n        fields.forEach(function (key, value) {\n            result[key] = _this.toValue(value);\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromFields = function (object) {\n        var _this = this;\n        // Proto map<string, Value> gets mapped to Object, so cast it.\n        var map = object;\n        var result = fieldValue.ObjectValue.EMPTY;\n        obj.forEach(map, function (key, value) {\n            result = result.set(new FieldPath([key]), _this.fromValue(value));\n        });\n        return result;\n    };\n    JsonProtoSerializer.prototype.toMapValue = function (map) {\n        return {\n            fields: this.toFields(map)\n        };\n    };\n    JsonProtoSerializer.prototype.toArrayValue = function (array) {\n        var _this = this;\n        var result = [];\n        array.forEach(function (value) {\n            result.push(_this.toValue(value));\n        });\n        return { values: result };\n    };\n    JsonProtoSerializer.prototype.fromFound = function (doc) {\n        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');\n        assertPresent(doc.found.name, 'doc.found.name');\n        assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n        var key = this.fromName(doc.found.name);\n        var version = this.fromVersion(doc.found.updateTime);\n        var fields = this.fromFields(doc.found.fields || {});\n        return new Document(key, version, fields, { hasLocalMutations: false });\n    };\n    JsonProtoSerializer.prototype.fromMissing = function (result) {\n        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');\n        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');\n        var key = this.fromName(result.missing);\n        var version = this.fromVersion(result.readTime);\n        return new NoDocument(key, version);\n    };\n    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {\n        // tslint:disable-next-line:no-any\n        var type = result['result'];\n        if (hasTag(result, type, 'found')) {\n            return this.fromFound(result);\n        }\n        else if (hasTag(result, type, 'missing')) {\n            return this.fromMissing(result);\n        }\n        return fail('invalid batch get response: ' + JSON.stringify(result));\n    };\n    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {\n        switch (state) {\n            case WatchTargetChangeState.Added:\n                return 'ADD';\n            case WatchTargetChangeState.Current:\n                return 'CURRENT';\n            case WatchTargetChangeState.NoChange:\n                return 'NO_CHANGE';\n            case WatchTargetChangeState.Removed:\n                return 'REMOVE';\n            case WatchTargetChangeState.Reset:\n                return 'RESET';\n            default:\n                return fail('Unknown WatchTargetChangeState: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {\n        if (watchChange instanceof ExistenceFilterChange) {\n            return {\n                filter: {\n                    count: watchChange.existenceFilter.count,\n                    targetId: watchChange.targetId\n                }\n            };\n        }\n        if (watchChange instanceof DocumentWatchChange) {\n            if (watchChange.newDoc instanceof Document) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentChange: {\n                        document: {\n                            name: this.toName(doc.key),\n                            fields: this.toFields(doc.data),\n                            updateTime: this.toVersion(doc.version)\n                        },\n                        targetIds: watchChange.updatedTargetIds,\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc instanceof NoDocument) {\n                var doc = watchChange.newDoc;\n                return {\n                    documentDelete: {\n                        document: this.toName(doc.key),\n                        readTime: this.toVersion(doc.version),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n            else if (watchChange.newDoc === null) {\n                return {\n                    documentRemove: {\n                        document: this.toName(watchChange.key),\n                        removedTargetIds: watchChange.removedTargetIds\n                    }\n                };\n            }\n        }\n        if (watchChange instanceof WatchTargetChange) {\n            var cause = undefined;\n            if (watchChange.cause) {\n                cause = {\n                    code: mapRpcCodeFromCode(watchChange.cause.code),\n                    message: watchChange.cause.message\n                };\n            }\n            return {\n                targetChange: {\n                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),\n                    targetIds: watchChange.targetIds,\n                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),\n                    cause: cause\n                }\n            };\n        }\n        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));\n    };\n    JsonProtoSerializer.prototype.fromWatchChange = function (change) {\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        var watchChange;\n        if (hasTag(change, type, 'targetChange')) {\n            assertPresent(change.targetChange, 'targetChange');\n            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n            // if unset\n            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n            var targetIds = change.targetChange.targetIds || [];\n            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();\n            var causeProto = change.targetChange.cause;\n            var cause = causeProto && this.fromRpcStatus(causeProto);\n            watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n        }\n        else if (hasTag(change, type, 'documentChange')) {\n            assertPresent(change.documentChange, 'documentChange');\n            assertPresent(change.documentChange.document, 'documentChange.name');\n            assertPresent(change.documentChange.document.name, 'documentChange.document.name');\n            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');\n            var entityChange = change.documentChange;\n            var key = this.fromName(entityChange.document.name);\n            var version = this.fromVersion(entityChange.document.updateTime);\n            var fields = this.fromFields(entityChange.document.fields || {});\n            var doc = new Document(key, version, fields, {\n                hasLocalMutations: false\n            });\n            var updatedTargetIds = entityChange.targetIds || [];\n            var removedTargetIds = entityChange.removedTargetIds || [];\n            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentDelete')) {\n            assertPresent(change.documentDelete, 'documentDelete');\n            assertPresent(change.documentDelete.document, 'documentDelete.document');\n            var docDelete = change.documentDelete;\n            var key = this.fromName(docDelete.document);\n            var version = docDelete.readTime\n                ? this.fromVersion(docDelete.readTime)\n                : SnapshotVersion.forDeletedDoc();\n            var doc = new NoDocument(key, version);\n            var removedTargetIds = docDelete.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n        }\n        else if (hasTag(change, type, 'documentRemove')) {\n            assertPresent(change.documentRemove, 'documentRemove');\n            assertPresent(change.documentRemove.document, 'documentRemove');\n            var docRemove = change.documentRemove;\n            var key = this.fromName(docRemove.document);\n            var removedTargetIds = docRemove.removedTargetIds || [];\n            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n        }\n        else if (hasTag(change, type, 'filter')) {\n            // TODO(dimond): implement existence filter parsing with strategy.\n            assertPresent(change.filter, 'filter');\n            assertPresent(change.filter.targetId, 'filter.targetId');\n            var filter = change.filter;\n            var count = filter.count || 0;\n            var existenceFilter = new ExistenceFilter(count);\n            var targetId = filter.targetId;\n            watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n        }\n        else {\n            return fail('Unknown change type ' + JSON.stringify(change));\n        }\n        return watchChange;\n    };\n    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {\n        if (state === 'NO_CHANGE') {\n            return WatchTargetChangeState.NoChange;\n        }\n        else if (state === 'ADD') {\n            return WatchTargetChangeState.Added;\n        }\n        else if (state === 'REMOVE') {\n            return WatchTargetChangeState.Removed;\n        }\n        else if (state === 'CURRENT') {\n            return WatchTargetChangeState.Current;\n        }\n        else if (state === 'RESET') {\n            return WatchTargetChangeState.Reset;\n        }\n        else {\n            return fail('Got unexpected TargetChange.state: ' + state);\n        }\n    };\n    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {\n        // We have only reached a consistent snapshot for the entire stream if there\n        // is a read_time set and it applies to all targets (i.e. the list of\n        // targets is empty). The backend is guaranteed to send such responses.\n        // tslint:disable-next-line:no-any\n        var type = change['response_type'];\n        if (!hasTag(change, type, 'targetChange')) {\n            return SnapshotVersion.MIN;\n        }\n        var targetChange = change.targetChange;\n        if (targetChange.targetIds && targetChange.targetIds.length) {\n            return SnapshotVersion.MIN;\n        }\n        if (!targetChange.readTime) {\n            return SnapshotVersion.MIN;\n        }\n        return this.fromVersion(targetChange.readTime);\n    };\n    JsonProtoSerializer.prototype.toMutation = function (mutation) {\n        var _this = this;\n        var result;\n        if (mutation instanceof SetMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.value)\n            };\n        }\n        else if (mutation instanceof DeleteMutation) {\n            result = { delete: this.toName(mutation.key) };\n        }\n        else if (mutation instanceof PatchMutation) {\n            result = {\n                update: this.toMutationDocument(mutation.key, mutation.data),\n                updateMask: this.toDocumentMask(mutation.fieldMask)\n            };\n        }\n        else if (mutation instanceof TransformMutation) {\n            result = {\n                transform: {\n                    document: this.toName(mutation.key),\n                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {\n                        return _this.toFieldTransform(transform);\n                    })\n                }\n            };\n        }\n        else {\n            return fail('Unknown mutation type ' + mutation.type);\n        }\n        if (!mutation.precondition.isNone) {\n            result.currentDocument = this.toPrecondition(mutation.precondition);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromMutation = function (proto) {\n        var _this = this;\n        var precondition = proto.currentDocument\n            ? this.fromPrecondition(proto.currentDocument)\n            : Precondition.NONE;\n        if (proto.update) {\n            assertPresent(proto.update.name, 'name');\n            var key = this.fromName(proto.update.name);\n            var value = this.fromFields(proto.update.fields || {});\n            if (proto.updateMask) {\n                var fieldMask = this.fromDocumentMask(proto.updateMask);\n                return new PatchMutation(key, value, fieldMask, precondition);\n            }\n            else {\n                return new SetMutation(key, value, precondition);\n            }\n        }\n        else if (proto.delete) {\n            var key = this.fromName(proto.delete);\n            return new DeleteMutation(key, precondition);\n        }\n        else if (proto.transform) {\n            var key = this.fromName(proto.transform.document);\n            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {\n                return _this.fromFieldTransform(transform);\n            });\n            assert(precondition.exists === true, 'Transforms only support precondition \"exists == true\"');\n            return new TransformMutation(key, fieldTransforms);\n        }\n        else {\n            return fail('unknown mutation proto: ' + JSON.stringify(proto));\n        }\n    };\n    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {\n        assert(!precondition.isNone, \"Can't serialize an empty precondition\");\n        if (precondition.updateTime !== undefined) {\n            return {\n                updateTime: this.toVersion(precondition.updateTime)\n            };\n        }\n        else if (precondition.exists !== undefined) {\n            return { exists: precondition.exists };\n        }\n        else {\n            return fail('Unknown precondition');\n        }\n    };\n    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {\n        if (precondition.updateTime !== undefined) {\n            return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n        }\n        else if (precondition.exists !== undefined) {\n            return Precondition.exists(precondition.exists);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    JsonProtoSerializer.prototype.fromWriteResult = function (proto) {\n        var _this = this;\n        // NOTE: Deletes don't have an updateTime.\n        var version = proto.updateTime\n            ? this.fromVersion(proto.updateTime)\n            : null;\n        var transformResults = null;\n        if (proto.transformResults && proto.transformResults.length > 0) {\n            transformResults = proto.transformResults.map(function (result) {\n                return _this.fromValue(result);\n            });\n        }\n        return new MutationResult(version, transformResults);\n    };\n    JsonProtoSerializer.prototype.fromWriteResults = function (protos) {\n        var _this = this;\n        return (protos || []).map(function (proto) { return _this.fromWriteResult(proto); });\n    };\n    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {\n        assert(fieldTransform.transform instanceof ServerTimestampTransform, 'Unknown transform: ' + fieldTransform.transform);\n        return {\n            fieldPath: fieldTransform.field.canonicalString(),\n            setToServerValue: 'REQUEST_TIME'\n        };\n    };\n    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {\n        assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown transform proto: ' + JSON.stringify(proto));\n        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);\n        return new FieldTransform(fieldPath, ServerTimestampTransform.instance);\n    };\n    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {\n        return { documents: [this.toQueryPath(query.path)] };\n    };\n    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {\n        var count = documentsTarget.documents.length;\n        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);\n        var name = documentsTarget.documents[0];\n        return Query.atPath(this.fromQueryPath(name));\n    };\n    JsonProtoSerializer.prototype.toQueryTarget = function (query) {\n        // Dissect the path into parent, collectionId, and optional key filter.\n        var result = { structuredQuery: {} };\n        if (query.path.isEmpty()) {\n            result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);\n        }\n        else {\n            var path = query.path;\n            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');\n            result.parent = this.toQueryPath(path.popLast());\n            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\n        }\n        var where = this.toFilter(query.filters);\n        if (where) {\n            result.structuredQuery.where = where;\n        }\n        var orderBy = this.toOrder(query.orderBy);\n        if (orderBy) {\n            result.structuredQuery.orderBy = orderBy;\n        }\n        var limit = this.toInt32Value(query.limit);\n        if (limit !== undefined) {\n            result.structuredQuery.limit = limit;\n        }\n        if (query.startAt) {\n            result.structuredQuery.startAt = this.toCursor(query.startAt);\n        }\n        if (query.endAt) {\n            result.structuredQuery.endAt = this.toCursor(query.endAt);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {\n        var path = this.fromQueryPath(target.parent);\n        var query = target.structuredQuery;\n        var fromCount = query.from ? query.from.length : 0;\n        if (fromCount > 0) {\n            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');\n            var from = query.from[0];\n            path = path.child(from.collectionId);\n        }\n        var filterBy = [];\n        if (query.where) {\n            filterBy = this.fromFilter(query.where);\n        }\n        var orderBy = [];\n        if (query.orderBy) {\n            orderBy = this.fromOrder(query.orderBy);\n        }\n        var limit = null;\n        if (query.limit) {\n            limit = this.fromInt32Value(query.limit);\n        }\n        var startAt = null;\n        if (query.startAt) {\n            startAt = this.fromCursor(query.startAt);\n        }\n        var endAt = null;\n        if (query.endAt) {\n            endAt = this.fromCursor(query.endAt);\n        }\n        return new Query(path, orderBy, filterBy, limit, startAt, endAt);\n    };\n    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {\n        var value = this.toLabel(queryData.purpose);\n        if (value == null) {\n            return null;\n        }\n        else {\n            return {\n                'goog-listen-tags': value\n            };\n        }\n    };\n    JsonProtoSerializer.prototype.toLabel = function (purpose) {\n        switch (purpose) {\n            case QueryPurpose.Listen:\n                return null;\n            case QueryPurpose.ExistenceFilterMismatch:\n                return 'existence-filter-mismatch';\n            case QueryPurpose.LimboResolution:\n                return 'limbo-document';\n            default:\n                return fail('Unrecognized query purpose: ' + purpose);\n        }\n    };\n    JsonProtoSerializer.prototype.toTarget = function (queryData) {\n        var result;\n        var query = queryData.query;\n        if (query.isDocumentQuery()) {\n            result = { documents: this.toDocumentsTarget(query) };\n        }\n        else {\n            result = { query: this.toQueryTarget(query) };\n        }\n        result.targetId = queryData.targetId;\n        if (queryData.resumeToken.length > 0) {\n            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);\n        }\n        return result;\n    };\n    JsonProtoSerializer.prototype.toFilter = function (filters) {\n        var _this = this;\n        if (filters.length === 0)\n            return;\n        var protos = filters.map(function (filter) {\n            return filter instanceof RelationFilter\n                ? _this.toRelationFilter(filter)\n                : _this.toUnaryFilter(filter);\n        });\n        if (protos.length === 1) {\n            return protos[0];\n        }\n        return { compositeFilter: { op: 'AND', filters: protos } };\n    };\n    JsonProtoSerializer.prototype.fromFilter = function (filter) {\n        var _this = this;\n        if (!filter) {\n            return [];\n        }\n        else if (filter.unaryFilter !== undefined) {\n            return [this.fromUnaryFilter(filter)];\n        }\n        else if (filter.fieldFilter !== undefined) {\n            return [this.fromRelationFilter(filter)];\n        }\n        else if (filter.compositeFilter !== undefined) {\n            return filter.compositeFilter.filters\n                .map(function (f) { return _this.fromFilter(f); })\n                .reduce(function (accum, current) { return accum.concat(current); });\n        }\n        else {\n            return fail('Unknown filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.toOrder = function (orderBys) {\n        var _this = this;\n        if (orderBys.length === 0)\n            return;\n        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {\n        var _this = this;\n        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });\n    };\n    JsonProtoSerializer.prototype.toCursor = function (cursor) {\n        var _this = this;\n        return {\n            before: cursor.before,\n            values: cursor.position.map(function (component) { return _this.toValue(component); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromCursor = function (cursor) {\n        var _this = this;\n        var before = !!cursor.before;\n        var position = cursor.values.map(function (component) { return _this.fromValue(component); });\n        return new Bound(position, before);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toDirection = function (dir) {\n        return DIRECTIONS[dir.name];\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.fromDirection = function (dir) {\n        switch (dir) {\n            case 'ASCENDING':\n                return Direction.ASCENDING;\n            case 'DESCENDING':\n                return Direction.DESCENDING;\n            default:\n                return undefined;\n        }\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toOperatorName = function (op) {\n        return OPERATORS[op.name];\n    };\n    JsonProtoSerializer.prototype.fromOperatorName = function (op) {\n        switch (op) {\n            case 'EQUAL':\n                return RelationOp.EQUAL;\n            case 'GREATER_THAN':\n                return RelationOp.GREATER_THAN;\n            case 'GREATER_THAN_OR_EQUAL':\n                return RelationOp.GREATER_THAN_OR_EQUAL;\n            case 'LESS_THAN':\n                return RelationOp.LESS_THAN;\n            case 'LESS_THAN_OR_EQUAL':\n                return RelationOp.LESS_THAN_OR_EQUAL;\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified relation');\n            default:\n                return fail('Unknown relation');\n        }\n    };\n    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {\n        return { fieldPath: path.canonicalString() };\n    };\n    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {\n        return FieldPath.fromServerFormat(fieldReference.fieldPath);\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {\n        return {\n            field: this.toFieldPathReference(orderBy.field),\n            direction: this.toDirection(orderBy.dir)\n        };\n    };\n    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {\n        return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {\n        if (filter instanceof RelationFilter) {\n            return {\n                fieldFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: this.toOperatorName(filter.op),\n                    value: this.toValue(filter.value)\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {\n        return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));\n    };\n    // visible for testing\n    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {\n        if (filter instanceof NanFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NAN'\n                }\n            };\n        }\n        else if (filter instanceof NullFilter) {\n            return {\n                unaryFilter: {\n                    field: this.toFieldPathReference(filter.field),\n                    op: 'IS_NULL'\n                }\n            };\n        }\n        else {\n            return fail('Unrecognized filter: ' + JSON.stringify(filter));\n        }\n    };\n    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {\n        switch (filter.unaryFilter.op) {\n            case 'IS_NAN':\n                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NanFilter(nanField);\n            case 'IS_NULL':\n                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);\n                return new NullFilter(nullField);\n            case 'OPERATOR_UNSPECIFIED':\n                return fail('Unspecified filter');\n            default:\n                return fail('Unknown filter');\n        }\n    };\n    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {\n        return {\n            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })\n        };\n    };\n    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {\n        var paths = proto.fieldPaths || [];\n        var fields = paths.map(function (path) { return FieldPath.fromServerFormat(path); });\n        return new FieldMask(fields);\n    };\n    return JsonProtoSerializer;\n}());\nexport { JsonProtoSerializer };\n/**\n * Checks for a specific oneof tag in a protocol buffer message.\n *\n * This intentionally accommodates two distinct cases:\n *\n * 1) Messages containing a type tag: these are the format produced by GRPC in\n * return values. These may contain default-value mappings for all tags in the\n * oneof but the type tag specifies which one was actually set.\n *\n * 2) Messages that don't contain a type tag: these are the format required by\n * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would\n * choke claiming that the tags aren't fields in the Message.\n *\n * Allowing both formats here makes the serializer able to consume the outputs\n * it produces: for all messages it supports, fromX(toX(value)) == value.\n *\n * Note that case 2 suffers from ambiguity: if multiple tags are present\n * without a type tag then the callers are structured in such a way that the\n * first invocation will win. Since we only parse in this mode when parsing\n * the output of a serialize method this works, but it's not a general\n * solution.\n *\n * Unfortunately there is no general solution here because proto3 makes it\n * impossible to distinguish unset from explicitly set fields: both have the\n * default value for the type. Without the type tag but multiple value tags\n * it's possible to have default values for each tag in the oneof and not be\n * able to know which was actually in effect.\n */\nfunction hasTag(obj, type, tag) {\n    return type === tag || (!type && tag in obj);\n}\n\n//# sourceMappingURL=serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/serializer.js\n// module id = 109\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\nexport { DatabaseInfo };\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\nexport { DatabaseId };\n\n//# sourceMappingURL=database_info.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/database_info.js\n// module id = 110\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\nimport { assert, fail } from '../util/assert';\nimport * as objUtils from '../util/obj';\nimport { CurrentStatusUpdate, RemoteEvent, ResetMapping, UpdateMapping } from './remote_event';\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nvar DocumentWatchChange = /** @class */ (function () {\n    function DocumentWatchChange(\n        /** The new document applies to all of these targets. */\n        updatedTargetIds, \n        /** The new document is removed from all of these targets. */\n        removedTargetIds, \n        /** The key of the document for this change. */\n        key, \n        /**\n         * The new document or NoDocument if it was deleted. Is null if the\n         * document went out of view without the server sending a new document.\n         */\n        newDoc) {\n        this.updatedTargetIds = updatedTargetIds;\n        this.removedTargetIds = removedTargetIds;\n        this.key = key;\n        this.newDoc = newDoc;\n    }\n    return DocumentWatchChange;\n}());\nexport { DocumentWatchChange };\nvar ExistenceFilterChange = /** @class */ (function () {\n    function ExistenceFilterChange(targetId, existenceFilter) {\n        this.targetId = targetId;\n        this.existenceFilter = existenceFilter;\n    }\n    return ExistenceFilterChange;\n}());\nexport { ExistenceFilterChange };\nexport var WatchTargetChangeState;\n(function (WatchTargetChangeState) {\n    WatchTargetChangeState[WatchTargetChangeState[\"NoChange\"] = 0] = \"NoChange\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Added\"] = 1] = \"Added\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Removed\"] = 2] = \"Removed\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Current\"] = 3] = \"Current\";\n    WatchTargetChangeState[WatchTargetChangeState[\"Reset\"] = 4] = \"Reset\";\n})(WatchTargetChangeState || (WatchTargetChangeState = {}));\nvar WatchTargetChange = /** @class */ (function () {\n    function WatchTargetChange(\n        /** What kind of change occurred to the watch target. */\n        state, \n        /** The target IDs that were added/removed/set. */\n        targetIds, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken, \n        /** An RPC error indicating why the watch failed. */\n        cause) {\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        if (cause === void 0) { cause = null; }\n        this.state = state;\n        this.targetIds = targetIds;\n        this.resumeToken = resumeToken;\n        this.cause = cause;\n    }\n    return WatchTargetChange;\n}());\nexport { WatchTargetChange };\n/**\n * A helper class to accumulate watch changes into a RemoteEvent and other\n * target information.\n */\nvar WatchChangeAggregator = /** @class */ (function () {\n    function WatchChangeAggregator(snapshotVersion, listenTargets, pendingTargetResponses) {\n        this.snapshotVersion = snapshotVersion;\n        this.listenTargets = listenTargets;\n        /** The existence filter - if any - for the given target IDs. */\n        this.existenceFilters = {};\n        /** Keeps track of the current target mappings */\n        this.targetChanges = {};\n        /** Keeps track of document to update */\n        this.documentUpdates = maybeDocumentMap();\n        /** Whether this aggregator was frozen and can no longer be modified */\n        this.frozen = false;\n        this.pendingTargetResponses = objUtils.shallowCopy(pendingTargetResponses);\n    }\n    /** Aggregates a watch change into the current state */\n    WatchChangeAggregator.prototype.add = function (watchChange) {\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        if (watchChange instanceof DocumentWatchChange) {\n            this.addDocumentChange(watchChange);\n        }\n        else if (watchChange instanceof WatchTargetChange) {\n            this.addTargetChange(watchChange);\n        }\n        else if (watchChange instanceof ExistenceFilterChange) {\n            this.addExistenceFilterChange(watchChange);\n        }\n        else {\n            fail('Unknown watch change: ' + watchChange);\n        }\n    };\n    /** Aggregates all provided watch changes to the current state in order */\n    WatchChangeAggregator.prototype.addChanges = function (watchChanges) {\n        var _this = this;\n        assert(!this.frozen, 'Trying to modify frozen WatchChangeAggregator.');\n        watchChanges.forEach(function (change) { return _this.add(change); });\n    };\n    /**\n     * Converts the current state into a remote event with the snapshot version\n     * provided via the constructor.\n     */\n    WatchChangeAggregator.prototype.createRemoteEvent = function () {\n        var _this = this;\n        var targetChanges = this.targetChanges;\n        // Remove all the non-active targets from the remote event.\n        objUtils.forEachNumber(this.targetChanges, function (targetId) {\n            if (!_this.isActiveTarget(targetId)) {\n                delete targetChanges[targetId];\n            }\n        });\n        // Mark this aggregator as frozen so no further modifications are made\n        this.frozen = true;\n        return new RemoteEvent(this.snapshotVersion, targetChanges, this.documentUpdates);\n    };\n    WatchChangeAggregator.prototype.ensureTargetChange = function (targetId) {\n        var change = this.targetChanges[targetId];\n        if (!change) {\n            // Create an UpdateMapping by default, since resets are always explicit.\n            change = {\n                currentStatusUpdate: CurrentStatusUpdate.None,\n                snapshotVersion: this.snapshotVersion,\n                mapping: new UpdateMapping(),\n                resumeToken: emptyByteString()\n            };\n            this.targetChanges[targetId] = change;\n        }\n        return change;\n    };\n    /**\n     * We need to wait for watch to ack targets before we process those events,\n     * so to know if a target is active, there must be no pending acks we're\n     * waiting for and it must be in the current list of targets that the client\n     * cares about.\n     *\n     * This method is visible for testing.\n     */\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n        return (!objUtils.contains(this.pendingTargetResponses, targetId) &&\n            objUtils.contains(this.listenTargets, targetId));\n    };\n    WatchChangeAggregator.prototype.addDocumentChange = function (docChange) {\n        var relevant = false;\n        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {\n            var targetId = _a[_i];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.add(docChange.key);\n                relevant = true;\n            }\n        }\n        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {\n            var targetId = _c[_b];\n            if (this.isActiveTarget(targetId)) {\n                var change = this.ensureTargetChange(targetId);\n                change.mapping.delete(docChange.key);\n                relevant = true;\n            }\n        }\n        // Only update the document if there is a new document to replace to an\n        // active target that is being listened to, this might be just a target\n        // update instead.\n        if (docChange.newDoc && relevant) {\n            this.documentUpdates = this.documentUpdates.insert(docChange.key, docChange.newDoc);\n        }\n    };\n    WatchChangeAggregator.prototype.addTargetChange = function (targetChange) {\n        var _this = this;\n        targetChange.targetIds.forEach(function (targetId) {\n            var change = _this.ensureTargetChange(targetId);\n            switch (targetChange.state) {\n                case WatchTargetChangeState.NoChange:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Creating the change above satisfies the semantics of no-change.\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Added:\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    if (!objUtils.contains(_this.pendingTargetResponses, targetId)) {\n                        // We have a freshly added target, so we need to reset any state\n                        // that we had previously This can happen e.g. when remove and add\n                        // back a target for existence filter mismatches.\n                        change.mapping = new UpdateMapping();\n                        change.currentStatusUpdate = CurrentStatusUpdate.None;\n                        delete _this.existenceFilters[targetId];\n                    }\n                    applyResumeToken(change, targetChange.resumeToken);\n                    break;\n                case WatchTargetChangeState.Removed:\n                    // We need to keep track of removed targets to we can\n                    // post-filter and remove any target changes.\n                    // We need to decrement the number of pending acks needed from watch\n                    // for this targetId.\n                    _this.recordTargetResponse(targetId);\n                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');\n                    break;\n                case WatchTargetChangeState.Current:\n                    if (_this.isActiveTarget(targetId)) {\n                        change.currentStatusUpdate = CurrentStatusUpdate.MarkCurrent;\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                case WatchTargetChangeState.Reset:\n                    if (_this.isActiveTarget(targetId)) {\n                        // Overwrite any existing target mapping with a reset\n                        // mapping. Every subsequent update will modify the reset\n                        // mapping, not an update mapping.\n                        change.mapping = new ResetMapping();\n                        applyResumeToken(change, targetChange.resumeToken);\n                    }\n                    break;\n                default:\n                    fail('Unknown target watch change state: ' + targetChange.state);\n            }\n        });\n    };\n    /**\n     * Record that we get a watch target add/remove by decrementing the number of\n     * pending target responses that we have.\n     */\n    WatchChangeAggregator.prototype.recordTargetResponse = function (targetId) {\n        var newCount = (this.pendingTargetResponses[targetId] || 0) - 1;\n        if (newCount === 0) {\n            delete this.pendingTargetResponses[targetId];\n        }\n        else {\n            this.pendingTargetResponses[targetId] = newCount;\n        }\n    };\n    WatchChangeAggregator.prototype.addExistenceFilterChange = function (change) {\n        if (this.isActiveTarget(change.targetId)) {\n            this.existenceFilters[change.targetId] = change.existenceFilter;\n        }\n    };\n    return WatchChangeAggregator;\n}());\nexport { WatchChangeAggregator };\n/**\n * Applies the resume token to the TargetChange, but only when it has a new\n * value. null and empty resumeTokens are discarded.\n */\nfunction applyResumeToken(change, resumeToken) {\n    if (resumeToken.length > 0) {\n        change.resumeToken = resumeToken;\n    }\n}\n\n//# sourceMappingURL=watch_change.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/watch_change.js\n// module id = 111\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Describes the online state of the Firestore client */\nexport var OnlineState;\n(function (OnlineState) {\n    /**\n     * The Firestore client is in an unknown online state. This means the client\n     * is either not actively trying to establish a connection or it was\n     * previously in an unknown state and is trying to establish a connection.\n     */\n    OnlineState[OnlineState[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * The client is connected and the connections are healthy. This state is\n     * reached after a successful connection and there has been at least one\n     * succesful message received from the backends.\n     */\n    OnlineState[OnlineState[\"Healthy\"] = 1] = \"Healthy\";\n    /**\n     * The client has tried to establish a connection but has failed.\n     * This state is reached after either a connection attempt failed or a\n     * healthy stream was closed for unexpected reasons.\n     */\n    OnlineState[OnlineState[\"Failed\"] = 2] = \"Failed\";\n})(OnlineState || (OnlineState = {}));\n\n//# sourceMappingURL=types.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/types.js\n// module id = 112\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { documentMap } from './collections';\nimport { DocumentKey } from './document_key';\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nvar DocumentSet = /** @class */ (function () {\n    /** The default ordering is by key if the comparator is omitted */\n    function DocumentSet(comp) {\n        // We are adding document key comparator to the end as it's the only\n        // guaranteed unique property of a document.\n        if (comp) {\n            this.comparator = function (d1, d2) {\n                return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        else {\n            this.comparator = function (d1, d2) {\n                return DocumentKey.comparator(d1.key, d2.key);\n            };\n        }\n        this.keyedMap = documentMap();\n        this.sortedSet = new SortedMap(this.comparator);\n    }\n    /**\n     * Returns an empty copy of the existing DocumentSet, using the same\n     * comparator.\n     */\n    DocumentSet.emptySet = function (oldSet) {\n        return new DocumentSet(oldSet.comparator);\n    };\n    DocumentSet.prototype.has = function (key) {\n        return this.keyedMap.get(key) != null;\n    };\n    DocumentSet.prototype.get = function (key) {\n        return this.keyedMap.get(key);\n    };\n    DocumentSet.prototype.first = function () {\n        return this.sortedSet.minKey();\n    };\n    DocumentSet.prototype.last = function () {\n        return this.sortedSet.maxKey();\n    };\n    DocumentSet.prototype.isEmpty = function () {\n        return this.sortedSet.isEmpty();\n    };\n    /**\n     * Returns previous document or null if it's a first doc.\n     *\n     * @param key A key that MUST be present in the DocumentSet.\n     */\n    DocumentSet.prototype.prevDoc = function (key) {\n        assert(this.has(key), 'Trying to get a previous document to non-existing key: ' + key);\n        var doc = this.keyedMap.get(key);\n        return this.sortedSet.getPredecessorKey(doc);\n    };\n    /**\n     * Returns the index of the provided key in the document set, or -1 if the\n     * document key is not present in the set;\n     */\n    DocumentSet.prototype.indexOf = function (key) {\n        var doc = this.keyedMap.get(key);\n        return doc ? this.sortedSet.indexOf(doc) : -1;\n    };\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\n        get: function () {\n            return this.sortedSet.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Iterates documents in order defined by \"comparator\" */\n    DocumentSet.prototype.forEach = function (cb) {\n        this.sortedSet.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Inserts or updates a document with the same key */\n    DocumentSet.prototype.add = function (doc) {\n        // First remove the element if we have it.\n        var set = this.delete(doc.key);\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n    };\n    /** Deletes a document with a given key */\n    DocumentSet.prototype.delete = function (key) {\n        var doc = this.get(key);\n        if (!doc) {\n            return this;\n        }\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n    };\n    DocumentSet.prototype.equals = function (other) {\n        if (!(other instanceof DocumentSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.sortedSet.getIterator();\n        var otherIt = other.sortedSet.getIterator();\n        while (thisIt.hasNext()) {\n            var thisDoc = thisIt.getNext().key;\n            var otherDoc = otherIt.getNext().key;\n            if (!thisDoc.equals(otherDoc))\n                return false;\n        }\n        return true;\n    };\n    DocumentSet.prototype.toString = function () {\n        var docStrings = [];\n        this.forEach(function (doc) {\n            docStrings.push(doc.toString());\n        });\n        if (docStrings.length === 0) {\n            return 'DocumentSet ()';\n        }\n        else {\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n        }\n    };\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n        var newSet = new DocumentSet();\n        newSet.comparator = this.comparator;\n        newSet.keyedMap = keyedMap;\n        newSet.sortedSet = sortedSet;\n        return newSet;\n    };\n    return DocumentSet;\n}());\nexport { DocumentSet };\n\n//# sourceMappingURL=document_set.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/model/document_set.js\n// module id = 113\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that eagerly collects documents as soon as\n * they're no longer referenced in any of its registered GarbageSources.\n *\n * This implementation keeps track of a set of keys that are potentially garbage\n * without keeping an exact reference count. During collectGarbage, the\n * collector verifies that all potential garbage keys actually have no\n * references by consulting its list of garbage sources.\n */\nvar EagerGarbageCollector = /** @class */ (function () {\n    function EagerGarbageCollector() {\n        this.isEager = true;\n        /**\n         * The garbage collectible sources to double-check during garbage collection.\n         */\n        this.sources = [];\n        /**\n         * A set of potentially garbage keys.\n         * PORTING NOTE: This would be a mutable set if Javascript had one.\n         */\n        this.potentialGarbage = documentKeySet();\n    }\n    EagerGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        this.sources.push(garbageSource);\n        garbageSource.setGarbageCollector(this);\n    };\n    EagerGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        this.sources.splice(this.sources.indexOf(garbageSource), 1);\n        garbageSource.setGarbageCollector(null);\n    };\n    EagerGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        this.potentialGarbage = this.potentialGarbage.add(key);\n    };\n    EagerGarbageCollector.prototype.collectGarbage = function (txn) {\n        var _this = this;\n        var promises = [];\n        var garbageKeys = documentKeySet();\n        this.potentialGarbage.forEach(function (key) {\n            var hasRefsPromise = _this.documentHasAnyReferences(txn, key);\n            promises.push(hasRefsPromise.next(function (hasRefs) {\n                // If there are no references, get the key.\n                if (!hasRefs) {\n                    garbageKeys = garbageKeys.add(key);\n                }\n                return PersistencePromise.resolve();\n            }));\n        });\n        // Clear locally retained potential keys and returned confirmed garbage.\n        this.potentialGarbage = documentKeySet();\n        return PersistencePromise.waitFor(promises).next(function () { return garbageKeys; });\n    };\n    EagerGarbageCollector.prototype.documentHasAnyReferences = function (txn, key) {\n        var initial = PersistencePromise.resolve(false);\n        return this.sources\n            .map(function (source) { return function () { return source.containsKey(txn, key); }; })\n            .reduce(function (promise, nextPromise) {\n            return promise.next(function (result) {\n                if (result) {\n                    return PersistencePromise.resolve(true);\n                }\n                else {\n                    return nextPromise();\n                }\n            });\n        }, initial);\n    };\n    return EagerGarbageCollector;\n}());\nexport { EagerGarbageCollector };\n\n//# sourceMappingURL=eager_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/eager_garbage_collector.js\n// module id = 114\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\nexport { TargetIdGenerator };\n\n//# sourceMappingURL=target_id_generator.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/target_id_generator.js\n// module id = 115\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\nexport { FieldValueImpl };\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    __extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\nexport { DeleteFieldValueImpl };\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    __extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\nexport { ServerTimestampFieldValueImpl };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n//# sourceMappingURL=field_value.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/field_value.js\n// module id = 116\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n\n//# sourceMappingURL=browser_init.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/platform_browser/browser_init.js\n// module id = 117\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { WebChannelConnection } from './webchannel_connection';\nvar BrowserPlatform = /** @class */ (function () {\n    function BrowserPlatform() {\n        this.emptyByteString = '';\n        this.base64Available = typeof atob !== 'undefined';\n    }\n    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {\n        return Promise.resolve(new WebChannelConnection(databaseInfo));\n    };\n    BrowserPlatform.prototype.newSerializer = function (databaseId) {\n        return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n    };\n    BrowserPlatform.prototype.formatJSON = function (value) {\n        return JSON.stringify(value);\n    };\n    BrowserPlatform.prototype.atob = function (encoded) {\n        return atob(encoded);\n    };\n    BrowserPlatform.prototype.btoa = function (raw) {\n        return btoa(raw);\n    };\n    return BrowserPlatform;\n}());\nexport { BrowserPlatform };\n\n//# sourceMappingURL=browser_platform.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/platform_browser/browser_platform.js\n// module id = 118\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExistenceFilter = /** @class */ (function () {\n    // TODO(b/33078163): just use simplest form of existence filter for now\n    function ExistenceFilter(count) {\n        this.count = count;\n    }\n    ExistenceFilter.prototype.equals = function (other) {\n        return other && other.count === this.count;\n    };\n    return ExistenceFilter;\n}());\nexport { ExistenceFilter };\n\n//# sourceMappingURL=existence_filter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/existence_filter.js\n// module id = 119\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ErrorCode, EventType, WebChannel, XhrIoPool, createWebChannelTransport } from '@firebase/webchannel-wrapper';\nimport { SDK_VERSION } from '../core/version';\nimport { mapCodeFromHttpStatus, mapCodeFromRpcStatus } from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nvar LOG_TAG = 'Connection';\nvar RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';\nvar RPC_URL_VERSION = 'v1beta1';\n/** Maps RPC names to the corresponding REST endpoint name. */\nvar RPC_NAME_REST_MAPPING = {\n    BatchGetDocuments: 'batchGet',\n    Commit: 'commit'\n};\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nvar X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\nvar XHR_TIMEOUT_SECS = 15;\nvar WebChannelConnection = /** @class */ (function () {\n    function WebChannelConnection(info) {\n        this.databaseId = info.databaseId;\n        this.pool = new XhrIoPool();\n        var proto = info.ssl ? 'https' : 'http';\n        this.baseUrl = proto + '://' + info.host;\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {\n        if (token) {\n            for (var header in token.authHeaders) {\n                if (token.authHeaders.hasOwnProperty(header)) {\n                    headers[header] = token.authHeaders[header];\n                }\n            }\n        }\n        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n        // This header is used to improve routing and project isolation by the\n        // backend.\n        headers['google-cloud-resource-prefix'] =\n            \"projects/\" + this.databaseId.projectId + \"/\" +\n                (\"databases/\" + this.databaseId.database);\n    };\n    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {\n        var _this = this;\n        var url = this.makeUrl(rpcName);\n        return new Promise(function (resolve, reject) {\n            _this.pool.getObject(function (xhr) {\n                xhr.listenOnce(EventType.COMPLETE, function () {\n                    try {\n                        switch (xhr.getLastErrorCode()) {\n                            case ErrorCode.NO_ERROR:\n                                var json = xhr.getResponseJson();\n                                log.debug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n                                resolve(json);\n                                break;\n                            case ErrorCode.TIMEOUT:\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));\n                                break;\n                            case ErrorCode.HTTP_ERROR:\n                                var status_1 = xhr.getStatus();\n                                log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed with status:', status_1, 'response text:', xhr.getResponseText());\n                                if (status_1 > 0) {\n                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));\n                                }\n                                else {\n                                    // If we received an HTTP_ERROR but there's no status code,\n                                    // it's most probably a connection issue\n                                    log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));\n                                }\n                                break;\n                            default:\n                                fail('RPC \"' +\n                                    rpcName +\n                                    '\" failed with unanticipated ' +\n                                    'webchannel error ' +\n                                    xhr.getLastErrorCode() +\n                                    ': ' +\n                                    xhr.getLastError() +\n                                    ', giving up.');\n                        }\n                    }\n                    finally {\n                        log.debug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n                        _this.pool.releaseObject(xhr);\n                    }\n                });\n                var requestString = JSON.stringify(request);\n                log.debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n                // Content-Type: text/plain will avoid preflight requests which might\n                // mess with CORS and redirects by proxies. If we add custom headers\n                // we will need to change this code to potentially use the\n                // $httpOverwrite parameter supported by ESF to avoid\n                // triggering preflight requests.\n                var headers = { 'Content-Type': 'text/plain' };\n                _this.modifyHeadersForRequest(headers, token);\n                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n            });\n        });\n    };\n    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.invokeRPC(rpcName, request, token);\n    };\n    WebChannelConnection.prototype.openStream = function (rpcName, token) {\n        var urlParts = [\n            this.baseUrl,\n            '/',\n            RPC_STREAM_SERVICE,\n            '/',\n            rpcName,\n            '/channel'\n        ];\n        var webchannelTransport = createWebChannelTransport();\n        var request = {\n            // Background channel test avoids the initial two test calls and decreases\n            // initial cold start time.\n            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and\n            // we should monitor closely for any reports.\n            backgroundChannelTest: true,\n            // Required for backend stickiness, routing behavior is based on this\n            // parameter.\n            httpSessionIdParam: 'gsessionid',\n            initMessageHeaders: {},\n            // Send our custom headers as a '$httpHeaders=' url param to avoid CORS\n            // preflight round-trip. This is formally defined here:\n            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L40\n            httpHeadersOverwriteParam: '$httpHeaders',\n            sendRawJson: true,\n            supportsCrossDomainXhr: true\n        };\n        this.modifyHeadersForRequest(request.initMessageHeaders, token);\n        var url = urlParts.join('');\n        log.debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n        // tslint:disable-next-line:no-any Because listen isn't defined on it.\n        var channel = webchannelTransport.createWebChannel(url, request);\n        // WebChannel supports sending the first message with the handshake - saving\n        // a network round trip. However, it will have to call send in the same\n        // JS event loop as open. In order to enforce this, we delay actually\n        // opening the WebChannel until send is called. Whether we have called\n        // open is tracked with this variable.\n        var opened = false;\n        // A flag to determine whether the stream was closed (by us or through an\n        // error/close event) to avoid delivering multiple close events or sending\n        // on a closed stream\n        var closed = false;\n        // tslint:disable-next-line:no-any\n        var streamBridge = new StreamBridge({\n            sendFn: function (msg) {\n                if (!closed) {\n                    if (!opened) {\n                        log.debug(LOG_TAG, 'Opening WebChannel transport.');\n                        channel.open();\n                        opened = true;\n                    }\n                    log.debug(LOG_TAG, 'WebChannel sending:', msg);\n                    channel.send(msg);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n                }\n            },\n            closeFn: function () { return channel.close(); }\n        });\n        // Closure events are guarded and exceptions are swallowed, so catch any\n        // exception and rethrow using a setTimeout so they become visible again.\n        // Note that eventually this function could go away if we are confident\n        // enough the code is exception free.\n        var unguardedEventListen = function (type, fn) {\n            // TODO(dimond): closure typing seems broken because WebChannel does\n            // not implement goog.events.Listenable\n            channel.listen(type, function (param) {\n                try {\n                    fn(param);\n                }\n                catch (e) {\n                    setTimeout(function () {\n                        throw e;\n                    }, 0);\n                }\n            });\n        };\n        unguardedEventListen(WebChannel.EventType.OPEN, function () {\n            if (!closed) {\n                log.debug(LOG_TAG, 'WebChannel transport opened.');\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.CLOSE, function () {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport closed');\n                streamBridge.callOnClose();\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.ERROR, function (err) {\n            if (!closed) {\n                closed = true;\n                log.debug(LOG_TAG, 'WebChannel transport errored:', err);\n                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));\n            }\n        });\n        unguardedEventListen(WebChannel.EventType.MESSAGE, function (msg) {\n            if (!closed) {\n                // WebChannel delivers message events as array. If batching\n                // is not enabled (it's off by default) each message will be\n                // delivered alone, resulting in a single element array.\n                var msgData = msg.data[0];\n                assert(!!msgData, 'Got a webchannel message without data.');\n                // TODO(b/35143891): There is a bug in One Platform that caused errors\n                // (and only errors) to be wrapped in an extra array. To be forward\n                // compatible with the bug we need to check either condition. The latter\n                // can be removed once the fix has been rolled out.\n                var error = msgData.error || (msgData[0] && msgData[0].error);\n                if (error) {\n                    log.debug(LOG_TAG, 'WebChannel received error:', error);\n                    // error.status will be a string like 'OK' or 'NOT_FOUND'.\n                    var status_2 = error.status;\n                    var code = mapCodeFromRpcStatus(status_2);\n                    var message = error.message;\n                    if (code === undefined) {\n                        code = Code.INTERNAL;\n                        message =\n                            'Unknown error status: ' +\n                                status_2 +\n                                ' with message ' +\n                                error.message;\n                    }\n                    // Mark closed so no further events are propagated\n                    closed = true;\n                    streamBridge.callOnClose(new FirestoreError(code, message));\n                    channel.close();\n                }\n                else {\n                    log.debug(LOG_TAG, 'WebChannel received:', msgData);\n                    streamBridge.callOnMessage(msgData);\n                }\n            }\n        });\n        setTimeout(function () {\n            // Technically we could/should wait for the WebChannel opened event,\n            // but because we want to send the first message with the WebChannel\n            // handshake we pretend the channel opened here (asynchronously), and\n            // then delay the actual open until the first message is sent.\n            streamBridge.callOnOpen();\n        }, 0);\n        return streamBridge;\n    };\n    // visible for testing\n    WebChannelConnection.prototype.makeUrl = function (rpcName) {\n        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);\n        var url = [this.baseUrl, '/', RPC_URL_VERSION];\n        url.push('/projects/');\n        url.push(this.databaseId.projectId);\n        url.push('/databases/');\n        url.push(this.databaseId.database);\n        url.push('/documents');\n        url.push(':');\n        url.push(urlRpcName);\n        return url.join('');\n    };\n    return WebChannelConnection;\n}());\nexport { WebChannelConnection };\n\n//# sourceMappingURL=webchannel_connection.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/platform_browser/webchannel_connection.js\n// module id = 120\n// module chunks = 0","(function() {var g,goog=goog||{},k=this;function l(a){return\"string\"==typeof a}function aa(){}\nfunction ba(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"array\"==ba(a)}function ca(a){var b=ba(a);return\"array\"==b||\"object\"==b&&\"number\"==typeof a.length}function da(a){return\"function\"==ba(a)}function p(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}var q=\"closure_uid_\"+(1E9*Math.random()>>>0),ea=0;function fa(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ha(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?r=fa:r=ha;return r.apply(null,arguments)}\nfunction ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var t=Date.now||function(){return+new Date};function u(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Ab=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function ja(a){if(Error.captureStackTrace)Error.captureStackTrace(this,ja);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}u(ja,Error);ja.prototype.name=\"CustomError\";function ka(a,b){for(var c=a.split(\"%s\"),d=\"\",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join(\"%s\")}var la=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};function ma(a,b){return a<b?-1:a>b?1:0};function na(a,b){b.unshift(a);ja.call(this,ka.apply(null,b));b.shift()}u(na,ja);na.prototype.name=\"AssertionError\";function oa(a,b){throw new na(\"Failure\"+(a?\": \"+a:\"\"),Array.prototype.slice.call(arguments,1));};function w(){0!=qa&&(ra[this[q]||(this[q]=++ea)]=this);this.i=this.i;this.w=this.w}var qa=0,ra={};w.prototype.i=!1;w.prototype.Z=function(){if(!this.i&&(this.i=!0,this.A(),0!=qa)){var a=this[q]||(this[q]=++ea);delete ra[a]}};w.prototype.A=function(){if(this.w)for(;this.w.length;)this.w.shift()()};var sa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ta=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};\nfunction ua(a){a:{var b=va;for(var c=a.length,d=l(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function wa(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function xa(a){return Array.prototype.concat.apply([],arguments)}function ya(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};var x;a:{var za=k.navigator;if(za){var Aa=za.userAgent;if(Aa){x=Aa;break a}}x=\"\"}function y(a){return-1!=x.indexOf(a)};function Ba(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Da(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Ea(a){var b={},c;for(c in a)b[c]=a[c];return b}var Fa=\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ga(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<Fa.length;f++)c=Fa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ha(a){Ha[\" \"](a);return a}Ha[\" \"]=aa;function Ia(a,b){var c=Ja;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ka=y(\"Opera\"),z=y(\"Trident\")||y(\"MSIE\"),La=y(\"Edge\"),Ma=y(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\"))&&!(y(\"Trident\")||y(\"MSIE\"))&&!y(\"Edge\"),Na=-1!=x.toLowerCase().indexOf(\"webkit\")&&!y(\"Edge\");function Oa(){var a=k.document;return a?a.documentMode:void 0}var Pa;\na:{var Qa=\"\",Ra=function(){var a=x;if(Ma)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(La)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Na)return/WebKit\\/(\\S+)/.exec(a);if(Ka)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:\"\");if(z){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ja={};\nfunction Ta(a){return Ia(a,function(){for(var b=0,c=la(String(Pa)).split(\".\"),d=la(String(a)).split(\".\"),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||\"\",m=d[f]||\"\";do{h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];m=/(\\d*)(\\D*)(.*)/.exec(m)||[\"\",\"\",\"\",\"\"];if(0==h[0].length&&0==m[0].length)break;b=ma(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||ma(0==h[2].length,0==m[2].length)||ma(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var Ua;var Va=k.document;\nUa=Va&&z?Oa()||(\"CSS1Compat\"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!z||9<=Number(Ua),Ya=z&&!Ta(\"9\"),Za=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},\"passive\",{get:function(){a=!0}});k.addEventListener(\"test\",aa,b);k.removeEventListener(\"test\",aa,b);return a}();function A(a,b){this.type=a;this.a=this.target=b;this.Pa=!0}A.prototype.b=function(){this.Pa=!1};function $a(a,b){A.call(this,a?a.type:\"\");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key=\"\";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType=\"\";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Ma){a:{try{Ha(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else\"mouseover\"==c?b=\na.fromElement:\"mouseout\"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||\"\";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=\na.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:ab[a.pointerType]||\"\";this.c=a;a.defaultPrevented&&this.b()}}u($a,A);var ab=Wa({2:\"touch\",3:\"pen\",4:\"mouse\"});$a.prototype.b=function(){$a.L.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var bb=\"closure_listenable_\"+(1E6*Math.random()|0);function cb(a){return!(!a||!a[bb])}var db=0;function eb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.ga=e;this.key=++db;this.Y=this.ca=!1}function fb(a){a.Y=!0;a.listener=null;a.a=null;a.src=null;a.ga=null};function gb(a){this.src=a;this.a={};this.b=0}gb.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=hb(a,b,d,e);-1<h?(b=a[h],c||(b.ca=!1)):(b=new eb(b,this.src,f,!!d,e),b.ca=c,a.push(b));return b};function ib(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=sa(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(fb(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function jb(a,b,c,d,e){a=a.a[b.toString()];b=-1;a&&(b=hb(a,c,d,e));return-1<b?a[b]:null}\nfunction hb(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.Y&&f.listener==b&&f.capture==!!c&&f.ga==d)return e}return-1};var kb=\"closure_lm_\"+(1E6*Math.random()|0),lb={},mb=0;function nb(a,b,c,d,e){if(d&&d.once)return ob(a,b,c,d,e);if(n(b)){for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.aa(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!1,d,e)}\nfunction qb(a,b,c,d,e,f){if(!b)throw Error(\"Invalid event type\");var h=p(e)?!!e.capture:!!e,m=rb(a);m||(a[kb]=m=new gb(a));c=m.add(b,c,d,h,f);if(c.a)return c;d=sb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(tb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");mb++;return c}\nfunction sb(){var a=ub,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function ob(a,b,c,d,e){if(n(b)){for(var f=0;f<b.length;f++)ob(a,b[f],c,d,e);return null}c=pb(c);return cb(a)?a.Ha(b,c,p(d)?!!d.capture:!!d,e):qb(a,b,c,!0,d,e)}function vb(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)vb(a,b[f],c,d,e);else d=p(d)?!!d.capture:!!d,c=pb(c),cb(a)?a.va(b,c,d,e):a&&(a=rb(a))&&(b=jb(a,b,c,d,e))&&wb(b)}\nfunction wb(a){if(\"number\"!=typeof a&&a&&!a.Y){var b=a.src;if(cb(b))ib(b.c,a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(tb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);mb--;(c=rb(b))?(ib(c,a),0==c.b&&(c.src=null,b[kb]=null)):fb(a)}}}function tb(a){return a in lb?lb[a]:lb[a]=\"on\"+a}\nfunction xb(a,b,c,d){var e=!0;if(a=rb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.Y&&(f=yb(f,d),e=e&&!1!==f)}return e}function yb(a,b){var c=a.listener,d=a.ga||a.src;a.ca&&wb(a);return c.call(d,b)}\nfunction ub(a,b){if(a.Y)return!0;if(!Xa){if(!b)a:{b=[\"window\",\"event\"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new $a(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=xb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=xb(d[e],a,!1,b),c=c&&f}return c}return yb(a,\nnew $a(b,this))}function rb(a){a=a[kb];return a instanceof gb?a:null}var zb=\"__closure_events_fn_\"+(1E9*Math.random()>>>0);function pb(a){if(da(a))return a;a[zb]||(a[zb]=function(b){return a.handleEvent(b)});return a[zb]};function B(){w.call(this);this.c=new gb(this);this.P=this;this.J=null}u(B,w);B.prototype[bb]=!0;g=B.prototype;g.addEventListener=function(a,b,c,d){nb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){vb(this,a,b,c,d)};\ng.dispatchEvent=function(a){var b,c=this.J;if(c)for(b=[];c;c=c.J)b.push(c);c=this.P;var d=a.type||a;if(l(a))a=new A(a,c);else if(a instanceof A)a.target=a.target||c;else{var e=a;a=new A(d,c);Ga(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=Ab(h,d,!0,a)&&e}h=a.a=c;e=Ab(h,d,!0,a)&&e;e=Ab(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=Ab(h,d,!1,a)&&e;return e};\ng.A=function(){B.L.A.call(this);if(this.c){var a=this.c,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,fb(d[e]);delete a.a[c];a.b--}}this.J=null};g.aa=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Ha=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};g.va=function(a,b,c,d){var e=this.c;a=String(a).toString();if(a in e.a){var f=e.a[a];b=hb(f,b,c,d);-1<b&&(fb(f[b]),Array.prototype.splice.call(f,b,1),0==f.length&&(delete e.a[a],e.b--))}};\nfunction Ab(a,b,c,d){b=a.c.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.Y&&h.capture==c){var m=h.listener,v=h.ga||h.src;h.ca&&ib(a.c,h);e=!1!==m.call(v,d)&&e}}return e&&0!=d.Pa};function Bb(a){return/^\\s*$/.test(a)?!1:/^[\\],:{}\\s\\u2028\\u2029]*$/.test(a.replace(/\\\\[\"\\\\\\/bfnrtu]/g,\"@\").replace(/(?:\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?=:|,|]|}|$)/g,\"]\").replace(/(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g,\"\"))}function Cb(a){a=String(a);if(Bb(a))try{return eval(\"(\"+a+\")\")}catch(b){}throw Error(\"Invalid JSON string: \"+a);}function Db(a){var b=[];Eb(new Fb,a,b);return b.join(\"\")}function Fb(){}\nfunction Eb(a,b,c){if(null==b)c.push(\"null\");else{if(\"object\"==typeof b){if(n(b)){var d=b;b=d.length;c.push(\"[\");for(var e=\"\",f=0;f<b;f++)c.push(e),Eb(a,d[f],c),e=\",\";c.push(\"]\");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push(\"{\");e=\"\";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],\"function\"!=typeof f&&(c.push(e),Gb(d,c),c.push(\":\"),Eb(a,f,c),e=\",\"));c.push(\"}\");return}}switch(typeof b){case \"string\":Gb(b,c);break;case \"number\":c.push(isFinite(b)&&\n!isNaN(b)?String(b):\"null\");break;case \"boolean\":c.push(String(b));break;case \"function\":c.push(\"null\");break;default:throw Error(\"Unknown type: \"+typeof b);}}}var Hb={'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"/\":\"\\\\/\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\x0B\":\"\\\\u000b\"},Ib=/\\uffff/.test(\"\\uffff\")?/[\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g:/[\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\nfunction Gb(a,b){b.push('\"',a.replace(Ib,function(a){var b=Hb[a];b||(b=\"\\\\u\"+(a.charCodeAt(0)|65536).toString(16).substr(1),Hb[a]=b);return b}),'\"')};function Jb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}Jb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function Kb(){this.b=this.a=null}var Nb=new Jb(function(){return new Lb},function(a){a.reset()});Kb.prototype.add=function(a,b){var c=Nb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function Ob(){var a=Pb,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Lb(){this.next=this.b=this.a=null}Lb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};Lb.prototype.reset=function(){this.next=this.b=this.a=null};function Qb(a){k.setTimeout(function(){throw a;},0)}var Rb;\nfunction Sb(){var a=k.MessageChannel;\"undefined\"===typeof a&&\"undefined\"!==typeof window&&window.postMessage&&window.addEventListener&&!y(\"Presto\")&&(a=function(){var a=document.createElement(\"IFRAME\");a.style.display=\"none\";a.src=\"\";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write(\"\");a.close();var c=\"callImmediate\"+Math.random(),d=\"file:\"==b.location.protocol?\"*\":b.location.protocol+\"//\"+b.location.host;a=r(function(a){if((\"*\"==d||a.origin==d)&&a.data==\nc)this.port1.onmessage()},this);b.addEventListener(\"message\",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if(\"undefined\"!==typeof a&&!y(\"Trident\")&&!y(\"MSIE\")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.za;c.za=null;a()}};return function(a){d.next={za:a};d=d.next;b.port2.postMessage(0)}}return\"undefined\"!==typeof document&&\"onreadystatechange\"in document.createElement(\"SCRIPT\")?function(a){var b=document.createElement(\"SCRIPT\");\nb.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};var Tb;function Ub(){if(-1!=String(k.Promise).indexOf(\"[native code]\")){var a=k.Promise.resolve(void 0);Tb=function(){a.then(Vb)}}else Tb=function(){var a=Vb;!da(k.setImmediate)||k.Window&&k.Window.prototype&&!y(\"Edge\")&&k.Window.prototype.setImmediate==k.setImmediate?(Rb||(Rb=Sb()),Rb(a)):k.setImmediate(a)}}var Wb=!1,Pb=new Kb;function Vb(){for(var a;a=Ob();){try{a.a.call(a.b)}catch(c){Qb(c)}var b=Nb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}Wb=!1};function Xb(a,b){B.call(this);this.b=a||1;this.a=b||k;this.f=r(this.ib,this);this.g=t()}u(Xb,B);g=Xb.prototype;g.$=!1;g.K=null;g.ib=function(){if(this.$){var a=t()-this.g;0<a&&a<.8*this.b?this.K=this.a.setTimeout(this.f,this.b-a):(this.K&&(this.a.clearTimeout(this.K),this.K=null),this.dispatchEvent(\"tick\"),this.$&&(this.K=this.a.setTimeout(this.f,this.b),this.g=t()))}};g.start=function(){this.$=!0;this.K||(this.K=this.a.setTimeout(this.f,this.b),this.g=t())};\nfunction Yb(a){a.$=!1;a.K&&(a.a.clearTimeout(a.K),a.K=null)}g.A=function(){Xb.L.A.call(this);Yb(this);delete this.a};function Zb(a,b,c){if(da(a))c&&(a=r(a,c));else if(a&&\"function\"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error(\"Invalid listener argument\");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)};function $b(a,b,c){w.call(this);this.f=null!=c?r(a,c):a;this.c=b;this.b=r(this.bb,this);this.a=[]}u($b,w);g=$b.prototype;g.ha=!1;g.X=null;g.Xa=function(a){this.a=arguments;this.X?this.ha=!0:ac(this)};g.A=function(){$b.L.A.call(this);this.X&&(k.clearTimeout(this.X),this.X=null,this.ha=!1,this.a=[])};g.bb=function(){this.X=null;this.ha&&(this.ha=!1,ac(this))};function ac(a){a.X=Zb(a.b,a.c);a.f.apply(null,a.a)};function C(a){w.call(this);this.b=a;this.a={}}u(C,w);var bc=[];C.prototype.aa=function(a,b,c,d){n(b)||(b&&(bc[0]=b.toString()),b=bc);for(var e=0;e<b.length;e++){var f=nb(a,b[e],c||this.handleEvent,d||!1,this.b||this);if(!f)break;this.a[f.key]=f}return this};\nC.prototype.va=function(a,b,c,d,e){if(n(b))for(var f=0;f<b.length;f++)this.va(a,b[f],c,d,e);else c=c||this.handleEvent,d=p(d)?!!d.capture:!!d,e=e||this.b||this,c=pb(c),d=!!d,b=cb(a)?jb(a.c,String(b),c,d,e):a?(a=rb(a))?jb(a,b,c,d,e):null:null,b&&(wb(b),delete this.a[b.key])};function cc(a){Ba(a.a,function(a,c){this.a.hasOwnProperty(c)&&wb(a)},a);a.a={}}C.prototype.A=function(){C.L.A.call(this);cc(this)};C.prototype.handleEvent=function(){throw Error(\"EventHandler.handleEvent not implemented\");};function dc(a,b,c){this.reset(a,b,c,void 0,void 0)}dc.prototype.a=null;var ec=0;dc.prototype.reset=function(a,b,c,d,e){\"number\"==typeof e||ec++;d||t();delete this.a};function fc(a){this.f=a;this.b=this.c=this.a=null}function D(a,b){this.name=a;this.value=b}D.prototype.toString=function(){return this.name};var gc=new D(\"SEVERE\",1E3),hc=new D(\"WARNING\",900),ic=new D(\"INFO\",800),jc=new D(\"CONFIG\",700),kc=new D(\"FINE\",500);function lc(a){if(a.c)return a.c;if(a.a)return lc(a.a);oa(\"Root logger has no level set.\");return null}fc.prototype.log=function(a,b,c){if(a.value>=lc(this).value)for(da(b)&&(b=b()),a=new dc(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};\nvar mc={},nc=null;function oc(a){nc||(nc=new fc(\"\"),mc[\"\"]=nc,nc.c=jc);var b;if(!(b=mc[a])){b=new fc(a);var c=a.lastIndexOf(\".\"),d=a.substr(c+1);c=oc(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;mc[a]=b}return b};function E(a,b){a&&a.log(hc,b,void 0)}function pc(a,b){a&&a.log(ic,b,void 0)}function F(a,b){a&&a.log(kc,b,void 0)};function qc(){this.a=oc(\"goog.labs.net.webChannel.WebChannelDebug\");this.b=!0}qc.prototype.Ea=function(){this.b=!1};function rc(a,b,c,d,e,f){H(a,function(){if(a.b)if(f){var h=\"\";for(var m=f.split(\"&\"),v=0;v<m.length;v++){var G=m[v].split(\"=\");if(1<G.length){var Z=G[0];G=G[1];var Mb=Z.split(\"_\");h=2<=Mb.length&&\"type\"==Mb[1]?h+(Z+\"=\"+G+\"&\"):h+(Z+\"=redacted&\")}}}else h=null;else h=f;return\"XMLHTTP REQ (\"+d+\") [attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+h})}\nfunction sc(a,b,c,d,e,f,h){H(a,function(){return\"XMLHTTP RESP (\"+d+\") [ attempt \"+e+\"]: \"+b+\"\\n\"+c+\"\\n\"+f+\" \"+h})}function tc(a,b,c,d){H(a,function(){return\"XMLHTTP TEXT (\"+b+\"): \"+uc(a,c)+(d?\" \"+d:\"\")})}function vc(a,b){H(a,function(){return\"TIMEOUT: \"+b})}function I(a,b){F(a.a,b)}function wc(a,b,c){(a=a.a)&&a.log(gc,c||\"Exception\",b)}function H(a,b){pc(a.a,b)}function xc(a,b){(a=a.a)&&a.log(gc,b,void 0)}\nfunction uc(a,b){if(!a.b)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(var d=0;d<c.length;d++)if(n(c[d])){var e=c[d];if(!(2>e.length)){var f=e[1];if(n(f)&&!(1>f.length)){var h=f[0];if(\"noop\"!=h&&\"stop\"!=h&&\"close\"!=h)for(var m=1;m<f.length;m++)f[m]=\"\"}}}return Db(c)}catch(v){return I(a,\"Exception parsing expected JS array - probably was not JS\"),b}};var yc=new B;function zc(a){A.call(this,\"serverreachability\",a)}u(zc,A);function Ac(a){yc.dispatchEvent(new zc(yc,a))}function Bc(a){A.call(this,\"statevent\",a)}u(Bc,A);function J(a){yc.dispatchEvent(new Bc(yc,a))}function Cc(a){A.call(this,\"timingevent\",a)}u(Cc,A);function Dc(a,b,c){yc.dispatchEvent(new Cc(yc,a,b,c))}function Ec(a,b){if(!da(a))throw Error(\"Fn must not be null and must be a function\");return k.setTimeout(function(){a()},b)};var Fc={NO_ERROR:0,jb:1,qb:2,pb:3,mb:4,ob:5,rb:6,Ra:7,TIMEOUT:8,ub:9};var Gc={lb:\"complete\",yb:\"success\",Sa:\"error\",Ra:\"abort\",wb:\"ready\",xb:\"readystatechange\",TIMEOUT:\"timeout\",sb:\"incrementaldata\",vb:\"progress\",nb:\"downloadprogress\",zb:\"uploadprogress\"};function Hc(){}Hc.prototype.a=null;function Ic(a){var b;(b=a.a)||(b={},Jc(a)&&(b[0]=!0,b[1]=!0),b=a.a=b);return b};var Kc;function Lc(){}u(Lc,Hc);function Mc(a){return(a=Jc(a))?new ActiveXObject(a):new XMLHttpRequest}function Jc(a){if(!a.b&&\"undefined\"==typeof XMLHttpRequest&&\"undefined\"!=typeof ActiveXObject){for(var b=[\"MSXML2.XMLHTTP.6.0\",\"MSXML2.XMLHTTP.3.0\",\"MSXML2.XMLHTTP\",\"Microsoft.XMLHTTP\"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.b=d}catch(e){}}throw Error(\"Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed\");}return a.b}Kc=new Lc;function K(a,b,c,d){this.i=a;this.b=b;this.f=c;this.T=d||1;this.N=new C(this);this.S=Nc;a=this.H=new Xb;a.b=Oc;a.K&&a.$?(Yb(a),a.start()):a.K&&Yb(a);this.j=null;this.c=!1;this.m=this.g=this.h=this.J=this.D=this.U=this.w=null;this.s=[];this.a=null;this.F=0;this.l=this.o=null;this.C=-1;this.B=!1;this.P=0;this.I=null;this.M=!1}var Nc=45E3,Oc=250;\nfunction Pc(a,b){switch(a){case 0:return\"Non-200 return code (\"+b+\")\";case 1:return\"XMLHTTP failure (no data)\";case 2:return\"HttpConnection timeout\";default:return\"Unknown error\"}}var Qc={},Rc={};g=K.prototype;g.setTimeout=function(a){this.S=a};function Sc(a,b,c){a.J=1;a.h=Tc(L(b));a.m=c;a.M=!0;Uc(a,null)}function Vc(a,b,c,d){a.J=1;a.h=Tc(L(b));a.m=null;a.M=c;Uc(a,d)}\nfunction Uc(a,b){a.D=t();Wc(a);a.g=L(a.h);Xc(a.g,\"t\",a.T);a.F=0;a.a=a.i.da(a.i.ia()?b:null);0<a.P&&(a.I=new $b(r(a.Qa,a,a.a),a.P));a.N.aa(a.a,\"readystatechange\",a.fb);b=a.j?Ea(a.j):{};a.m?(a.o||(a.o=\"POST\"),b[\"Content-Type\"]=\"application/x-www-form-urlencoded\",a.a.fa(a.g,a.o,a.m,b)):(a.o=\"GET\",a.a.fa(a.g,a.o,null,b));Ac(1);rc(a.b,a.o,a.g,a.f,a.T,a.m)}g.fb=function(a){a=a.target;var b=this.I;b&&3==M(a)?(I(this.b,\"Throttling readystatechange.\"),b.Xa()):this.Qa(a)};\ng.Qa=function(a){try{a==this.a?Yc(this):E(this.b.a,\"Called back with an unexpected xmlhttp\")}catch(c){if(I(this.b,\"Failed call to OnXmlHttpReadyStateChanged_\"),this.a&&this.a.V()){var b=this;wc(this.b,c,function(){return\"ResponseText: \"+b.a.V()})}else wc(this.b,c,\"No response text\")}finally{}};\nfunction Yc(a){var b=M(a.a),c=a.a.Fa(),d=a.a.W();if(!(3>b||3==b&&!Ka&&!a.a.V())){a.B||4!=b||7==c||(8==c||0>=d?Ac(3):Ac(2));Zc(a);var e=a.a.W();a.C=e;(c=a.a.V())||I(a.b,function(){return\"No response text for uri \"+a.g+\" status \"+e});a.c=200==e;sc(a.b,a.o,a.g,a.f,a.T,b,e);a.c?(a.M?($c(a,b,c),Ka&&a.c&&3==b&&ad(a)):(tc(a.b,a.f,c,null),bd(a,c)),4==b&&cd(a),a.c&&!a.B&&(4==b?a.i.ua(a):(a.c=!1,Wc(a)))):(400==e&&0<c.indexOf(\"Unknown SID\")?(a.l=3,J(12),E(a.b.a,\"XMLHTTP Unknown SID (\"+a.f+\")\")):(a.l=0,J(13),\nE(a.b.a,\"XMLHTTP Bad status \"+e+\" (\"+a.f+\")\")),cd(a),dd(a))}}function $c(a,b,c){for(var d=!0;!a.B&&a.F<c.length;){var e=ed(a,c);if(e==Rc){4==b&&(a.l=4,J(14),d=!1);tc(a.b,a.f,null,\"[Incomplete Response]\");break}else if(e==Qc){a.l=4;J(15);tc(a.b,a.f,c,\"[Invalid Chunk]\");d=!1;break}else tc(a.b,a.f,e,null),bd(a,e)}4==b&&0==c.length&&(a.l=1,J(16),d=!1);a.c=a.c&&d;d||(tc(a.b,a.f,c,\"[Invalid Chunked Response]\"),cd(a),dd(a))}\ng.eb=function(){var a=M(this.a),b=this.a.V();this.F<b.length&&(Zc(this),$c(this,a,b),this.c&&4!=a&&Wc(this))};function ad(a){a.N.aa(a.H,\"tick\",a.eb);a.H.start()}function ed(a,b){var c=a.F,d=b.indexOf(\"\\n\",c);if(-1==d)return Rc;c=Number(b.substring(c,d));if(isNaN(c))return Qc;d+=1;if(d+c>b.length)return Rc;b=b.substr(d,c);a.F=d+c;return b}g.cancel=function(){this.B=!0;cd(this)};function Wc(a){a.U=t()+a.S;fd(a,a.S)}\nfunction fd(a,b){if(null!=a.w)throw Error(\"WatchDog timer not null\");a.w=Ec(r(a.cb,a),b)}function Zc(a){a.w&&(k.clearTimeout(a.w),a.w=null)}g.cb=function(){this.w=null;var a=t();0<=a-this.U?(this.c&&xc(this.b,\"Received watchdog timeout even though request loaded successfully\"),vc(this.b,this.g),2!=this.J&&(Ac(3),J(17)),cd(this),this.l=2,dd(this)):(E(this.b.a,\"WatchDog timer called too early\"),fd(this,this.U-a))};function dd(a){a.i.Ja()||a.B||a.i.ua(a)}\nfunction cd(a){Zc(a);var b=a.I;b&&\"function\"==typeof b.Z&&b.Z();a.I=null;Yb(a.H);cc(a.N);a.a&&(b=a.a,a.a=null,b.abort(),b.Z())}function bd(a,b){try{a.i.Ma(a,b),Ac(4)}catch(c){wc(a.b,c,\"Error in httprequest callback\")}};function gd(a){if(a.v&&\"function\"==typeof a.v)return a.v();if(l(a))return a.split(\"\");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ca(a)}\nfunction hd(a,b){if(a.forEach&&\"function\"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||l(a))ta(a,b,void 0);else{if(a.O&&\"function\"==typeof a.O)var c=a.O();else if(a.v&&\"function\"==typeof a.v)c=void 0;else if(ca(a)||l(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else c=Da(a);d=gd(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}};function N(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error(\"Uneven number of arguments\");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a){a instanceof N?(c=a.O(),d=a.v()):(c=Da(a),d=Ca(a));for(var e=0;e<c.length;e++)this.set(c[e],d[e])}}g=N.prototype;g.u=function(){return this.c};g.v=function(){id(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.O=function(){id(this);return this.a.concat()};\nfunction jd(a){a.b={};a.a.length=0;a.c=0}function kd(a,b){return O(a.b,b)?(delete a.b[b],a.c--,a.a.length>2*a.c&&id(a),!0):!1}function id(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];O(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],O(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return O(this.b,a)?this.b[a]:b};g.set=function(a,b){O(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};\ng.forEach=function(a,b){for(var c=this.O(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function O(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var ld=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;function md(a,b){if(a){a=a.split(\"&\");for(var c=0;c<a.length;c++){var d=a[c].indexOf(\"=\"),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\\+/g,\" \")):\"\")}}};function P(a,b){this.b=this.j=this.f=\"\";this.i=null;this.g=this.a=\"\";this.h=!1;var c;a instanceof P?(this.h=void 0!==b?b:a.h,nd(this,a.f),this.j=a.j,od(this,a.b),pd(this,a.i),this.a=a.a,qd(this,rd(a.c)),this.g=a.g):a&&(c=String(a).match(ld))?(this.h=!!b,nd(this,c[1]||\"\",!0),this.j=sd(c[2]||\"\"),od(this,c[3]||\"\",!0),pd(this,c[4]),this.a=sd(c[5]||\"\",!0),qd(this,c[6]||\"\",!0),this.g=sd(c[7]||\"\")):(this.h=!!b,this.c=new td(null,this.h))}\nP.prototype.toString=function(){var a=[],b=this.f;b&&a.push(ud(b,vd,!0),\":\");var c=this.b;if(c||\"file\"==b)a.push(\"//\"),(b=this.j)&&a.push(ud(b,vd,!0),\"@\"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),c=this.i,null!=c&&a.push(\":\",String(c));if(c=this.a)this.b&&\"/\"!=c.charAt(0)&&a.push(\"/\"),a.push(ud(c,\"/\"==c.charAt(0)?wd:xd,!0));(c=this.c.toString())&&a.push(\"?\",c);(c=this.g)&&a.push(\"#\",ud(c,yd));return a.join(\"\")};\nP.prototype.resolve=function(a){var b=L(this),c=!!a.f;c?nd(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?od(b,a.b):c=null!=a.i;var d=a.a;if(c)pd(b,a.i);else if(c=!!a.a){if(\"/\"!=d.charAt(0))if(this.b&&!this.a)d=\"/\"+d;else{var e=b.a.lastIndexOf(\"/\");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(\"..\"==e||\".\"==e)d=\"\";else if(-1!=e.indexOf(\"./\")||-1!=e.indexOf(\"/.\")){d=0==e.lastIndexOf(\"/\",0);e=e.split(\"/\");for(var f=[],h=0;h<e.length;){var m=e[h++];\".\"==m?d&&h==e.length&&f.push(\"\"):\"..\"==m?((1<f.length||1==f.length&&\"\"!=\nf[0])&&f.pop(),d&&h==e.length&&f.push(\"\")):(f.push(m),d=!0)}d=f.join(\"/\")}else d=e}c?b.a=d:c=\"\"!==a.c.toString();c?qd(b,rd(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function L(a){return new P(a)}function nd(a,b,c){a.f=c?sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,\"\"))}function od(a,b,c){a.b=c?sd(b,!0):b}function pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error(\"Bad port number \"+b);a.i=b}else a.i=null}function qd(a,b,c){b instanceof td?(a.c=b,zd(a.c,a.h)):(c||(b=ud(b,Ad)),a.c=new td(b,a.h))}\nfunction Q(a,b,c){a.c.set(b,c)}function Xc(a,b,c){n(c)||(c=[String(c)]);Bd(a.c,b,c)}function Tc(a){Q(a,\"zx\",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^t()).toString(36));return a}function Cd(a){return a instanceof P?L(a):new P(a,void 0)}function Dd(a,b,c,d){var e=new P(null,void 0);a&&nd(e,a);b&&od(e,b);c&&pd(e,c);d&&(e.a=d);return e}function sd(a,b){return a?b?decodeURI(a.replace(/%25/g,\"%2525\")):decodeURIComponent(a):\"\"}\nfunction ud(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Ed),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")),a):null}function Ed(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)}var vd=/[#\\/\\?@]/g,xd=/[#\\?:]/g,wd=/[#\\?]/g,Ad=/[#\\?@]/g,yd=/#/g;function td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function R(a){a.a||(a.a=new N,a.b=0,a.c&&md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\\+/g,\" \")),c)}))}g=td.prototype;g.u=function(){R(this);return this.b};\ng.add=function(a,b){R(this);this.c=null;a=Fd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Gd(a,b){R(a);b=Fd(a,b);O(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,kd(a.a,b))}function Hd(a,b){R(a);b=Fd(a,b);return O(a.a.b,b)}g.forEach=function(a,b){R(this);this.a.forEach(function(c,d){ta(c,function(c){a.call(b,c,d,this)},this)},this)};\ng.O=function(){R(this);for(var a=this.a.v(),b=this.a.O(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.v=function(a){R(this);var b=[];if(l(a))Hd(this,a)&&(b=xa(b,this.a.get(Fd(this,a))));else{a=this.a.v();for(var c=0;c<a.length;c++)b=xa(b,a[c])}return b};g.set=function(a,b){R(this);this.c=null;a=Fd(this,a);Hd(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.v(a):[];return 0<a.length?String(a[0]):b};\nfunction Bd(a,b,c){Gd(a,b);0<c.length&&(a.c=null,a.a.set(Fd(a,b),ya(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return\"\";for(var a=[],b=this.a.O(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.v(d);for(var f=0;f<d.length;f++){var h=e;\"\"!==d[f]&&(h+=\"=\"+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join(\"&\")};function rd(a){var b=new td;b.c=a.c;a.a&&(b.a=new N(a.a),b.b=a.b);return b}\nfunction Fd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function zd(a,b){b&&!a.f&&(R(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(Gd(this,b),Bd(this,c,a))},a));a.f=b};function Id(){this.a=t()}var Jd=null;Id.prototype.set=function(a){this.a=a};Id.prototype.reset=function(){this.set(t())};Id.prototype.get=function(){return this.a};function Kd(){Jd||(Jd=new Id)}function Ld(){Jd||(Jd=new Id)}u(Ld,Kd);function Md(){}var Nd={OPEN:\"a\",kb:\"b\",Sa:\"c\",tb:\"d\"};function Od(){A.call(this,\"d\")}u(Od,A);function Pd(){A.call(this,\"c\")}u(Pd,A);function Qd(a,b){this.a=a;this.b=b;this.c=this.i=null;this.h=!1;this.l=null;this.f=-1;this.m=this.g=null}g=Qd.prototype;g.R=null;\nfunction Rd(a){I(a.b,\"TestConnection: starting stage 2\");var b=a.a.H.a;if(null!=b)I(a.b,function(){return\"TestConnection: skipping stage 2, precomputed result is \"+b?\"Buffered\":\"Unbuffered\"}),J(4),b?(J(10),Sd(a.a,a,!1)):(J(11),Sd(a.a,a,!0));else{a.c=new K(a,a.b,void 0,void 0);a.c.j=a.i;var c=Td(a.a,a.g,a.l);J(4);Xc(c,\"TYPE\",\"xmlhttp\");var d=a.a.j,e=a.a.J;d&&e&&Q(c,d,e);Vc(a.c,c,!1,a.g)}}g.da=function(a){return this.a.da(a)};g.abort=function(){this.c&&(this.c.cancel(),this.c=null);this.f=-1};\ng.Ja=function(){return!1};\ng.Ma=function(a,b){this.f=a.C;if(0==this.R){I(this.b,\"TestConnection: Got data for stage 1\");if(!this.a.D&&(a=a.a)){var c=a.a?a.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null;this.m=c?c:null;this.a.j&&((a=a.a?a.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?this.a.J=a:E(this.b.a,\"Missing X_HTTP_SESSION_ID in the handshake response\"))}if(b){try{var d=this.a.ma.a.parse(b)}catch(e){wc(this.b,e);Ud(this.a,this);return}this.g=d[0]}else I(this.b,\"TestConnection: Null responseText\"),Ud(this.a,this)}else if(1==\nthis.R)if(this.h)J(6);else if(\"11111\"==b){if(J(5),this.h=!0,!z||10<=Number(Ua))this.f=200,this.c.cancel(),I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)}else J(7),this.h=!1};\ng.ua=function(){this.f=this.c.C;this.c.c?0==this.R?(this.R=1,I(this.b,\"TestConnection: request complete for initial check\"),Rd(this)):1==this.R&&(I(this.b,\"TestConnection: request complete for stage 2\"),this.h?(I(this.b,\"Test connection succeeded; using streaming connection\"),J(11),Sd(this.a,this,!0)):(I(this.b,\"Test connection failed; not using streaming\"),J(10),Sd(this.a,this,!1))):(I(this.b,\"TestConnection: request failed, in state \"+this.R),0==this.R?J(8):1==this.R&&J(9),Ud(this.a,this))};\ng.ia=function(){return this.a.ia()};g.ra=function(){return this.a.ra()};function Vd(){this.a=this.b=null};function S(){this.a=new N}function Wd(a){var b=typeof a;return\"object\"==b&&a||\"function\"==b?\"o\"+(a[q]||(a[q]=++ea)):b.charAt(0)+a}S.prototype.u=function(){return this.a.u()};S.prototype.add=function(a){this.a.set(Wd(a),a)};S.prototype.contains=function(a){a=Wd(a);return O(this.a.b,a)};S.prototype.v=function(){return this.a.v()};function Xd(a,b){this.a=a;this.b=b};function Yd(a){this.g=a||Zd;this.f=k.pa&&k.pa.Ka&&k.pa.Ka()&&k.pa.Ka().Bb?this.g:1;this.a=null;1<this.f&&(this.a=new S);this.b=null;this.c=[]}var Zd=10;function $d(a,b){a.a||-1==b.indexOf(\"spdy\")&&-1==b.indexOf(\"quic\")&&-1==b.indexOf(\"h2\")||(a.f=a.g,a.a=new S,a.b&&(ae(a,a.b),a.b=null))}function be(a){return a.b?!0:a.a?a.a.u()>=a.f:!1}function ce(a,b){return a.b?a.b==b:a.a?a.a.contains(b):!1}function ae(a,b){a.a?a.a.add(b):a.b=b}\nfunction de(a,b){a.b&&a.b==b?a.b=null:a.a&&a.a.contains(b)&&kd(a.a.a,Wd(b))}Yd.prototype.cancel=function(){this.c=ee(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(ta(this.a.v(),function(a){a.cancel()}),jd(this.a.a))};function ee(a){if(null!=a.b)return a.c.concat(a.b.s);if(null!=a.a&&0!=a.a.a.c){var b=a.c;ta(a.a.v(),function(a){b=b.concat(a.s)});return b}return ya(a.c)}function fe(a,b){a.c=a.c.concat(b)};function ge(){}ge.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};ge.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function he(){this.a=new ge}function ie(a,b,c){var d=c||\"\";try{hd(a,function(a,c){var e=a;p(a)&&(e=Db(a));b.push(d+c+\"=\"+encodeURIComponent(e))})}catch(e){throw b.push(d+\"type=\"+encodeURIComponent(\"_badmap\")),e;}};function je(a,b){var c=new qc;I(c,\"TestLoadImage: loading \"+a);var d=new Image;d.onload=ia(ke,c,d,\"TestLoadImage: loaded\",!0,b);d.onerror=ia(ke,c,d,\"TestLoadImage: error\",!1,b);d.onabort=ia(ke,c,d,\"TestLoadImage: abort\",!1,b);d.ontimeout=ia(ke,c,d,\"TestLoadImage: timeout\",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function ke(a,b,c,d,e){try{I(a,c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){wc(a,f)}};function T(a){B.call(this);this.headers=new N;this.F=a||null;this.f=!1;this.D=this.a=null;this.M=this.s=\"\";this.j=0;this.g=\"\";this.h=this.I=this.o=this.H=!1;this.l=0;this.B=null;this.N=le;this.C=this.m=!1}u(T,B);var le=\"\";T.prototype.b=oc(\"goog.net.XhrIo\");var me=/^https?$/i,ne=[\"POST\",\"PUT\"];g=T.prototype;\ng.fa=function(a,b,c,d){if(this.a)throw Error(\"[goog.net.XhrIo] Object is active with another request=\"+this.s+\"; newUri=\"+a);b=b?b.toUpperCase():\"GET\";this.s=a;this.g=\"\";this.j=0;this.M=b;this.H=!1;this.f=!0;this.a=this.F?Mc(this.F):Mc(Kc);this.D=this.F?Ic(this.F):Ic(Kc);this.a.onreadystatechange=r(this.La,this);try{F(this.b,U(this,\"Opening Xhr\")),this.I=!0,this.a.open(b,String(a),!0),this.I=!1}catch(f){F(this.b,U(this,\"Error opening Xhr: \"+f.message));oe(this,f);return}a=c||\"\";var e=new N(this.headers);\nd&&hd(d,function(a,b){e.set(b,a)});d=ua(e.O());c=k.FormData&&a instanceof k.FormData;!(0<=sa(ne,b))||d||c||e.set(\"Content-Type\",\"application/x-www-form-urlencoded;charset=utf-8\");e.forEach(function(a,b){this.a.setRequestHeader(b,a)},this);this.N&&(this.a.responseType=this.N);\"withCredentials\"in this.a&&this.a.withCredentials!==this.m&&(this.a.withCredentials=this.m);try{pe(this),0<this.l&&(this.C=qe(this.a),F(this.b,U(this,\"Will abort after \"+this.l+\"ms if incomplete, xhr2 \"+this.C)),this.C?(this.a.timeout=\nthis.l,this.a.ontimeout=r(this.Ia,this)):this.B=Zb(this.Ia,this.l,this)),F(this.b,U(this,\"Sending request\")),this.o=!0,this.a.send(a),this.o=!1}catch(f){F(this.b,U(this,\"Send error: \"+f.message)),oe(this,f)}};function qe(a){return z&&Ta(9)&&\"number\"==typeof a.timeout&&void 0!==a.ontimeout}function va(a){return\"content-type\"==a.toLowerCase()}\ng.Ia=function(){\"undefined\"!=typeof goog&&this.a&&(this.g=\"Timed out after \"+this.l+\"ms, aborting\",this.j=8,F(this.b,U(this,this.g)),this.dispatchEvent(\"timeout\"),this.abort(8))};function oe(a,b){a.f=!1;a.a&&(a.h=!0,a.a.abort(),a.h=!1);a.g=b;a.j=5;re(a);se(a)}function re(a){a.H||(a.H=!0,a.dispatchEvent(\"complete\"),a.dispatchEvent(\"error\"))}\ng.abort=function(a){this.a&&this.f&&(F(this.b,U(this,\"Aborting\")),this.f=!1,this.h=!0,this.a.abort(),this.h=!1,this.j=a||7,this.dispatchEvent(\"complete\"),this.dispatchEvent(\"abort\"),se(this))};g.A=function(){this.a&&(this.f&&(this.f=!1,this.h=!0,this.a.abort(),this.h=!1),se(this,!0));T.L.A.call(this)};g.La=function(){this.i||(this.I||this.o||this.h?te(this):this.ab())};g.ab=function(){te(this)};\nfunction te(a){if(a.f&&\"undefined\"!=typeof goog)if(a.D[1]&&4==M(a)&&2==a.W())F(a.b,U(a,\"Local request error detected and ignored\"));else if(a.o&&4==M(a))Zb(a.La,0,a);else if(a.dispatchEvent(\"readystatechange\"),4==M(a)){F(a.b,U(a,\"Request complete\"));a.f=!1;try{var b=a.W();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.s).match(ld)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;\nf=h.substr(0,h.length-1)}e=!me.test(f?f.toLowerCase():\"\")}d=e}d?(a.dispatchEvent(\"complete\"),a.dispatchEvent(\"success\")):(a.j=6,a.g=a.Ga()+\" [\"+a.W()+\"]\",re(a))}finally{se(a)}}}function se(a,b){if(a.a){pe(a);var c=a.a,d=a.D[0]?aa:null;a.a=null;a.D=null;b||a.dispatchEvent(\"ready\");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(gc,\"Problem encountered resetting onreadystatechange: \"+e.message,void 0)}}}function pe(a){a.a&&a.C&&(a.a.ontimeout=null);a.B&&(k.clearTimeout(a.B),a.B=null)}\nfunction M(a){return a.a?a.a.readyState:0}g.W=function(){try{return 2<M(this)?this.a.status:-1}catch(a){return-1}};g.Ga=function(){try{return 2<M(this)?this.a.statusText:\"\"}catch(a){return F(this.b,\"Can not get status: \"+a.message),\"\"}};g.V=function(){try{return this.a?this.a.responseText:\"\"}catch(a){return F(this.b,\"Can not get responseText: \"+a.message),\"\"}};\ng.Ya=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));a:{a=b;if(k.JSON)try{var c=k.JSON.parse(a);break a}catch(d){}c=Cb(a)}return c}};g.Fa=function(){return this.j};g.Za=function(){return l(this.g)?this.g:String(this.g)};function U(a,b){return b+\" [\"+a.M+\" \"+a.s+\" \"+a.W()+\"]\"};function ue(a){var b=\"\";Ba(a,function(a,d){b+=d;b+=\":\";b+=a;b+=\"\\r\\n\"});return b}function ve(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=ue(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?\"=\"+encodeURIComponent(String(c)):\"\";if(b+=c){c=a.indexOf(\"#\");0>c&&(c=a.length);d=a.indexOf(\"?\");if(0>d||d>c){d=c;var e=\"\"}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+\"&\"+b:b:c;a=a[0]+(a[1]?\"?\"+a[1]:\"\")+a[2]}return a}Q(a,b,c);return a};function we(a){this.ya=0;this.g=[];this.a=new qc;this.H=new Vd;this.ja=this.wa=this.F=this.ka=this.b=this.J=this.j=this.U=this.h=this.M=this.i=null;this.Ua=this.P=0;this.la=this.B=this.o=this.m=this.l=this.f=null;this.s=this.xa=this.N=-1;this.T=this.w=this.C=0;this.S=a&&a.supportsCrossDomainXhr||!1;this.I=\"\";this.c=new Yd(a&&a.concurrentRequestLimit);this.ma=new he;this.D=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;this.Ta=a&&a.fastHandshake||!1;a&&a.Ea&&this.a.Ea()}g=we.prototype;\ng.oa=8;g.G=1;function xe(a){I(a.a,\"disconnect()\");ye(a);if(3==a.G){var b=a.P++,c=L(a.F);Q(c,\"SID\",a.I);Q(c,\"RID\",b);Q(c,\"TYPE\",\"terminate\");ze(a,c);b=new K(a,a.a,b,void 0);b.J=2;b.h=Tc(L(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.h.toString(),\"\"));!c&&k.Image&&((new Image).src=b.h,c=!0);c||(b.a=b.i.da(null),b.a.fa(b.h));b.D=t();Wc(b)}Ae(a)}\nfunction ye(a){a.B&&(a.B.abort(),a.B=null);a.b&&(a.b.cancel(),a.b=null);a.m&&(k.clearTimeout(a.m),a.m=null);Be(a);a.c.cancel();a.l&&(k.clearTimeout(a.l),a.l=null)}function Ce(a,b){1E3==a.g.length&&xc(a.a,function(){return\"Already have 1000 queued maps upon queueing \"+Db(b)});a.g.push(new Xd(a.Ua++,b));3==a.G&&De(a)}g.Ja=function(){return 0==this.G};function De(a){be(a.c)||a.l||(a.l=Ec(r(a.Oa,a),0),a.C=0)}\nfunction Ee(a,b){var c=a.c;if((c.b?1:c.a?c.a.u():0)>=a.c.f-(a.l?1:0))return xc(a.a,\"Unexpected retry request is scheduled.\"),!1;if(a.l)return I(a.a,\"Use the retry request that is already scheduled.\"),a.g=b.s.concat(a.g),!0;if(1==a.G||2==a.G||2<=a.C)return!1;I(a.a,\"Going to retry POST\");a.l=Ec(r(a.Oa,a,b),Fe(a,a.C));a.C++;return!0}\ng.Oa=function(a){this.l=null;I(this.a,\"startForwardChannel_\");if(1==this.G)if(a)xc(this.a,\"Not supposed to retry the open\");else{I(this.a,\"open_()\");this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new K(this,this.a,a,void 0),c=this.i;this.M&&(c?(c=Ea(c),Ga(c,this.M)):c=this.M);null===this.h&&(b.j=c);var d=Ge(this,b),e=L(this.F);Q(e,\"RID\",a);Q(e,\"CVER\",21);this.D&&this.j&&Q(e,\"X-HTTP-Session-Id\",this.j);ze(this,e);this.h&&c&&ve(e,this.h,c);ae(this.c,b);this.Ta?(Q(e,\"$req\",d),Sc(b,e,null)):Sc(b,\ne,d);this.G=2}else 3==this.G&&(a?He(this,a):0==this.g.length?I(this.a,\"startForwardChannel_ returned: nothing to send\"):be(this.c)?xc(this.a,\"startForwardChannel_ returned: connection already in progress\"):(He(this),I(this.a,\"startForwardChannel_ finished, sent request\")))};\nfunction He(a,b){var c;b?c=b.f:c=a.P++;var d=L(a.F);Q(d,\"SID\",a.I);Q(d,\"RID\",c);Q(d,\"AID\",a.N);ze(a,d);a.h&&a.i&&ve(d,a.h,a.i);c=new K(a,a.a,c,a.C+1);null===a.h&&(c.j=a.i);b&&(a.g=b.s.concat(a.g));b=Ge(a,c);c.setTimeout(Math.round(1E4)+Math.round(1E4*Math.random()));ae(a.c,c);Sc(c,d,b)}function ze(a,b){a.f&&hd({},function(a,d){Q(b,d,a)})}\nfunction Ge(a,b){var c=Math.min(a.g.length,1E3),d=a.f?r(a.f.Va,a.f,a):null;a:for(var e=a.g,f=-1;;){var h=[\"count=\"+c];-1==f?0<c?(f=e[0].a,h.push(\"ofs=\"+f)):f=0:h.push(\"ofs=\"+f);for(var m=!0,v=0;v<c;v++){var G=e[v].a,Z=e[v].b;G-=f;if(0>G)f=Math.max(0,e[v].a-100),m=!1;else try{ie(Z,h,\"req\"+G+\"_\")}catch(Mb){d&&d(Z)}}if(m){d=h.join(\"&\");break a}}a=a.g.splice(0,c);b.s=a;return d}function Ie(a){if(!a.b&&!a.m){a.T=1;var b=a.Na;Tb||Ub();Wb||(Tb(),Wb=!0);Pb.add(b,a);a.w=0}}\nfunction Je(a){if(a.b||a.m)return xc(a.a,\"Request already in progress\"),!1;if(3<=a.w)return!1;I(a.a,\"Going to retry GET\");a.T++;a.m=Ec(r(a.Na,a),Fe(a,a.w));a.w++;return!0}\ng.Na=function(){this.m=null;I(this.a,\"Creating new HttpRequest\");this.b=new K(this,this.a,\"rpc\",this.T);null===this.h&&(this.b.j=this.i);this.b.P=0;var a=L(this.wa);Q(a,\"RID\",\"rpc\");Q(a,\"SID\",this.I);Q(a,\"CI\",this.la?\"0\":\"1\");Q(a,\"AID\",this.N);ze(this,a);Q(a,\"TYPE\",\"xmlhttp\");this.h&&this.i&&ve(a,this.h,this.i);Vc(this.b,a,!0,this.ja);I(this.a,\"New Request created\")};\nfunction Sd(a,b,c){I(a.a,\"Test Connection Finished\");var d=b.m;d&&$d(a.c,d);a.la=c;a.s=b.f;I(a.a,\"connectChannel_()\");a.F=Ke(a,a.ka);De(a)}function Ud(a,b){I(a.a,\"Test Connection Failed\");a.s=b.f;V(a,2)}\ng.Ma=function(a,b){if(0!=this.G&&(this.b==a||ce(this.c,a)))if(this.s=a.C,ce(this.c,a)&&3==this.G){try{var c=this.ma.a.parse(b)}catch(f){c=null}if(n(c)&&3==c.length)if(b=c,0==b[0])a:if(I(this.a,\"Server claims our backchannel is missing.\"),this.m)I(this.a,\"But we are currently starting the request.\");else{if(this.b)if(this.b.D+3E3<a.D)Be(this),this.b.cancel(),this.b=null;else break a;else E(this.a.a,\"We do not have a BackChannel established\");Je(this);J(18)}else this.xa=b[1],a=this.xa-this.N,0<a&&(b=\nb[2],I(this.a,b+\" bytes (in \"+a+\" arrays) are outstanding on the BackChannel\"),37500>b&&this.la&&0==this.w&&!this.o&&(this.o=Ec(r(this.$a,this),6E3)));else I(this.a,\"Bad POST response data returned\"),V(this,11)}else if(this.b==a&&Be(this),!/^[\\s\\xa0]*$/.test(b))for(b=c=this.ma.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.N=d[0];d=d[1];if(2==this.G)if(\"c\"==d[0]){this.I=d[1];this.ja=d[2];var e=d[3];null!=e&&(this.oa=e,H(this.a,\"VER=\"+this.oa));d=d[4];null!=d&&(this.ya=d,H(this.a,\"SVER=\"+this.ya));\nthis.D&&(d=a.a)&&((e=d.a?d.a.getResponseHeader(\"X-Client-Wire-Protocol\"):null)&&$d(this.c,e),this.j&&((d=d.a?d.a.getResponseHeader(\"X-HTTP-Session-Id\"):null)?(this.J=d,Q(this.F,this.j,d)):E(this.a.a,\"Missing X_HTTP_SESSION_ID in the handshake response\")));this.G=3;this.f&&this.f.Da();this.wa=Td(this,this.ja,this.ka);Ie(this)}else\"stop\"!=d[0]&&\"close\"!=d[0]||V(this,7);else 3==this.G&&(\"stop\"==d[0]||\"close\"==d[0]?\"stop\"==d[0]?V(this,7):xe(this):\"noop\"!=d[0]&&this.f&&this.f.Ca(d),this.w=0)}};\ng.$a=function(){null!=this.o&&(this.o=null,this.b.cancel(),this.b=null,Je(this),J(19))};function Be(a){null!=a.o&&(k.clearTimeout(a.o),a.o=null)}\ng.ua=function(a){I(this.a,\"Request complete\");var b=null;if(this.b==a){Be(this);this.b=null;var c=2}else if(ce(this.c,a))b=a.s,de(this.c,a),c=1;else return;this.s=a.C;if(0!=this.G)if(a.c)1==c?(Dc(a.m?a.m.length:0,t()-a.D,this.C),De(this)):Ie(this);else{var d=a.l;if(3==d||0==d&&0<this.s)I(this.a,\"Not retrying due to error type\");else{var e=this;I(this.a,function(){return\"Maybe retrying, last error: \"+Pc(d,e.s)});if(1==c&&Ee(this,a)||2==c&&Je(this))return;I(this.a,\"Exceeded max number of retries\")}b&&\n0<b.length&&fe(this.c,b);I(this.a,\"Error: HTTP request failed\");switch(d){case 1:V(this,5);break;case 4:V(this,10);break;case 3:V(this,6);break;default:V(this,2)}}};function Fe(a,b){var c=5E3+Math.floor(1E4*Math.random());a.ra()||(I(a.a,\"Inactive channel\"),c*=2);return c*b}\nfunction V(a,b){H(a.a,\"Error code \"+b);if(2==b){var c=null;a.f&&(c=null);var d=r(a.hb,a);c||(c=new P(\"//www.google.com/images/cleardot.gif\"),k.location&&\"http\"==k.location.protocol||nd(c,\"https\"),Tc(c));je(c.toString(),d)}else J(2);I(a.a,\"HttpChannel: error - \"+b);a.G=0;a.f&&a.f.Ba(b);Ae(a);ye(a)}g.hb=function(a){a?(H(this.a,\"Successfully pinged google.com\"),J(2)):(H(this.a,\"Failed to ping google.com\"),J(1))};\nfunction Ae(a){a.G=0;a.s=-1;if(a.f){var b=ee(a.c);if(0!=b.length||0!=a.g.length)I(a.a,function(){return\"Number of undelivered maps, pending: \"+b.length+\", outgoing: \"+a.g.length}),a.c.c.length=0,ya(a.g),a.g.length=0;a.f.Aa()}}function Ke(a,b){b=Le(a,null,b);I(a.a,\"GetForwardChannelUri: \"+b);return b}function Td(a,b,c){b=Le(a,a.ia()?b:null,c);I(a.a,\"GetBackChannelUri: \"+b);return b}\nfunction Le(a,b,c){var d=Cd(c);if(\"\"!=d.b)b&&od(d,b+\".\"+d.b),pd(d,d.i);else{var e=k.location,f;b?f=b+\".\"+e.hostname:f=e.hostname;d=Dd(e.protocol,f,e.port,c)}a.U&&Ba(a.U,function(a,b){Q(d,b,a)});b=a.j;c=a.J;b&&c&&Q(d,b,c);Q(d,\"VER\",a.oa);ze(a,d);return d}g.da=function(a){if(a&&!this.S)throw Error(\"Can't create secondary domain capable XhrIo object.\");a=new T;a.m=this.S;return a};g.ra=function(){return!!this.f&&!0};g.ia=function(){return this.S};new Ld;function Me(){}g=Me.prototype;g.Da=function(){};\ng.Ca=function(){};g.Ba=function(){};g.Aa=function(){};g.Va=function(){};function Ne(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf(\"/\",0))b=d;else{var e;(e=\"\"==b)||(e=b.length-1,e=0<=e&&b.indexOf(\"/\",e)==e);e?b+=d:b+=\"/\"+d}}return b};function Oe(){if(z&&!(10<=Number(Ua)))throw Error(\"Environmental error: no available transport.\");}Oe.prototype.a=function(a,b){return new W(a,b)};\nfunction W(a,b){B.call(this);this.a=new we(b);this.b=a;this.s=b&&b.testUrl?b.testUrl:Ne(this.b,\"test\");this.f=oc(\"goog.labs.net.webChannel.WebChannelBaseTransport\");this.g=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a[\"X-Client-Protocol\"]=\"webchannel\":a={\"X-Client-Protocol\":\"webchannel\"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a[\"X-WebChannel-Content-Type\"]=b.messageContentType:a={\"X-WebChannel-Content-Type\":b.messageContentType});\nthis.a.M=a;(a=b&&b.httpHeadersOverwriteParam)&&!/^[\\s\\xa0]*$/.test(a)&&(this.a.h=a);this.o=b&&b.supportsCrossDomainXhr||!1;this.m=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!/^[\\s\\xa0]*$/.test(b)&&(this.a.j=b,a=this.g,null!==a&&b in a&&(a=this.g,b in a&&delete a[b],E(this.f,\"Ignore httpSessionIdParam also specified with messageUrlParams: \"+b)));this.h=new Pe(this)}u(W,B);\nW.prototype.j=function(){this.a.f=this.h;this.o&&(this.a.S=!0);var a=this.a,b=this.s,c=this.b,d=this.g||void 0;I(a.a,\"connect()\");J(0);a.ka=c;a.U=d||{};a.D&&(I(a.a,\"connect() bypassed channel-test.\"),a.H.b=[],a.H.a=!1);I(a.a,\"connectTest_()\");a.B=new Qd(a,a.a);null===a.h&&(a.B.i=a.i);c=b;a.h&&a.i&&(c=ve(b,a.h,a.i));a=a.B;a.l=c;b=Ke(a.a,a.l);J(3);c=a.a.H.b;null!=c?(a.g=c[0],a.R=1,Rd(a)):(Xc(b,\"MODE\",\"init\"),!a.a.D&&a.a.j&&Xc(b,\"X-HTTP-Session-Id\",a.a.j),a.c=new K(a,a.b,void 0,void 0),a.c.j=a.i,Vc(a.c,\nb,!1,null),a.R=0)};W.prototype.close=function(){xe(this.a)};W.prototype.l=function(a){if(l(a)){var b={};b.__data__=a;Ce(this.a,b)}else this.m?(b={},b.__data__=Db(a),Ce(this.a,b)):Ce(this.a,a)};W.prototype.A=function(){this.a.f=null;delete this.h;xe(this.a);delete this.a;W.L.A.call(this)};function Qe(a){Od.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}u(Qe,Od);\nfunction Re(){Pd.call(this);this.status=1}u(Re,Pd);function Pe(a){this.a=a}u(Pe,Me);Pe.prototype.Da=function(){pc(this.a.f,\"WebChannel opened on \"+this.a.b);this.a.dispatchEvent(\"a\")};Pe.prototype.Ca=function(a){this.a.dispatchEvent(new Qe(a))};Pe.prototype.Ba=function(a){pc(this.a.f,\"WebChannel aborted on \"+this.a.b+\" due to channel error: \"+a);this.a.dispatchEvent(new Re(a))};Pe.prototype.Aa=function(){pc(this.a.f,\"WebChannel closed on \"+this.a.b);this.a.dispatchEvent(\"b\")};var Se=ia(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Oe);function Te(){this.b=[];this.a=[]}function Ue(a){0==a.b.length&&(a.b=a.a,a.b.reverse(),a.a=[]);return a.b.pop()}Te.prototype.u=function(){return this.b.length+this.a.length};Te.prototype.contains=function(a){return 0<=sa(this.b,a)||0<=sa(this.a,a)};Te.prototype.v=function(){for(var a=[],b=this.b.length-1;0<=b;--b)a.push(this.b[b]);var c=this.a.length;for(b=0;b<c;++b)a.push(this.a[b]);return a};function Ve(a,b){w.call(this);this.h=a||0;this.c=b||10;if(this.h>this.c)throw Error(We);this.a=new Te;this.b=new S;this.g=null;this.ba()}u(Ve,w);var We=\"[goog.structs.Pool] Min can not be greater than max\";g=Ve.prototype;g.ea=function(){var a=t();if(!(null!=this.g&&0>a-this.g)){for(var b;0<this.a.u()&&(b=Ue(this.a),!this.ta(b));)this.ba();!b&&this.u()<this.c&&(b=this.qa());b&&(this.g=a,this.b.add(b));return b}};g.gb=function(a){return kd(this.b.a,Wd(a))?(this.na(a),!0):!1};\ng.na=function(a){kd(this.b.a,Wd(a));this.ta(a)&&this.u()<this.c?this.a.a.push(a):Xe(a)};g.ba=function(){for(var a=this.a;this.u()<this.h;){var b=this.qa();a.a.push(b)}for(;this.u()>this.c&&0<this.a.u();)Xe(Ue(a))};g.qa=function(){return{}};function Xe(a){if(\"function\"==typeof a.Z)a.Z();else for(var b in a)a[b]=null}g.ta=function(a){return\"function\"==typeof a.Wa?a.Wa():!0};g.contains=function(a){return this.a.contains(a)||this.b.contains(a)};g.u=function(){return this.a.u()+this.b.u()};\ng.A=function(){Ve.L.A.call(this);if(0<this.b.u())throw Error(\"[goog.structs.Pool] Objects not released\");delete this.b;for(var a=this.a;0!=a.b.length||0!=a.a.length;)Xe(Ue(a));delete this.a};function Ye(a,b){this.a=a;this.b=b};function Ze(a){this.a=[];if(a)a:{if(a instanceof Ze){var b=a.O();a=a.v();if(0>=this.u()){for(var c=this.a,d=0;d<b.length;d++)c.push(new Ye(b[d],a[d]));break a}}else b=Da(a),a=Ca(a);for(d=0;d<b.length;d++)$e(this,b[d],a[d])}}function $e(a,b,c){var d=a.a;d.push(new Ye(b,c));b=d.length-1;a=a.a;for(c=a[b];0<b;)if(d=b-1>>1,a[d].a>c.a)a[b]=a[d],b=d;else break;a[b]=c}Ze.prototype.v=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].b);return b};\nZe.prototype.O=function(){for(var a=this.a,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].a);return b};Ze.prototype.u=function(){return this.a.length};function af(){Ze.call(this)}u(af,Ze);function X(a,b){this.f=new af;Ve.call(this,a,b)}u(X,Ve);g=X.prototype;g.ea=function(a,b){if(!a)return X.L.ea.call(this);$e(this.f,void 0!==b?b:100,a);this.sa()};g.sa=function(){for(var a=this.f;0<a.u();){var b=this.ea();if(b){var c=a,d=c.a,e=d.length;var f=d[0];if(0>=e)f=void 0;else{if(1==e)wa(d);else{d[0]=d.pop();d=0;c=c.a;e=c.length;for(var h=c[d];d<e>>1;){var m=2*d+1,v=2*d+2;m=v<e&&c[v].a<c[m].a?v:m;if(c[m].a>h.a)break;c[d]=c[m];d=m}c[d]=h}f=f.b}f.apply(this,[b])}else break}};\ng.na=function(a){X.L.na.call(this,a);this.sa()};g.ba=function(){X.L.ba.call(this);this.sa()};g.A=function(){X.L.A.call(this);k.clearTimeout(void 0);wa(this.f.a);this.f=null};function Y(a,b,c,d){this.l=a;this.j=!!d;X.call(this,b,c)}u(Y,X);Y.prototype.qa=function(){var a=new T,b=this.l;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.j&&(a.m=!0);return a};Y.prototype.ta=function(a){return!a.i&&!a.a};Oe.prototype.createWebChannel=Oe.prototype.a;W.prototype.send=W.prototype.l;W.prototype.open=W.prototype.j;W.prototype.close=W.prototype.close;Fc.NO_ERROR=0;Fc.TIMEOUT=8;Fc.HTTP_ERROR=6;Gc.COMPLETE=\"complete\";Md.EventType=Nd;Nd.OPEN=\"a\";Nd.CLOSE=\"b\";Nd.ERROR=\"c\";Nd.MESSAGE=\"d\";B.prototype.listen=B.prototype.aa;Y.prototype.getObject=Y.prototype.ea;Y.prototype.releaseObject=Y.prototype.gb;T.prototype.listenOnce=T.prototype.Ha;T.prototype.getLastError=T.prototype.Za;T.prototype.getLastErrorCode=T.prototype.Fa;\nT.prototype.getStatus=T.prototype.W;T.prototype.getStatusText=T.prototype.Ga;T.prototype.getResponseJson=T.prototype.Ya;T.prototype.getResponseText=T.prototype.V;T.prototype.getResponseText=T.prototype.V;T.prototype.send=T.prototype.fa;module.exports={createWebChannelTransport:Se,ErrorCode:Fc,EventType:Gc,WebChannel:Md,XhrIoPool:Y};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/webchannel-wrapper/dist/index.js\n// module id = 121\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\nexport { StreamBridge };\n\n//# sourceMappingURL=stream_bridge.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/stream_bridge.js\n// module id = 122\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublicBlob } from '../api/blob';\nimport { Firestore, PublicCollectionReference, PublicDocumentReference, PublicDocumentSnapshot, PublicFirestore, PublicQuery, PublicQuerySnapshot, PublicTransaction, PublicWriteBatch } from '../api/database';\nimport { FieldPath } from '../api/field_path';\nimport { PublicFieldValue } from '../api/field_value';\nimport { GeoPoint } from '../api/geo_point';\nimport { shallowCopy } from '../util/obj';\nvar firestoreNamespace = {\n    Firestore: PublicFirestore,\n    GeoPoint: GeoPoint,\n    Blob: PublicBlob,\n    Transaction: PublicTransaction,\n    WriteBatch: PublicWriteBatch,\n    DocumentReference: PublicDocumentReference,\n    DocumentSnapshot: PublicDocumentSnapshot,\n    Query: PublicQuery,\n    QuerySnapshot: PublicQuerySnapshot,\n    CollectionReference: PublicCollectionReference,\n    FieldPath: FieldPath,\n    FieldValue: PublicFieldValue,\n    setLogLevel: Firestore.setLogLevel\n};\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n */\nexport function configureForFirebase(firebase) {\n    firebase.INTERNAL.registerService('firestore', function (app) { return new Firestore(app); }, shallowCopy(firestoreNamespace));\n}\n/**\n * Exports the Firestore namespace into the provided `exportObject` object under\n * the key 'firestore'. This is used for wrapped binary that exposes Firestore\n * as a goog module.\n */\nexport function configureForStandalone(exportObject) {\n    var copiedNamespace = shallowCopy(firestoreNamespace);\n    // Unlike the use with Firebase, the standalone allows the use of the\n    // constructor, so export it's internal class\n    copiedNamespace['Firestore'] = Firestore;\n    exportObject['firestore'] = copiedNamespace;\n}\n\n//# sourceMappingURL=config.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/platform/config.js\n// module id = 123\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { FirestoreClient } from '../core/firestore_client';\nimport { Bound, Direction, fieldFilter, OrderBy, Query as InternalQuery, RelationFilter, RelationOp } from '../core/query';\nimport { ChangeType } from '../core/view_snapshot';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ArrayValue, ObjectValue, RefValue } from '../model/field_value';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { ResourcePath } from '../model/path';\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { assert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateAtLeastNumberOfArgs, validateBetweenNumberOfArgs, validateDefined, validateExactNumberOfArgs, validateNamedOptionalType, validateNamedType, validateOptionalArgType, validateOptionNames, valueDescription } from '../util/input_validation';\nimport * as log from '../util/log';\nimport { LogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { EmptyCredentialsProvider, FirebaseCredentialsProvider, makeCredentialsProvider } from './credentials';\nimport { isPartialObserver } from './observer';\nimport { DocumentKeyReference, fieldPathFromArgument, UserDataConverter } from './user_data_converter';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nvar FirestoreSettings = /** @class */ (function () {\n    function FirestoreSettings(settings) {\n        if (settings.host === undefined) {\n            if (settings.ssl !== undefined) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n            }\n            this.host = DEFAULT_HOST;\n            this.ssl = DEFAULT_SSL;\n        }\n        else {\n            validateNamedType('settings', 'string', 'host', settings.host);\n            this.host = settings.host;\n            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n            this.ssl = objUtils.defaulted(settings.ssl, DEFAULT_SSL);\n        }\n        validateOptionNames('settings', settings, ['host', 'ssl', 'credentials']);\n        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);\n        this.credentials = settings.credentials;\n    }\n    FirestoreSettings.prototype.equals = function (other) {\n        return (this.host === other.host &&\n            this.ssl === other.ssl &&\n            this.credentials === other.credentials);\n    };\n    return FirestoreSettings;\n}());\nvar FirestoreConfig = /** @class */ (function () {\n    function FirestoreConfig() {\n    }\n    return FirestoreConfig;\n}());\n/**\n * The root reference to the database.\n */\nvar Firestore = /** @class */ (function () {\n    function Firestore(databaseIdOrApp) {\n        var _this = this;\n        this._queue = new AsyncQueue();\n        this.INTERNAL = {\n            delete: function () {\n                if (_this._firestoreClient) {\n                    return _this._firestoreClient.shutdown();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            },\n            // Exposed via INTERNAL for use in tests.\n            disableNetwork: function () { return _this._firestoreClient.disableNetwork(); },\n            enableNetwork: function () { return _this._firestoreClient.enableNetwork(); },\n            drainAsyncQueue: function (executeDelayedTasks) {\n                return _this._queue.drain(executeDelayedTasks);\n            }\n        };\n        var config = new FirestoreConfig();\n        if (typeof databaseIdOrApp.options === 'object') {\n            // This is very likely a Firebase app object\n            // TODO(b/34177605): Can we somehow use instanceof?\n            var app = databaseIdOrApp;\n            config.firebaseApp = app;\n            config.databaseId = Firestore.databaseIdFromApp(app);\n            config.persistenceKey = config.firebaseApp.name;\n            config.credentials = new FirebaseCredentialsProvider(app);\n        }\n        else {\n            var external_1 = databaseIdOrApp;\n            if (!external_1.projectId) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');\n            }\n            config.databaseId = new DatabaseId(external_1.projectId, external_1.database);\n            // Use a default persistenceKey that lines up with FirebaseApp.\n            config.persistenceKey = '[DEFAULT]';\n            config.credentials = new EmptyCredentialsProvider();\n        }\n        config.settings = new FirestoreSettings({});\n        this._config = config;\n        this._databaseId = config.databaseId;\n    }\n    Firestore.prototype.settings = function (settingsLiteral) {\n        validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n        if (objUtils.contains(settingsLiteral, 'persistence')) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"persistence\" is now specified with a separate call to ' +\n                'firestore.enablePersistence().');\n        }\n        var newSettings = new FirestoreSettings(settingsLiteral);\n        if (this._firestoreClient && !this._config.settings.equals(newSettings)) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\n                'be changed. You can only call settings() before calling any other ' +\n                'methods on a Firestore object.');\n        }\n        this._config.settings = newSettings;\n        if (newSettings.credentials !== undefined) {\n            this._config.credentials = makeCredentialsProvider(newSettings.credentials);\n        }\n    };\n    Firestore.prototype.enablePersistence = function () {\n        if (this._firestoreClient) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +\n                'be enabled. You can only call enablePersistence() before calling ' +\n                'any other methods on a Firestore object.');\n        }\n        return this.configureClient(/* persistence= */ true);\n    };\n    Firestore.prototype.ensureClientConfigured = function () {\n        if (!this._firestoreClient) {\n            this.configureClient(/* persistence= */ false);\n        }\n        return this._firestoreClient;\n    };\n    Firestore.prototype.configureClient = function (persistence) {\n        var _this = this;\n        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');\n        assert(!this._firestoreClient, 'configureClient() called multiple times');\n        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);\n        var preConverter = function (value) {\n            if (value instanceof DocumentReference) {\n                var thisDb = _this._config.databaseId;\n                var otherDb = value.firestore._config.databaseId;\n                if (!otherDb.equals(thisDb)) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +\n                        (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\n                        (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n                }\n                return new DocumentKeyReference(_this._config.databaseId, value._key);\n            }\n            else {\n                return value;\n            }\n        };\n        this._dataConverter = new UserDataConverter(preConverter);\n        this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);\n        return this._firestoreClient.start(persistence);\n    };\n    Firestore.databaseIdFromApp = function (app) {\n        var options = app.options;\n        if (!objUtils.contains(options, 'projectId')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreId' once alpha testers have upgraded.\n            if (objUtils.contains(options, 'firestoreId')) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreId\" is now specified as \"projectId\" in ' +\n                    'firebase.initializeApp.');\n            }\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        }\n        if (objUtils.contains(options, 'firestoreOptions')) {\n            // TODO(b/62673263): We can safely remove the special handling of\n            // 'firestoreOptions' once alpha testers have upgraded.\n            throw new FirestoreError(Code.INVALID_ARGUMENT, '\"firestoreOptions\" values are now specified with ' +\n                'Firestore.settings()');\n        }\n        var projectId = options['projectId'];\n        if (!projectId || typeof projectId !== 'string') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');\n        }\n        return new DatabaseId(projectId);\n    };\n    Object.defineProperty(Firestore.prototype, \"app\", {\n        get: function () {\n            if (!this._config.firebaseApp) {\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n                    'not available');\n            }\n            return this._config.firebaseApp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n        validateArgType('Firestore.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');\n        }\n        this.ensureClientConfigured();\n        return new CollectionReference(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.doc = function (pathString) {\n        validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n        validateArgType('Firestore.doc', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');\n        }\n        this.ensureClientConfigured();\n        return DocumentReference.forPath(ResourcePath.fromString(pathString), this);\n    };\n    Firestore.prototype.runTransaction = function (updateFunction) {\n        var _this = this;\n        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n        return this.ensureClientConfigured().transaction(function (transaction) {\n            return updateFunction(new Transaction(_this, transaction));\n        });\n    };\n    Firestore.prototype.batch = function () {\n        this.ensureClientConfigured();\n        return new WriteBatch(this);\n    };\n    Object.defineProperty(Firestore, \"logLevel\", {\n        get: function () {\n            switch (log.getLogLevel()) {\n                case LogLevel.DEBUG:\n                    return 'debug';\n                case LogLevel.ERROR:\n                    return 'error';\n                case LogLevel.SILENT:\n                    return 'silent';\n                default:\n                    return fail('Unknown log level: ' + log.getLogLevel());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Firestore.setLogLevel = function (level) {\n        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n        validateArgType('Firestore.setLogLevel', 'string', 1, level);\n        switch (level) {\n            case 'debug':\n                log.setLogLevel(log.LogLevel.DEBUG);\n                break;\n            case 'error':\n                log.setLogLevel(log.LogLevel.ERROR);\n                break;\n            case 'silent':\n                log.setLogLevel(log.LogLevel.SILENT);\n                break;\n            default:\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);\n        }\n    };\n    return Firestore;\n}());\nexport { Firestore };\n/**\n * A reference to a transaction.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(_firestore, _transaction) {\n        this._firestore = _firestore;\n        this._transaction = _transaction;\n    }\n    Transaction.prototype.get = function (documentRef) {\n        var _this = this;\n        validateExactNumberOfArgs('Transaction.get', arguments, 1);\n        var ref = validateReference('Transaction.get', documentRef, this._firestore);\n        return this._transaction\n            .lookup([ref._key])\n            .then(function (docs) {\n            if (!docs || docs.length !== 1) {\n                return fail('Mismatch in docs returned from document lookup.');\n            }\n            var doc = docs[0];\n            if (doc instanceof NoDocument) {\n                return new DocumentSnapshot(_this._firestore, ref._key, null, false);\n            }\n            return new DocumentSnapshot(_this._firestore, ref._key, doc, false);\n        });\n    };\n    Transaction.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n        var ref = validateReference('Transaction.set', documentRef, this._firestore);\n        options = validateSetOptions('Transaction.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value)\n            : this._firestore._dataConverter.parseSetData('Transaction.set', value);\n        this._transaction.set(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('Transaction.update', arguments, 2);\n            ref = validateReference('Transaction.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);\n        }\n        this._transaction.update(ref._key, parsed);\n        return this;\n    };\n    Transaction.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n        var ref = validateReference('Transaction.delete', documentRef, this._firestore);\n        this._transaction.delete(ref._key);\n        return this;\n    };\n    return Transaction;\n}());\nexport { Transaction };\nvar WriteBatch = /** @class */ (function () {\n    function WriteBatch(_firestore) {\n        this._firestore = _firestore;\n        this._mutations = [];\n        this._committed = false;\n    }\n    WriteBatch.prototype.set = function (documentRef, value, options) {\n        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);\n        options = validateSetOptions('WriteBatch.set', options);\n        var parsed = options.merge\n            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value)\n            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 3] = arguments[_i];\n        }\n        this.verifyNotCommitted();\n        var ref;\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n            ref = validateReference('WriteBatch.update', documentRef, this._firestore);\n            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);\n        }\n        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));\n        return this;\n    };\n    WriteBatch.prototype.delete = function (documentRef) {\n        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n        this.verifyNotCommitted();\n        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));\n        return this;\n    };\n    WriteBatch.prototype.commit = function () {\n        this.verifyNotCommitted();\n        this._committed = true;\n        if (this._mutations.length > 0) {\n            return this._firestore.ensureClientConfigured().write(this._mutations);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    WriteBatch.prototype.verifyNotCommitted = function () {\n        if (this._committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\n                'has been called.');\n        }\n    };\n    return WriteBatch;\n}());\nexport { WriteBatch };\n/**\n * A reference to a particular document in a collection in the database.\n */\nvar DocumentReference = /** @class */ (function () {\n    function DocumentReference(_key, firestore) {\n        this._key = _key;\n        this.firestore = firestore;\n        this._firestoreClient = this.firestore.ensureClientConfigured();\n    }\n    DocumentReference.forPath = function (path, firestore) {\n        if (path.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\n                'references must have an even number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return new DocumentReference(new DocumentKey(path), firestore);\n    };\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\n        get: function () {\n            return new CollectionReference(this._key.path.popLast(), this.firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\n        get: function () {\n            return this._key.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentReference.prototype.collection = function (pathString) {\n        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n        validateArgType('DocumentReference.collection', 'string', 1, pathString);\n        if (!pathString) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return new CollectionReference(this._key.path.child(path), this.firestore);\n    };\n    DocumentReference.prototype.isEqual = function (other) {\n        if (!(other instanceof DocumentReference)) {\n            throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n        }\n        return this.firestore === other.firestore && this._key.equals(other._key);\n    };\n    DocumentReference.prototype.set = function (value, options) {\n        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n        options = validateSetOptions('DocumentReference.set', options);\n        var parsed = options.merge\n            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value)\n            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));\n    };\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n        var moreFieldsAndValues = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            moreFieldsAndValues[_i - 2] = arguments[_i];\n        }\n        var parsed;\n        if (typeof fieldOrUpdateData === 'string' ||\n            fieldOrUpdateData instanceof ExternalFieldPath) {\n            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);\n        }\n        else {\n            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);\n        }\n        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));\n    };\n    DocumentReference.prototype.delete = function () {\n        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n        return this._firestoreClient.write([\n            new DeleteMutation(this._key, Precondition.NONE)\n        ]);\n    };\n    DocumentReference.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);\n        var options = {\n            includeMetadataChanges: false\n        };\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('DocumentReference.onSnapshot', options, [\n                'includeMetadataChanges'\n            ]);\n            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);\n            currArg++;\n        }\n        var internalOptions = {\n            includeDocumentMetadataChanges: options.includeMetadataChanges,\n            includeQueryMetadataChanges: options.includeMetadataChanges\n        };\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(internalOptions, observer);\n    };\n    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (snapshot) {\n                if (observer.next) {\n                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');\n                    var doc = snapshot.docs.get(_this._key);\n                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache));\n                }\n            },\n            error: errHandler\n        });\n        var internalListener = this._firestoreClient.listen(InternalQuery.atPath(this._key.path), asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            _this._firestoreClient.unlisten(internalListener);\n        };\n    };\n    DocumentReference.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('DocumentReference.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeQueryMetadataChanges: true,\n                includeDocumentMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (snap) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    if (!snap.exists && snap.metadata.fromCache) {\n                        // TODO(dimond): If we're online and the document doesn't\n                        // exist then we resolve with a doc.exists set to false. If\n                        // we're offline however, we reject the Promise in this\n                        // case. Two options: 1) Cache the negative response from\n                        // the server so we can deliver that even when you're\n                        // offline 2) Actually reject the Promise in the online case\n                        // if the document doesn't exist.\n                        reject(new FirestoreError(Code.ABORTED, 'Failed to get document because the client is ' + 'offline.'));\n                    }\n                    else {\n                        resolve(snap);\n                    }\n                },\n                error: reject\n            });\n        });\n    };\n    return DocumentReference;\n}());\nexport { DocumentReference };\nvar DocumentSnapshot = /** @class */ (function () {\n    function DocumentSnapshot(_firestore, _key, _document, _fromCache) {\n        this._firestore = _firestore;\n        this._key = _key;\n        this._document = _document;\n        this._fromCache = _fromCache;\n    }\n    DocumentSnapshot.prototype.data = function () {\n        validateExactNumberOfArgs('DocumentSnapshot.data', arguments, 0);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.data().');\n        }\n        return this.convertObject(this._document.data);\n    };\n    DocumentSnapshot.prototype.get = function (fieldPath) {\n        validateExactNumberOfArgs('DocumentSnapshot.get', arguments, 1);\n        if (!this._document) {\n            throw new FirestoreError(Code.NOT_FOUND, \"This document doesn't exist. Check doc.exists to make sure \" +\n                'the document exists before calling doc.get().');\n        }\n        var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n        return value === undefined ? undefined : this.convertValue(value);\n    };\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n        get: function () {\n            return this._key.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n        get: function () {\n            return new DocumentReference(this._key, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n        get: function () {\n            return this._document !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n        get: function () {\n            return {\n                hasPendingWrites: this._document !== null && this._document.hasLocalMutations,\n                fromCache: this._fromCache\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DocumentSnapshot.prototype.convertObject = function (data) {\n        var _this = this;\n        var result = {};\n        data.forEach(function (key, value) {\n            result[key] = _this.convertValue(value);\n        });\n        return result;\n    };\n    DocumentSnapshot.prototype.convertValue = function (value) {\n        if (value instanceof ObjectValue) {\n            return this.convertObject(value);\n        }\n        else if (value instanceof ArrayValue) {\n            return this.convertArray(value);\n        }\n        else if (value instanceof RefValue) {\n            var key = value.value();\n            var database = this._firestore.ensureClientConfigured().databaseId();\n            if (!value.databaseId.equals(database)) {\n                // TODO(b/64130202): Somehow support foreign references.\n                log.error(\"Document \" + this._key.path + \" contains a document \" +\n                    \"reference within a different database (\" +\n                    (value.databaseId.projectId + \"/\" + value.databaseId.database + \") which is not \") +\n                    \"supported. It will be treated as a reference in the current \" +\n                    (\"database (\" + database.projectId + \"/\" + database.database + \") \") +\n                    \"instead.\");\n            }\n            return new DocumentReference(key, this._firestore);\n        }\n        else {\n            return value.value();\n        }\n    };\n    DocumentSnapshot.prototype.convertArray = function (data) {\n        var _this = this;\n        return data.internalValue.map(function (value) {\n            return _this.convertValue(value);\n        });\n    };\n    return DocumentSnapshot;\n}());\nexport { DocumentSnapshot };\nvar Query = /** @class */ (function () {\n    function Query(_query, firestore) {\n        this._query = _query;\n        this.firestore = firestore;\n    }\n    Query.prototype.where = function (field, opStr, value) {\n        validateExactNumberOfArgs('Query.where', arguments, 3);\n        validateArgType('Query.where', 'string', 2, opStr);\n        validateDefined('Query.where', 3, value);\n        var fieldValue;\n        var fieldPath = fieldPathFromArgument('Query.where', field);\n        if (fieldPath.isKeyField()) {\n            if (typeof value === 'string') {\n                if (value.indexOf('/') !== -1) {\n                    // TODO(dimond): Allow slashes once ancestor queries are supported\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it contains a slash.');\n                }\n                if (value === '') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +\n                        'valid document ID if the first parameter is ' +\n                        'FieldPath.documentId(), but it was an empty string.');\n                }\n                var path = this._query.path.child(new ResourcePath([value]));\n                assert(path.length % 2 === 0, 'Path should be a document key');\n                fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));\n            }\n            else if (value instanceof DocumentReference) {\n                var ref = value;\n                fieldValue = new RefValue(this.firestore._databaseId, ref._key);\n            }\n            else {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.where() requires its third parameter to be a \" +\n                    \"string or a DocumentReference if the first parameter is \" +\n                    \"FieldPath.documentId(), but it was: \" +\n                    (valueDescription(value) + \".\"));\n            }\n        }\n        else {\n            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);\n        }\n        var filter = fieldFilter(fieldPath, RelationOp.fromString(opStr), fieldValue);\n        this.validateNewFilter(filter);\n        return new Query(this._query.addFilter(filter), this.firestore);\n    };\n    Query.prototype.orderBy = function (field, directionStr) {\n        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n        validateOptionalArgType('Query.orderBy', 'string', 2, directionStr);\n        var direction;\n        if (directionStr === undefined || directionStr === 'asc') {\n            direction = Direction.ASCENDING;\n        }\n        else if (directionStr === 'desc') {\n            direction = Direction.DESCENDING;\n        }\n        else {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function Query.orderBy() has unknown direction '\" + directionStr + \"', \" +\n                \"expected 'asc' or 'desc'.\");\n        }\n        if (this._query.startAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +\n                'Query.startAfter() before calling Query.orderBy().');\n        }\n        if (this._query.endAt !== null) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +\n                'Query.endBefore() before calling Query.orderBy().');\n        }\n        var fieldPath = fieldPathFromArgument('Query.orderBy', field);\n        var orderBy = new OrderBy(fieldPath, direction);\n        this.validateNewOrderBy(orderBy);\n        return new Query(this._query.addOrderBy(orderBy), this.firestore);\n    };\n    Query.prototype.limit = function (n) {\n        validateExactNumberOfArgs('Query.limit', arguments, 1);\n        validateArgType('Query.limit', 'number', 1, n);\n        if (n <= 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. Query limit (\" + n + \") is invalid. Limit must be \" +\n                'positive.');\n        }\n        return new Query(this._query.withLimit(n), this.firestore);\n    };\n    Query.prototype.startAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.startAfter = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withStartAt(bound), this.firestore);\n    };\n    Query.prototype.endBefore = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, \n        /*before=*/ true);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.endAt = function (docOrField) {\n        var fields = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            fields[_i - 1] = arguments[_i];\n        }\n        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, \n        /*before=*/ false);\n        return new Query(this._query.withEndAt(bound), this.firestore);\n    };\n    Query.prototype.isEqual = function (other) {\n        if (!(other instanceof Query)) {\n            throw invalidClassError('isEqual', 'Query', 1, other);\n        }\n        return (this.firestore === other.firestore && this._query.equals(other._query));\n    };\n    /** Helper function to create a bound from a document or fields */\n    Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {\n        validateDefined(methodName, 1, docOrField);\n        if (docOrField instanceof DocumentSnapshot) {\n            if (fields.length > 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"().\");\n            }\n            var snap = docOrField;\n            if (!snap.exists) {\n                throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\n                    (methodName + \"().\"));\n            }\n            return this.boundFromDocument(methodName, snap._document, before);\n        }\n        else {\n            var allFields = [docOrField].concat(fields);\n            return this.boundFromFields(methodName, allFields, before);\n        }\n    };\n    /**\n     * Create a Bound from a query and a document.\n     *\n     * Note that the Bound will always include the key of the document\n     * and so only the provided document will compare equal to the returned\n     * position.\n     *\n     * Will throw if the document does not contain all fields of the order by\n     * of the query.\n     */\n    Query.prototype.boundFromDocument = function (methodName, doc, before) {\n        var components = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {\n            var orderBy = _a[_i];\n            if (orderBy.field.isKeyField()) {\n                components.push(new RefValue(this.firestore._databaseId, doc.key));\n            }\n            else {\n                var value = doc.field(orderBy.field);\n                if (value !== undefined) {\n                    components.push(value);\n                }\n                else {\n                    var field = orderBy.field.canonicalString();\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\n                        (\"document for which the field '\" + field + \"' (used as the \") +\n                        \"orderBy) does not exist.\");\n                }\n            }\n        }\n        return new Bound(components, before);\n    };\n    /**\n     * Converts a list of field values to a Bound for the given query.\n     */\n    Query.prototype.boundFromFields = function (methodName, values, before) {\n        // Use explicit order by's because it has to match the query the user made\n        var orderBy = this._query.explicitOrderBy;\n        if (values.length > orderBy.length) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\n                \"The number of arguments must be less than or equal to the \" +\n                \"number of Query.orderBy() clauses\");\n        }\n        var components = [];\n        for (var i = 0; i < values.length; i++) {\n            var rawValue = values[i];\n            var orderByComponent = orderBy[i];\n            if (orderByComponent.field.isKeyField()) {\n                if (typeof rawValue !== 'string') {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\n                        (methodName + \"(), but got a \" + typeof rawValue));\n                }\n                if (rawValue.indexOf('/') !== -1) {\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Document ID '\" + rawValue + \"' contains a slash in \" +\n                        (methodName + \"()\"));\n                }\n                var key = new DocumentKey(this._query.path.child(rawValue));\n                components.push(new RefValue(this.firestore._databaseId, key));\n            }\n            else {\n                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);\n                components.push(wrapped);\n            }\n        }\n        return new Bound(components, before);\n    };\n    Query.prototype.onSnapshot = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n        var options = {};\n        var observer;\n        var currArg = 0;\n        if (typeof args[currArg] === 'object' &&\n            !isPartialObserver(args[currArg])) {\n            options = args[currArg];\n            validateOptionNames('Query.onSnapshot', options, [\n                'includeQueryMetadataChanges',\n                'includeDocumentMetadataChanges'\n            ]);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeDocumentMetadataChanges', options.includeDocumentMetadataChanges);\n            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeQueryMetadataChanges', options.includeQueryMetadataChanges);\n            currArg++;\n        }\n        if (isPartialObserver(args[currArg])) {\n            observer = args[currArg];\n        }\n        else {\n            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);\n            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);\n            observer = {\n                next: args[currArg],\n                error: args[currArg + 1],\n                complete: args[currArg + 2]\n            };\n        }\n        return this.onSnapshotInternal(options, observer);\n    };\n    Query.prototype.onSnapshotInternal = function (options, observer) {\n        var _this = this;\n        var errHandler = function (err) {\n            console.error('Uncaught Error in onSnapshot:', err);\n        };\n        if (observer.error) {\n            errHandler = observer.error.bind(observer);\n        }\n        var asyncObserver = new AsyncObserver({\n            next: function (result) {\n                if (observer.next) {\n                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));\n                }\n            },\n            error: errHandler\n        });\n        var firestoreClient = this.firestore.ensureClientConfigured();\n        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);\n        return function () {\n            asyncObserver.mute();\n            firestoreClient.unlisten(internalListener);\n        };\n    };\n    Query.prototype.get = function () {\n        var _this = this;\n        validateExactNumberOfArgs('Query.get', arguments, 0);\n        return new Promise(function (resolve, reject) {\n            var unlisten = _this.onSnapshotInternal({\n                includeDocumentMetadataChanges: false,\n                includeQueryMetadataChanges: true,\n                waitForSyncWhenOnline: true\n            }, {\n                next: function (result) {\n                    // Remove query first before passing event to user to avoid\n                    // user actions affecting the now stale query.\n                    unlisten();\n                    resolve(result);\n                },\n                error: reject\n            });\n        });\n    };\n    Query.prototype.validateNewFilter = function (filter) {\n        if (filter instanceof RelationFilter && filter.isInequality()) {\n            var existingField = this._query.getInequalityFilterField();\n            if (existingField !== null && !existingField.equals(filter.field)) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\n                    ' (<, <=, >, or >=) must be on the same field. But you have' +\n                    (\" inequality filters on '\" + existingField.toString() + \"'\") +\n                    (\" and '\" + filter.field.toString() + \"'\"));\n            }\n            var firstOrderByField = this._query.getFirstOrderByField();\n            if (firstOrderByField !== null) {\n                this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);\n            }\n        }\n    };\n    Query.prototype.validateNewOrderBy = function (orderBy) {\n        if (this._query.getFirstOrderByField() === null) {\n            // This is the first order by. It must match any inequality.\n            var inequalityField = this._query.getInequalityFilterField();\n            if (inequalityField !== null) {\n                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n            }\n        }\n    };\n    Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {\n        if (!orderBy.equals(inequality)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\n                (\"(<, <=, >, or >=) on field '\" + inequality.toString() + \"' \") +\n                (\"and so you must also use '\" + inequality.toString() + \"' \") +\n                \"as your first Query.orderBy(), but your first Query.orderBy() \" +\n                (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n        }\n    };\n    return Query;\n}());\nexport { Query };\nvar QuerySnapshot = /** @class */ (function () {\n    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {\n        this._firestore = _firestore;\n        this._originalQuery = _originalQuery;\n        this._snapshot = _snapshot;\n        this._cachedChanges = null;\n        this.metadata = {\n            fromCache: _snapshot.fromCache,\n            hasPendingWrites: _snapshot.hasPendingWrites\n        };\n    }\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n        get: function () {\n            var result = [];\n            this.forEach(function (doc) { return result.push(doc); });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n        get: function () {\n            return this._snapshot.docs.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n        get: function () {\n            return this._snapshot.docs.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n        var _this = this;\n        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n        this._snapshot.docs.forEach(function (doc) {\n            callback.call(thisArg, _this.convertToDocumentImpl(doc));\n        });\n    };\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n        get: function () {\n            return new Query(this._originalQuery, this._firestore);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QuerySnapshot.prototype, \"docChanges\", {\n        get: function () {\n            if (!this._cachedChanges) {\n                this._cachedChanges = changesFromSnapshot(this._firestore, this._snapshot);\n            }\n            return this._cachedChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {\n        return new DocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache);\n    };\n    return QuerySnapshot;\n}());\nexport { QuerySnapshot };\nvar CollectionReference = /** @class */ (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(path, firestore) {\n        var _this = _super.call(this, InternalQuery.atPath(path), firestore) || this;\n        if (path.length % 2 !== 1) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +\n                'references must have an odd number of segments, but ' +\n                (path.canonicalString() + \" has \" + path.length));\n        }\n        return _this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\n        get: function () {\n            return this._query.path.lastSegment();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\n        get: function () {\n            var parentPath = this._query.path.popLast();\n            if (parentPath.isEmpty()) {\n                return null;\n            }\n            else {\n                return new DocumentReference(new DocumentKey(parentPath), this.firestore);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\n        get: function () {\n            return this._query.path.canonicalString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (pathString) {\n        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n        // We allow omission of 'pathString' but explicitly prohibit passing in both\n        // 'undefined' and 'null'.\n        if (arguments.length === 0) {\n            pathString = AutoId.newId();\n        }\n        validateArgType('CollectionReference.doc', 'string', 1, pathString);\n        if (pathString === '') {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');\n        }\n        var path = ResourcePath.fromString(pathString);\n        return DocumentReference.forPath(this._query.path.child(path), this.firestore);\n    };\n    CollectionReference.prototype.add = function (value) {\n        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n        validateArgType('CollectionReference.add', 'object', 1, value);\n        var docRef = this.doc();\n        return docRef.set(value).then(function () { return docRef; });\n    };\n    return CollectionReference;\n}(Query));\nexport { CollectionReference };\nfunction validateSetOptions(methodName, options) {\n    if (options === undefined) {\n        return {\n            merge: false\n        };\n    }\n    validateOptionNames(methodName, options, ['merge']);\n    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n    return options;\n}\nfunction validateReference(methodName, documentRef, firestore) {\n    if (!(documentRef instanceof DocumentReference)) {\n        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n    }\n    else if (documentRef.firestore !== firestore) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n    }\n    else {\n        return documentRef;\n    }\n}\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot(firestore, snapshot) {\n    if (snapshot.oldDocs.isEmpty()) {\n        // Special case the first snapshot because index calculation is easy and\n        // fast\n        var lastDoc_1;\n        var index_1 = 0;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');\n            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');\n            lastDoc_1 = change.doc;\n            return {\n                type: 'added',\n                doc: doc,\n                oldIndex: -1,\n                newIndex: index_1++\n            };\n        });\n    }\n    else {\n        // A DocumentSet that is updated incrementally as changes are applied to use\n        // to lookup the index of a document.\n        var indexTracker_1 = snapshot.oldDocs;\n        return snapshot.docChanges.map(function (change) {\n            var doc = new DocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache);\n            var oldIndex = -1;\n            var newIndex = -1;\n            if (change.type !== ChangeType.Added) {\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\n                assert(oldIndex >= 0, 'Index for document not found');\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\n            }\n            if (change.type !== ChangeType.Removed) {\n                indexTracker_1 = indexTracker_1.add(change.doc);\n                newIndex = indexTracker_1.indexOf(change.doc.key);\n            }\n            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };\n        });\n    }\n}\nfunction resultChangeType(type) {\n    switch (type) {\n        case ChangeType.Added:\n            return 'added';\n        case ChangeType.Modified:\n        case ChangeType.Metadata:\n            return 'modified';\n        case ChangeType.Removed:\n            return 'removed';\n        default:\n            return fail('Unknown change type: ' + type);\n    }\n}\n// Export the classes with a private constructor (it will fail if invoked\n// at runtime). Note that this still allows instanceof checks.\n// We're treating the variables as class names, so disable checking for lower\n// case variable names.\n// tslint:disable:variable-name\nexport var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');\nexport var PublicTransaction = makeConstructorPrivate(Transaction, 'Use firebase.firestore().runTransaction() instead.');\nexport var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');\nexport var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');\nexport var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport var PublicQuery = makeConstructorPrivate(Query);\nexport var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.');\n// tslint:enable:variable-name\n\n//# sourceMappingURL=database.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/database.js\n// module id = 124\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventManager, QueryListener } from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport { LocalStore } from '../local/local_store';\nimport { MemoryPersistence } from '../local/memory_persistence';\nimport { NoOpGarbageCollector } from '../local/no_op_garbage_collector';\nimport { Datastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Code } from '../util/error';\nimport { debug } from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'FirestoreClient';\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nvar FirestoreClient = /** @class */ (function () {\n    function FirestoreClient(platform, databaseInfo, credentials, \n        /**\n         * Asynchronous queue responsible for all of our internal processing. When\n         * we get incoming work from the user (via public API) or the network\n         * (incoming GRPC messages), we should always schedule onto this queue.\n         * This ensures all of our work is properly serialized (e.g. we don't\n         * start processing a new operation while the previous one is waiting for\n         * an async I/O to complete).\n         */\n        asyncQueue) {\n        this.platform = platform;\n        this.databaseInfo = databaseInfo;\n        this.credentials = credentials;\n        this.asyncQueue = asyncQueue;\n    }\n    /**\n     * Starts up the FirestoreClient, returning only whether or not enabling\n     * persistence succeeded.\n     *\n     * The intent here is to \"do the right thing\" as far as users are concerned.\n     * Namely, in cases where offline persistence is requested and possible,\n     * enable it, but otherwise fall back to persistence disabled. For the most\n     * part we expect this to succeed one way or the other so we don't expect our\n     * users to actually wait on the firestore.enablePersistence Promise since\n     * they generally won't care.\n     *\n     * Of course some users actually do care about whether or not persistence\n     * was successfully enabled, so the Promise returned from this method\n     * indicates this outcome.\n     *\n     * This presents a problem though: even before enablePersistence resolves or\n     * rejects, users may have made calls to e.g. firestore.collection() which\n     * means that the FirestoreClient in there will be available and will be\n     * enqueuing actions on the async queue.\n     *\n     * Meanwhile any failure of an operation on the async queue causes it to\n     * panic and reject any further work, on the premise that unhandled errors\n     * are fatal.\n     *\n     * Consequently the fallback is handled internally here in start, and if the\n     * fallback succeeds we signal success to the async queue even though the\n     * start() itself signals failure.\n     *\n     * @param usePersistence Whether or not to attempt to enable persistence.\n     * @returns A deferred result indicating the user-visible result of enabling\n     *     offline persistence. This method will reject this if IndexedDB fails to\n     *     start for any reason. If usePersistence is false this is\n     *     unconditionally resolved.\n     */\n    FirestoreClient.prototype.start = function (usePersistence) {\n        var _this = this;\n        // We defer our initialization until we get the current user from\n        // setUserChangeListener(). We block the async queue until we got the\n        // initial user and the initialization is completed. This will prevent\n        // any scheduled work from happening before initialization is completed.\n        //\n        // If initializationDone resolved then the FirestoreClient is in a usable\n        // state.\n        var initializationDone = new Deferred();\n        // If usePersistence is true, certain classes of errors while starting are\n        // recoverable but only by falling back to persistence disabled.\n        //\n        // If there's an error in the first case but not in recovery we cannot\n        // reject the promise blocking the async queue because this will cause the\n        // async queue to panic.\n        var persistenceResult = new Deferred();\n        var initialized = false;\n        this.credentials.setUserChangeListener(function (user) {\n            if (!initialized) {\n                initialized = true;\n                _this.initializePersistence(usePersistence, persistenceResult)\n                    .then(function () { return _this.initializeRest(user); })\n                    .then(initializationDone.resolve, initializationDone.reject);\n            }\n            else {\n                _this.asyncQueue.schedule(function () {\n                    return _this.handleUserChange(user);\n                });\n            }\n        });\n        // Block the async queue until initialization is done\n        this.asyncQueue.schedule(function () {\n            return initializationDone.promise;\n        });\n        // Return only the result of enabling persistence. Note that this does not\n        // need to await the completion of initializationDone because the result of\n        // this method should not reflect any other kind of failure to start.\n        return persistenceResult.promise;\n    };\n    /** Enables the network connection and requeues all pending operations. */\n    FirestoreClient.prototype.enableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.enableNetwork();\n        });\n    };\n    /**\n     * Initializes persistent storage, attempting to use IndexedDB if\n     * usePersistence is true or memory-only if false.\n     *\n     * If IndexedDB fails because it's already open in another tab or because the\n     * platform can't possibly support our implementation then this method rejects\n     * the persistenceResult and falls back on memory-only persistence.\n     *\n     * @param usePersistence indicates whether or not to use offline persistence\n     * @param persistenceResult A deferred result indicating the user-visible\n     *     result of enabling offline persistence. This method will reject this if\n     *     IndexedDB fails to start for any reason. If usePersistence is false\n     *     this is unconditionally resolved.\n     * @returns a Promise indicating whether or not initialization should\n     *     continue, i.e. that one of the persistence implementations actually\n     *     succeeded.\n     */\n    FirestoreClient.prototype.initializePersistence = function (usePersistence, persistenceResult) {\n        var _this = this;\n        if (usePersistence) {\n            return this.startIndexedDbPersistence()\n                .then(persistenceResult.resolve)\n                .catch(function (error) {\n                // Regardless of whether or not the retry succeeds, from an user\n                // perspective, offline persistence has failed.\n                persistenceResult.reject(error);\n                // An unknown failure on the first stage shuts everything down.\n                if (!_this.canFallback(error)) {\n                    return Promise.reject(error);\n                }\n                console.warn('Error enabling offline storage. Falling back to' +\n                    ' storage disabled: ' +\n                    error);\n                return _this.startMemoryPersistence();\n            });\n        }\n        else {\n            // When usePersistence == false, enabling offline persistence is defined\n            // to unconditionally succeed. This allows start() to have the same\n            // signature for both cases, despite the fact that the returned promise\n            // is only used in the enablePersistence call.\n            persistenceResult.resolve();\n            return this.startMemoryPersistence();\n        }\n    };\n    FirestoreClient.prototype.canFallback = function (error) {\n        return (error.code === Code.FAILED_PRECONDITION ||\n            error.code === Code.UNIMPLEMENTED);\n    };\n    /**\n     * Starts IndexedDB-based persistence.\n     *\n     * @returns A promise indicating success or failure.\n     */\n    FirestoreClient.prototype.startIndexedDbPersistence = function () {\n        // TODO(http://b/33384523): For now we just disable garbage collection\n        // when persistence is enabled.\n        this.garbageCollector = new NoOpGarbageCollector();\n        var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);\n        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.\n        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {\n            useProto3Json: true\n        });\n        this.persistence = new IndexedDbPersistence(storagePrefix, serializer);\n        return this.persistence.start();\n    };\n    /**\n     * Starts Memory-backed persistence. In practice this cannot fail.\n     *\n     * @returns A promise that will successfully resolve.\n     */\n    FirestoreClient.prototype.startMemoryPersistence = function () {\n        this.garbageCollector = new EagerGarbageCollector();\n        this.persistence = new MemoryPersistence();\n        return this.persistence.start();\n    };\n    /**\n     * Initializes the rest of the FirestoreClient, assuming the initial user\n     * has been obtained from the credential provider and some persistence\n     * implementation is available in this.persistence.\n     */\n    FirestoreClient.prototype.initializeRest = function (user) {\n        var _this = this;\n        return this.platform\n            .loadConnection(this.databaseInfo)\n            .then(function (connection) {\n            _this.localStore = new LocalStore(_this.persistence, user, _this.garbageCollector);\n            var serializer = _this.platform.newSerializer(_this.databaseInfo.databaseId);\n            var datastore = new Datastore(_this.databaseInfo, _this.asyncQueue, connection, _this.credentials, serializer);\n            var onlineStateChangedHandler = function (onlineState) {\n                _this.eventMgr.onOnlineStateChanged(onlineState);\n            };\n            _this.remoteStore = new RemoteStore(_this.localStore, datastore, onlineStateChangedHandler);\n            _this.syncEngine = new SyncEngine(_this.localStore, _this.remoteStore, user);\n            // Setup wiring between sync engine and remote store\n            _this.remoteStore.syncEngine = _this.syncEngine;\n            _this.eventMgr = new EventManager(_this.syncEngine);\n            // NOTE: RemoteStore depends on LocalStore (for persisting stream\n            // tokens, refilling mutation queue, etc.) so must be started after\n            // LocalStore.\n            return _this.localStore.start();\n        })\n            .then(function () {\n            return _this.remoteStore.start();\n        });\n    };\n    FirestoreClient.prototype.handleUserChange = function (user) {\n        this.asyncQueue.verifyOperationInProgress();\n        debug(LOG_TAG, 'User Changed: ' + user.uid);\n        return this.syncEngine.handleUserChange(user);\n    };\n    /** Disables the network connection. Pending operations will not complete. */\n    FirestoreClient.prototype.disableNetwork = function () {\n        var _this = this;\n        return this.asyncQueue.schedule(function () {\n            return _this.remoteStore.disableNetwork();\n        });\n    };\n    FirestoreClient.prototype.shutdown = function () {\n        var _this = this;\n        return this.asyncQueue\n            .schedule(function () {\n            _this.credentials.removeUserChangeListener();\n            return _this.remoteStore.shutdown();\n        })\n            .then(function () {\n            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n            return _this.persistence.shutdown();\n        });\n    };\n    FirestoreClient.prototype.listen = function (query, observer, options) {\n        var _this = this;\n        var listener = new QueryListener(query, observer, options);\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.listen(listener);\n        });\n        return listener;\n    };\n    FirestoreClient.prototype.unlisten = function (listener) {\n        var _this = this;\n        this.asyncQueue.schedule(function () {\n            return _this.eventMgr.unlisten(listener);\n        });\n    };\n    FirestoreClient.prototype.write = function (mutations) {\n        var _this = this;\n        var deferred = new Deferred();\n        this.asyncQueue.schedule(function () { return _this.syncEngine.write(mutations, deferred); });\n        return deferred.promise;\n    };\n    FirestoreClient.prototype.databaseId = function () {\n        return this.databaseInfo.databaseId;\n    };\n    FirestoreClient.prototype.transaction = function (updateFunction) {\n        var _this = this;\n        // We have to wait for the async queue to be sure syncEngine is initialized.\n        return this.asyncQueue\n            .schedule(function () {\n            return Promise.resolve();\n        })\n            .then(function () {\n            return _this.syncEngine.runTransaction(updateFunction);\n        });\n    };\n    return FirestoreClient;\n}());\nexport { FirestoreClient };\n\n//# sourceMappingURL=firestore_client.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/firestore_client.js\n// module id = 125\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnlineState } from './types';\nimport { ChangeType } from './view_snapshot';\nimport { DocumentSet } from '../model/document_set';\nimport { assert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nvar QueryListenersInfo = /** @class */ (function () {\n    function QueryListenersInfo() {\n        this.listeners = [];\n    }\n    return QueryListenersInfo;\n}());\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager(syncEngine) {\n        this.syncEngine = syncEngine;\n        this.queries = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.onlineState = OnlineState.Unknown;\n        this.syncEngine.subscribe(this.onChange.bind(this), this.onError.bind(this));\n    }\n    EventManager.prototype.listen = function (listener) {\n        var query = listener.query;\n        var firstListen = false;\n        var queryInfo = this.queries.get(query);\n        if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n            this.queries.set(query, queryInfo);\n        }\n        queryInfo.listeners.push(listener);\n        listener.onOnlineStateChanged(this.onlineState);\n        if (queryInfo.viewSnap)\n            listener.onViewSnapshot(queryInfo.viewSnap);\n        if (firstListen) {\n            return this.syncEngine.listen(query).then(function (targetId) {\n                queryInfo.targetId = targetId;\n                return targetId;\n            });\n        }\n        else {\n            return Promise.resolve(queryInfo.targetId);\n        }\n    };\n    EventManager.prototype.unlisten = function (listener) {\n        var query = listener.query;\n        var lastListen = false;\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            var i = queryInfo.listeners.indexOf(listener);\n            if (i >= 0) {\n                queryInfo.listeners.splice(i, 1);\n                lastListen = queryInfo.listeners.length === 0;\n            }\n        }\n        if (lastListen) {\n            this.queries.delete(query);\n            return this.syncEngine.unlisten(query);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    EventManager.prototype.onChange = function (viewSnaps) {\n        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n            var viewSnap = viewSnaps_1[_i];\n            var query = viewSnap.query;\n            var queryInfo = this.queries.get(query);\n            if (queryInfo) {\n                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {\n                    var listener = _b[_a];\n                    listener.onViewSnapshot(viewSnap);\n                }\n                queryInfo.viewSnap = viewSnap;\n            }\n        }\n    };\n    EventManager.prototype.onError = function (query, error) {\n        var queryInfo = this.queries.get(query);\n        if (queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onError(error);\n            }\n        }\n        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n        // after an error.\n        this.queries.delete(query);\n    };\n    EventManager.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        this.queries.forEach(function (_, queryInfo) {\n            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.onOnlineStateChanged(onlineState);\n            }\n        });\n    };\n    return EventManager;\n}());\nexport { EventManager };\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nvar QueryListener = /** @class */ (function () {\n    function QueryListener(query, queryObserver, options) {\n        this.query = query;\n        this.queryObserver = queryObserver;\n        /**\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n         * observer. This flag is set to true once we've actually raised an event.\n         */\n        this.raisedInitialEvent = false;\n        this.onlineState = OnlineState.Unknown;\n        this.options = options || {};\n    }\n    QueryListener.prototype.onViewSnapshot = function (snap) {\n        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');\n        if (!this.options.includeDocumentMetadataChanges) {\n            // Remove the metadata only changes.\n            var docChanges = [];\n            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {\n                var docChange = _a[_i];\n                if (docChange.type !== ChangeType.Metadata) {\n                    docChanges.push(docChange);\n                }\n            }\n            snap = {\n                query: snap.query,\n                docs: snap.docs,\n                oldDocs: snap.oldDocs,\n                docChanges: docChanges,\n                fromCache: snap.fromCache,\n                hasPendingWrites: snap.hasPendingWrites,\n                syncStateChanged: snap.syncStateChanged\n            };\n        }\n        if (!this.raisedInitialEvent) {\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n                this.raiseInitialEvent(snap);\n            }\n        }\n        else if (this.shouldRaiseEvent(snap)) {\n            this.queryObserver.next(snap);\n        }\n        this.snap = snap;\n    };\n    QueryListener.prototype.onError = function (error) {\n        this.queryObserver.error(error);\n    };\n    QueryListener.prototype.onOnlineStateChanged = function (onlineState) {\n        this.onlineState = onlineState;\n        if (this.snap &&\n            !this.raisedInitialEvent &&\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n            this.raiseInitialEvent(this.snap);\n        }\n    };\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');\n        // Always raise the first event when we're synced\n        if (!snap.fromCache) {\n            return true;\n        }\n        // NOTE: We consider OnlineState.Unknown as online (it should become Failed\n        // or Online if we wait long enough).\n        var maybeOnline = onlineState !== OnlineState.Failed;\n        // Don't raise the event if we're online, aren't synced yet (checked\n        // above) and are waiting for a sync.\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\n            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');\n            return false;\n        }\n        // Raise data from cache if we have any documents or we are offline\n        return !snap.docs.isEmpty() || onlineState === OnlineState.Failed;\n    };\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\n        // We don't need to handle includeDocumentMetadataChanges here because\n        // the Metadata only changes have already been stripped out if needed.\n        // At this point the only changes we will see are the ones we should\n        // propagate.\n        if (snap.docChanges.length > 0) {\n            return true;\n        }\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\n            return this.options.includeQueryMetadataChanges === true;\n        }\n        // Generally we should have hit one of the cases above, but it's possible\n        // to get here if there were only metadata docChanges and they got\n        // stripped out.\n        return false;\n    };\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\n        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');\n        snap = {\n            query: snap.query,\n            docs: snap.docs,\n            oldDocs: DocumentSet.emptySet(snap.docs),\n            docChanges: QueryListener.getInitialViewChanges(snap),\n            fromCache: snap.fromCache,\n            hasPendingWrites: snap.hasPendingWrites,\n            syncStateChanged: true\n        };\n        this.raisedInitialEvent = true;\n        this.queryObserver.next(snap);\n    };\n    /** Returns changes as if all documents in the snap were added. */\n    QueryListener.getInitialViewChanges = function (snap) {\n        var result = [];\n        snap.docs.forEach(function (doc) {\n            result.push({ type: ChangeType.Added, doc: doc });\n        });\n        return result;\n    };\n    return QueryListener;\n}());\nexport { QueryListener };\n\n//# sourceMappingURL=event_manager.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/event_manager.js\n// module id = 126\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EagerGarbageCollector } from '../local/eager_garbage_collector';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { ReferenceSet } from '../local/reference_set';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { CurrentStatusUpdate, RemoteEvent } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\nimport { isNullOrUndefined } from '../util/types';\nimport { Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { AddedLimboDocument, RemovedLimboDocument, View } from './view';\nvar LOG_TAG = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nvar QueryView = /** @class */ (function () {\n    function QueryView(\n        /**\n         * The query itself.\n         */\n        query, \n        /**\n         * The target number created by the client that is used in the watch\n         * stream to identify this query.\n         */\n        targetId, \n        /**\n         * An identifier from the datastore backend that indicates the last state\n         * of the results that was received. This can be used to indicate where\n         * to continue receiving new doc changes for the query.\n         */\n        resumeToken, \n        /**\n         * The view is responsible for computing the final merged truth of what\n         * docs are in the query. It gets notified of local and remote changes,\n         * and applies the query filters and limits to determine the most correct\n         * possible results.\n         */\n        view) {\n        this.query = query;\n        this.targetId = targetId;\n        this.resumeToken = resumeToken;\n        this.view = view;\n    }\n    return QueryView;\n}());\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(localStore, remoteStore, currentUser) {\n        this.localStore = localStore;\n        this.remoteStore = remoteStore;\n        this.currentUser = currentUser;\n        this.viewHandler = null;\n        this.errorHandler = null;\n        this.queryViewsByQuery = new ObjectMap(function (q) {\n            return q.canonicalId();\n        });\n        this.queryViewsByTarget = {};\n        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);\n        this.limboKeysByTarget = {};\n        this.limboDocumentRefs = new ReferenceSet();\n        this.limboCollector = new EagerGarbageCollector();\n        /** Stores user completion handlers, indexed by User and BatchId. */\n        this.mutationUserCallbacks = {};\n        this.targetIdGenerator = TargetIdGenerator.forSyncEngine();\n    }\n    /** Subscribes view and error handler. Can be called only once. */\n    SyncEngine.prototype.subscribe = function (viewHandler, errorHandler) {\n        assert(viewHandler !== null && errorHandler !== null, 'View and error handlers cannot be null');\n        assert(this.viewHandler === null && this.errorHandler === null, 'SyncEngine already has a subscriber.');\n        this.viewHandler = viewHandler;\n        this.errorHandler = errorHandler;\n        this.limboCollector.addGarbageSource(this.limboDocumentRefs);\n    };\n    /**\n     * Initiates the new listen, resolves promise when listen enqueued to the\n     * server. All the subsequent view snapshots or errors are sent to the\n     * subscribed handlers. Returns the targetId of the query.\n     */\n    SyncEngine.prototype.listen = function (query) {\n        var _this = this;\n        this.assertSubscribed('listen()');\n        assert(!this.queryViewsByQuery.has(query), 'We already listen to the query: ' + query);\n        return this.localStore.allocateQuery(query).then(function (queryData) {\n            return _this.localStore\n                .executeQuery(query)\n                .then(function (docs) {\n                return _this.localStore\n                    .remoteDocumentKeys(queryData.targetId)\n                    .then(function (remoteKeys) {\n                    var view = new View(query, remoteKeys);\n                    var viewDocChanges = view.computeDocChanges(docs);\n                    var viewChange = view.applyChanges(viewDocChanges);\n                    assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');\n                    assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');\n                    var data = new QueryView(query, queryData.targetId, queryData.resumeToken, view);\n                    _this.queryViewsByQuery.set(query, data);\n                    _this.queryViewsByTarget[queryData.targetId] = data;\n                    _this.viewHandler([viewChange.snapshot]);\n                    _this.remoteStore.listen(queryData);\n                });\n            })\n                .then(function () {\n                return queryData.targetId;\n            });\n        });\n    };\n    /** Stops listening to the query. */\n    SyncEngine.prototype.unlisten = function (query) {\n        var _this = this;\n        this.assertSubscribed('unlisten()');\n        var queryView = this.queryViewsByQuery.get(query);\n        assert(!!queryView, 'Trying to unlisten on query not found:' + query);\n        return this.localStore.releaseQuery(query).then(function () {\n            _this.remoteStore.unlisten(queryView.targetId);\n            return _this.removeAndCleanupQuery(queryView).then(function () {\n                return _this.localStore.collectGarbage();\n            });\n        });\n    };\n    /**\n     * Initiates the write of local mutation batch which involves adding the\n     * writes to the mutation queue, notifying the remote store about new\n     * mutations and raising events for any changes this write caused.\n     *\n     * The promise returned by this call is resolved when the above steps\n     * have completed, *not* when the write was acked by the backend. The\n     * userCallback is resolved once the write was acked/rejected by the\n     * backend (or failed locally for any other reason).\n     */\n    SyncEngine.prototype.write = function (batch, userCallback) {\n        var _this = this;\n        this.assertSubscribed('write()');\n        return this.localStore\n            .localWrite(batch)\n            .then(function (result) {\n            _this.addMutationCallback(result.batchId, userCallback);\n            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);\n        })\n            .then(function () {\n            return _this.remoteStore.fillWritePipeline();\n        });\n    };\n    // TODO(klimt): Wrap the given error in a standard Firestore error object.\n    SyncEngine.prototype.wrapUpdateFunctionError = function (error) {\n        return error;\n    };\n    /**\n     * Takes an updateFunction in which a set of reads and writes can be performed\n     * atomically. In the updateFunction, the client can read and write values\n     * using the supplied transaction object. After the updateFunction, all\n     * changes will be committed. If some other client has changed any of the data\n     * referenced, then the updateFunction will be called again. If the\n     * updateFunction still fails after the given number of retries, then the\n     * transaction will be rejection.\n     *\n     * The transaction object passed to the updateFunction contains methods for\n     * accessing documents and collections. Unlike other datastore access, data\n     * accessed with the transaction will not reflect local changes that have not\n     * been committed. For this reason, it is required that all reads are\n     * performed before any writes. Transactions must be performed while online.\n     *\n     * The promise returned is resolved when the transaction is fully committed.\n     */\n    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {\n        var _this = this;\n        if (retries === void 0) { retries = 5; }\n        assert(retries >= 0, 'Got negative number of retries for transaction.');\n        var transaction = this.remoteStore.createTransaction();\n        var wrappedUpdateFunction = function () {\n            try {\n                var userPromise = updateFunction(transaction);\n                if (isNullOrUndefined(userPromise) ||\n                    !userPromise.catch ||\n                    !userPromise.then) {\n                    return Promise.reject(Error('Transaction callback must return a Promise'));\n                }\n                return userPromise.catch(function (e) {\n                    return Promise.reject(_this.wrapUpdateFunctionError(e));\n                });\n            }\n            catch (e) {\n                return Promise.reject(_this.wrapUpdateFunctionError(e));\n            }\n        };\n        return wrappedUpdateFunction().then(function (result) {\n            return transaction\n                .commit()\n                .then(function () {\n                return result;\n            })\n                .catch(function (error) {\n                if (retries === 0) {\n                    return Promise.reject(error);\n                }\n                // TODO(klimt): Put in a retry delay?\n                return _this.runTransaction(updateFunction, retries - 1);\n            });\n        });\n    };\n    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        this.assertSubscribed('applyRemoteEvent()');\n        // Make sure limbo documents are deleted if there were no results\n        objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, targetChange) {\n            var limboKey = _this.limboKeysByTarget[targetId];\n            if (limboKey &&\n                targetChange.currentStatusUpdate ===\n                    CurrentStatusUpdate.MarkCurrent &&\n                !remoteEvent.documentUpdates.get(limboKey)) {\n                // When listening to a query the server responds with a snapshot\n                // containing documents matching the query and a current marker\n                // telling us we're now in sync. It's possible for these to arrive\n                // as separate remote events or as a single remote event.\n                // For a document query, there will be no documents sent in the\n                // response if the document doesn't exist.\n                //\n                // If the snapshot arrives separately from the current marker,\n                // we handle it normally and updateTrackedLimbos will resolve the\n                // limbo status of the document, removing it from limboDocumentRefs.\n                // This works because clients only initiate limbo resolution when\n                // a target is current and because all current targets are\n                // always at a consistent snapshot.\n                //\n                // However, if the document doesn't exist and the current marker\n                // arrives, the document is not present in the snapshot and our\n                // normal view handling would consider the document to remain in\n                // limbo indefinitely because there are no updates to the document.\n                // To avoid this, we specially handle this just this case here:\n                // synthesizing a delete.\n                //\n                // TODO(dimond): Ideally we would have an explicit lookup query\n                // instead resulting in an explicit delete message and we could\n                // remove this special logic.\n                remoteEvent.addDocumentUpdate(new NoDocument(limboKey, remoteEvent.snapshotVersion));\n            }\n        });\n        return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n        });\n    };\n    SyncEngine.prototype.rejectListen = function (targetId, err) {\n        var _this = this;\n        this.assertSubscribed('rejectListens()');\n        var limboKey = this.limboKeysByTarget[targetId];\n        if (limboKey) {\n            // Since this query failed, we won't want to manually unlisten to it.\n            // So go ahead and remove it from bookkeeping.\n            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);\n            delete this.limboKeysByTarget[targetId];\n            // TODO(klimt): We really only should do the following on permission\n            // denied errors, but we don't have the cause code here.\n            // It's a limbo doc. Create a synthetic event saying it was deleted.\n            // This is kind of a hack. Ideally, we would have a method in the local\n            // store to purge a document. However, it would be tricky to keep all of\n            // the local store's invariants with another method.\n            var docMap = new SortedMap(DocumentKey.comparator);\n            docMap = docMap.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));\n            var event_1 = new RemoteEvent(SnapshotVersion.MIN, {}, docMap);\n            return this.applyRemoteEvent(event_1);\n        }\n        else {\n            var queryView_1 = this.queryViewsByTarget[targetId];\n            assert(!!queryView_1, 'Unknown targetId: ' + targetId);\n            return this.localStore.releaseQuery(queryView_1.query).then(function () {\n                return _this.removeAndCleanupQuery(queryView_1).then(function () {\n                    _this.errorHandler(queryView_1.query, err);\n                });\n            });\n        }\n    };\n    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {\n        var _this = this;\n        this.assertSubscribed('applySuccessfulWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught\n        // up), so we raise user callbacks first so that they consistently happen\n        // before listen events.\n        this.processUserCallback(mutationBatchResult.batch.batchId, \n        /*error=*/ null);\n        return this.localStore\n            .acknowledgeBatch(mutationBatchResult)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {\n        var _this = this;\n        this.assertSubscribed('rejectFailedWrite()');\n        // The local store may or may not be able to apply the write result and\n        // raise events immediately (depending on whether the watcher is caught up),\n        // so we raise user callbacks first so that they consistently happen before\n        // listen events.\n        this.processUserCallback(batchId, error);\n        return this.localStore.rejectBatch(batchId).then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        });\n    };\n    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        if (!newCallbacks) {\n            newCallbacks = new SortedMap(primitiveComparator);\n        }\n        newCallbacks = newCallbacks.insert(batchId, callback);\n        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    };\n    /**\n     * Resolves or rejects the user callback for the given batch and then discards\n     * it.\n     */\n    SyncEngine.prototype.processUserCallback = function (batchId, error) {\n        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n        // NOTE: Mutations restored from persistence won't have callbacks, so it's\n        // okay for there to be no callback for this ID.\n        if (newCallbacks) {\n            var callback = newCallbacks.get(batchId);\n            if (callback) {\n                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');\n                if (error) {\n                    callback.reject(error);\n                }\n                else {\n                    callback.resolve();\n                }\n                newCallbacks = newCallbacks.remove(batchId);\n            }\n            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n        }\n    };\n    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {\n        this.queryViewsByQuery.delete(queryView.query);\n        delete this.queryViewsByTarget[queryView.targetId];\n        this.limboDocumentRefs.removeReferencesForId(queryView.targetId);\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {\n        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n            var limboChange = limboChanges_1[_i];\n            if (limboChange instanceof AddedLimboDocument) {\n                this.limboDocumentRefs.addReference(limboChange.key, targetId);\n                this.trackLimboChange(limboChange);\n            }\n            else if (limboChange instanceof RemovedLimboDocument) {\n                log.debug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n                this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n            }\n            else {\n                fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n            }\n        }\n        return this.gcLimboDocuments();\n    };\n    SyncEngine.prototype.trackLimboChange = function (limboChange) {\n        var key = limboChange.key;\n        if (!this.limboTargetsByKey.get(key)) {\n            log.debug(LOG_TAG, 'New document in limbo: ' + key);\n            var limboTargetId = this.targetIdGenerator.next();\n            var query = Query.atPath(key.path);\n            this.limboKeysByTarget[limboTargetId] = key;\n            this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.Listen));\n            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);\n        }\n    };\n    SyncEngine.prototype.gcLimboDocuments = function () {\n        var _this = this;\n        // HACK: We can use a null transaction here, because we know that the\n        // reference set is entirely within memory and doesn't need a store engine.\n        return this.limboCollector\n            .collectGarbage(null)\n            .next(function (keys) {\n            keys.forEach(function (key) {\n                var limboTargetId = _this.limboTargetsByKey.get(key);\n                if (limboTargetId === null) {\n                    // This target already got removed, because the query failed.\n                    return;\n                }\n                _this.remoteStore.unlisten(limboTargetId);\n                _this.limboTargetsByKey = _this.limboTargetsByKey.remove(key);\n                delete _this.limboKeysByTarget[limboTargetId];\n            });\n        })\n            .toPromise();\n    };\n    // Visible for testing\n    SyncEngine.prototype.currentLimboDocs = function () {\n        return this.limboTargetsByKey;\n    };\n    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {\n        var _this = this;\n        var newSnaps = [];\n        var docChangesInAllViews = [];\n        var queriesProcessed = [];\n        this.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(Promise.resolve()\n                .then(function () {\n                var viewDocChanges = queryView.view.computeDocChanges(changes);\n                if (!viewDocChanges.needsRefill) {\n                    return viewDocChanges;\n                }\n                // The query has a limit and some docs were removed, so we need\n                // to re-run the query against the local store to make sure we\n                // didn't lose any good docs that had been past the limit.\n                return _this.localStore.executeQuery(queryView.query).then(function (docs) {\n                    return queryView.view.computeDocChanges(docs, viewDocChanges);\n                });\n            })\n                .then(function (viewDocChanges) {\n                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];\n                var viewChange = queryView.view.applyChanges(viewDocChanges, targetChange);\n                return _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges).then(function () {\n                    if (viewChange.snapshot) {\n                        newSnaps.push(viewChange.snapshot);\n                        var docChanges = LocalViewChanges.fromSnapshot(viewChange.snapshot);\n                        docChangesInAllViews.push(docChanges);\n                    }\n                });\n            }));\n        });\n        return Promise.all(queriesProcessed)\n            .then(function () {\n            _this.viewHandler(newSnaps);\n            return _this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n        })\n            .then(function () {\n            return _this.localStore.collectGarbage();\n        });\n    };\n    SyncEngine.prototype.assertSubscribed = function (fnName) {\n        assert(this.viewHandler !== null && this.errorHandler !== null, 'Trying to call ' + fnName + ' before calling subscribe().');\n    };\n    SyncEngine.prototype.handleUserChange = function (user) {\n        var _this = this;\n        this.currentUser = user;\n        return this.localStore\n            .handleUserChange(user)\n            .then(function (changes) {\n            return _this.emitNewSnapsAndNotifyLocalStore(changes);\n        })\n            .then(function () {\n            return _this.remoteStore.handleUserChange(user);\n        });\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n\n//# sourceMappingURL=sync_engine.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/sync_engine.js\n// module id = 127\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeType } from '../core/view_snapshot';\nimport { documentKeySet } from '../model/collections';\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nvar LocalViewChanges = /** @class */ (function () {\n    function LocalViewChanges(query, addedKeys, removedKeys) {\n        this.query = query;\n        this.addedKeys = addedKeys;\n        this.removedKeys = removedKeys;\n    }\n    LocalViewChanges.fromSnapshot = function (viewSnapshot) {\n        var addedKeys = documentKeySet();\n        var removedKeys = documentKeySet();\n        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {\n            var docChange = _a[_i];\n            switch (docChange.type) {\n                case ChangeType.Added:\n                    addedKeys = addedKeys.add(docChange.doc.key);\n                    break;\n                case ChangeType.Removed:\n                    removedKeys = removedKeys.add(docChange.doc.key);\n                    break;\n                default:\n            }\n        }\n        return new LocalViewChanges(viewSnapshot.query, addedKeys, removedKeys);\n    };\n    return LocalViewChanges;\n}());\nexport { LocalViewChanges };\n\n//# sourceMappingURL=local_view_changes.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/local_view_changes.js\n// module id = 128\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentSet } from '../model/document_set';\nimport { CurrentStatusUpdate, ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport { ChangeType, DocumentChangeSet, SyncState } from './view_snapshot';\nvar AddedLimboDocument = /** @class */ (function () {\n    function AddedLimboDocument(key) {\n        this.key = key;\n    }\n    return AddedLimboDocument;\n}());\nexport { AddedLimboDocument };\nvar RemovedLimboDocument = /** @class */ (function () {\n    function RemovedLimboDocument(key) {\n        this.key = key;\n    }\n    return RemovedLimboDocument;\n}());\nexport { RemovedLimboDocument };\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nvar View = /** @class */ (function () {\n    function View(query, \n        /** Documents included in the remote target */\n        syncedDocuments) {\n        this.query = query;\n        this.syncedDocuments = syncedDocuments;\n        this.syncState = null;\n        /**\n         * A flag whether the view is current with the backend. A view is considered\n         * current after it has seen the current flag from the backend and did not\n         * lose consistency within the watch stream (e.g. because of an existence\n         * filter mismatch).\n         */\n        this.current = false;\n        /** Documents in the view but not in the remote target */\n        this.limboDocuments = documentKeySet();\n        /** Document Keys that have local changes */\n        this.mutatedKeys = documentKeySet();\n        this.documentSet = new DocumentSet(query.docComparator.bind(query));\n    }\n    /**\n     * Iterates over a set of doc changes, applies the query limit, and computes\n     * what the new results should be, what the changes were, and whether we may\n     * need to go back to the local cache for more results. Does not make any\n     * changes to the view.\n     * @param docChanges The doc changes to apply to this view.\n     * @param previousChanges If this is being called with a refill, then start\n     *        with this set of docs and changes instead of the current view.\n     * @return a new set of docs, changes, and refill flag.\n     */\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n        var _this = this;\n        var changeSet = previousChanges\n            ? previousChanges.changeSet\n            : new DocumentChangeSet();\n        var oldDocumentSet = previousChanges\n            ? previousChanges.documentSet\n            : this.documentSet;\n        var newMutatedKeys = previousChanges\n            ? previousChanges.mutatedKeys\n            : this.mutatedKeys;\n        var newDocumentSet = oldDocumentSet;\n        var needsRefill = false;\n        // Track the last doc in a (full) limit. This is necessary, because some\n        // update (a delete, or an update moving a doc past the old limit) might\n        // mean there is some other document in the local cache that either should\n        // come (1) between the old last limit doc and the new last document, in the\n        // case of updates, or (2) after the new last document, in the case of\n        // deletes. So we keep this doc at the old limit to compare the updates to.\n        //\n        // Note that this should never get used in a refill (when previousChanges is\n        // set), because there will only be adds -- no deletes or updates.\n        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit\n            ? oldDocumentSet.last()\n            : null;\n        docChanges.inorderTraversal(function (key, newMaybeDoc) {\n            var oldDoc = oldDocumentSet.get(key);\n            var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n            if (newDoc) {\n                assert(key.equals(newDoc.key), 'Mismatching keys found in document changes: ' +\n                    key +\n                    ' != ' +\n                    newDoc.key);\n                newDoc = _this.query.matches(newDoc) ? newDoc : null;\n            }\n            if (newDoc) {\n                newDocumentSet = newDocumentSet.add(newDoc);\n                if (newDoc.hasLocalMutations) {\n                    newMutatedKeys = newMutatedKeys.add(key);\n                }\n                else {\n                    newMutatedKeys = newMutatedKeys.delete(key);\n                }\n            }\n            else {\n                newDocumentSet = newDocumentSet.delete(key);\n                newMutatedKeys = newMutatedKeys.delete(key);\n            }\n            // Calculate change\n            if (oldDoc && newDoc) {\n                var docsEqual = oldDoc.data.equals(newDoc.data);\n                if (!docsEqual ||\n                    oldDoc.hasLocalMutations !== newDoc.hasLocalMutations) {\n                    // only report a change if document actually changed\n                    if (docsEqual) {\n                        changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n                    }\n                    else {\n                        changeSet.track({ type: ChangeType.Modified, doc: newDoc });\n                    }\n                    if (lastDocInLimit &&\n                        _this.query.docComparator(newDoc, lastDocInLimit) > 0) {\n                        // This doc moved from inside the limit to after the limit.\n                        // That means there may be some doc in the local cache that's\n                        // actually less than this one.\n                        needsRefill = true;\n                    }\n                }\n            }\n            else if (!oldDoc && newDoc) {\n                changeSet.track({ type: ChangeType.Added, doc: newDoc });\n            }\n            else if (oldDoc && !newDoc) {\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n                if (lastDocInLimit) {\n                    // A doc was removed from a full limit query. We'll need to\n                    // requery from the local cache to see if we know about some other\n                    // doc that should be in the results.\n                    needsRefill = true;\n                }\n            }\n        });\n        if (this.query.hasLimit()) {\n            // TODO(klimt): Make DocumentSet size be constant time.\n            while (newDocumentSet.size > this.query.limit) {\n                var oldDoc = newDocumentSet.last();\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\n                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n            }\n        }\n        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');\n        return {\n            documentSet: newDocumentSet,\n            changeSet: changeSet,\n            needsRefill: needsRefill,\n            mutatedKeys: newMutatedKeys\n        };\n    };\n    /**\n     * Updates the view with the given ViewDocumentChanges and updates limbo docs\n     * and sync state from the given (optional) target change.\n     * @param docChanges The set of changes to make to the view's docs.\n     * @param targetChange A target change to apply for computing limbo docs and\n     *        sync state.\n     * @return A new ViewChange with the given docs, changes, and sync state.\n     */\n    View.prototype.applyChanges = function (docChanges, targetChange) {\n        var _this = this;\n        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');\n        var oldDocs = this.documentSet;\n        this.documentSet = docChanges.documentSet;\n        this.mutatedKeys = docChanges.mutatedKeys;\n        // Sort changes based on type and query comparator\n        var changes = docChanges.changeSet.getChanges();\n        changes.sort(function (c1, c2) {\n            return (compareChangeType(c1.type, c2.type) ||\n                _this.query.docComparator(c1.doc, c2.doc));\n        });\n        var limboChanges = this.applyTargetChange(targetChange);\n        var synced = this.limboDocuments.size === 0 && this.current;\n        var newSyncState = synced ? SyncState.Synced : SyncState.Local;\n        var syncStateChanged = newSyncState !== this.syncState;\n        this.syncState = newSyncState;\n        if (changes.length === 0 && !syncStateChanged) {\n            // no changes\n            return { limboChanges: limboChanges };\n        }\n        else {\n            return {\n                snapshot: {\n                    query: this.query,\n                    docs: docChanges.documentSet,\n                    oldDocs: oldDocs,\n                    docChanges: changes,\n                    fromCache: newSyncState === SyncState.Local,\n                    syncStateChanged: syncStateChanged,\n                    hasPendingWrites: !docChanges.mutatedKeys.isEmpty()\n                },\n                limboChanges: limboChanges\n            };\n        }\n    };\n    /**\n     * Returns whether the doc for the given key should be in limbo.\n     */\n    View.prototype.shouldBeInLimbo = function (key) {\n        // If the remote end says it's part of this query, it's not in limbo.\n        if (this.syncedDocuments.has(key)) {\n            return false;\n        }\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\n        if (!this.documentSet.has(key)) {\n            return false;\n        }\n        // If there are local changes to the doc, they might explain why the server\n        // doesn't know that it's part of the query. So don't put it in limbo.\n        // TODO(klimt): Ideally, we would only consider changes that might actually\n        // affect this specific query.\n        if (this.documentSet.get(key).hasLocalMutations) {\n            return false;\n        }\n        // Everything else is in limbo.\n        return true;\n    };\n    /**\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\n     * Returns the list of changes to which docs are in limbo.\n     */\n    View.prototype.applyTargetChange = function (targetChange) {\n        var _this = this;\n        if (targetChange) {\n            var targetMapping = targetChange.mapping;\n            if (targetMapping instanceof ResetMapping) {\n                this.syncedDocuments = targetMapping.documents;\n            }\n            else if (targetMapping instanceof UpdateMapping) {\n                this.syncedDocuments = targetMapping.applyToKeySet(this.syncedDocuments);\n            }\n            switch (targetChange.currentStatusUpdate) {\n                case CurrentStatusUpdate.MarkCurrent:\n                    this.current = true;\n                    break;\n                case CurrentStatusUpdate.MarkNotCurrent:\n                    this.current = false;\n                    break;\n                case CurrentStatusUpdate.None:\n                    break;\n                default:\n                    fail('Unknown current status update: ' + targetChange.currentStatusUpdate);\n            }\n        }\n        // Recompute the set of limbo docs.\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\n        // updating many documents.\n        var oldLimboDocuments = this.limboDocuments;\n        this.limboDocuments = documentKeySet();\n        if (this.current) {\n            this.documentSet.forEach(function (doc) {\n                if (_this.shouldBeInLimbo(doc.key)) {\n                    _this.limboDocuments = _this.limboDocuments.add(doc.key);\n                }\n            });\n        }\n        // Diff the new limbo docs with the old limbo docs.\n        var changes = [];\n        oldLimboDocuments.forEach(function (key) {\n            if (!_this.limboDocuments.has(key)) {\n                changes.push(new RemovedLimboDocument(key));\n            }\n        });\n        this.limboDocuments.forEach(function (key) {\n            if (!oldLimboDocuments.has(key)) {\n                changes.push(new AddedLimboDocument(key));\n            }\n        });\n        return changes;\n    };\n    return View;\n}());\nexport { View };\nfunction compareChangeType(c1, c2) {\n    var order = function (change) {\n        switch (change) {\n            case ChangeType.Added:\n                return 1;\n            case ChangeType.Modified:\n                return 2;\n            case ChangeType.Metadata:\n                // A metadata change is converted to a modified change at the public\n                // api layer.  Since we sort by document key and then change type,\n                // metadata and modified changes must be sorted equivalently.\n                return 2;\n            case ChangeType.Removed:\n                return 0;\n            default:\n                return fail('Unknown ChangeType: ' + change);\n        }\n    };\n    return order(c1) - order(c2);\n}\n\n//# sourceMappingURL=view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/view.js\n// module id = 129\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbQueryCache } from './indexeddb_query_cache';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { ALL_STORES, DbOwner } from './indexeddb_schema';\nimport { createOrUpgradeDb, SCHEMA_VERSION } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDb } from './simple_db';\nvar LOG_TAG = 'IndexedDbPersistence';\n/** If the owner lease is older than 5 seconds, try to take ownership. */\nvar OWNER_LEASE_MAX_AGE_MS = 5000;\n/** Refresh the owner lease every 4 seconds while owner. */\nvar OWNER_LEASE_REFRESH_INTERVAL_MS = 4000;\n/** LocalStorage location to indicate a zombied ownerId (see class comment). */\nvar ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX = 'zombiedOwnerId';\n/** Error when the owner lease cannot be acquired or is lost. */\nvar EXISTING_OWNER_ERROR_MSG = 'There is another tab open with offline' +\n    ' persistence enabled. Only one such tab is allowed at a time. The' +\n    ' other tab must be closed or persistence must be disabled.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +\n    ' IndexedDB or is known to have an incomplete implementation. Offline' +\n    ' persistence has been disabled.';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * Currently the Firestore SDK only supports a single consumer of the database,\n * but browsers obviously support multiple tabs. IndexedDbPersistence ensures a\n * single consumer of the database via an \"owner lease\" stored in the database.\n *\n * On startup, IndexedDbPersistence assigns itself a random \"ownerId\" and writes\n * it to a special \"owner\" object in the database (if no entry exists already or\n * the current entry is expired). This owner lease is then verified inside every\n * transaction to ensure the lease has not been lost.\n *\n * If a tab opts not to acquire the owner lease (because there's an existing\n * non-expired owner) or loses the owner lease, IndexedDbPersistence enters a\n * failed state and all subsequent operations will automatically fail.\n *\n * The current owner regularly refreshes the owner lease with new timestamps to\n * prevent newly-opened tabs from taking over ownership.\n *\n * Additionally there is an optimization so that when a tab is closed, the owner\n * lease is released immediately (this is especially important to make sure that\n * a refreshed tab is able to immediately re-acquire the owner lease).\n * Unfortunately, IndexedDB cannot be reliably used in window.unload since it is\n * an asynchronous API. So in addition to attempting to give up the lease,\n * the owner writes its ownerId to a \"zombiedOwnerId\" entry in LocalStorage\n * which acts as an indicator that another tab should go ahead and take the\n * owner lease immediately regardless of the current lease timestamp.\n */\nvar IndexedDbPersistence = /** @class */ (function () {\n    function IndexedDbPersistence(prefix, serializer) {\n        this.ownerId = this.generateOwnerId();\n        this.dbName = prefix + IndexedDbPersistence.MAIN_DATABASE;\n        this.serializer = new LocalSerializer(serializer);\n        this.localStoragePrefix = prefix;\n    }\n    IndexedDbPersistence.prototype.start = function () {\n        var _this = this;\n        if (!IndexedDbPersistence.isAvailable()) {\n            this.persistenceError = new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n            return Promise.reject(this.persistenceError);\n        }\n        assert(!this.started, 'IndexedDbPersistence double-started!');\n        this.started = true;\n        return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, createOrUpgradeDb)\n            .then(function (db) {\n            _this.simpleDb = db;\n        })\n            .then(function () { return _this.tryAcquireOwnerLease(); })\n            .then(function () {\n            _this.scheduleOwnerLeaseRefreshes();\n            _this.attachWindowUnloadHook();\n        });\n    };\n    IndexedDbPersistence.prototype.shutdown = function () {\n        var _this = this;\n        assert(this.started, 'IndexedDbPersistence shutdown without start!');\n        this.started = false;\n        this.detachWindowUnloadHook();\n        this.stopOwnerLeaseRefreshes();\n        return this.releaseOwnerLease().then(function () {\n            _this.simpleDb.close();\n        });\n    };\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n        return IndexedDbMutationQueue.forUser(user, this.serializer);\n    };\n    IndexedDbPersistence.prototype.getQueryCache = function () {\n        return new IndexedDbQueryCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n        return new IndexedDbRemoteDocumentCache(this.serializer);\n    };\n    IndexedDbPersistence.prototype.runTransaction = function (action, operation) {\n        var _this = this;\n        if (this.persistenceError) {\n            return Promise.reject(this.persistenceError);\n        }\n        log.debug(LOG_TAG, 'Starting transaction:', action);\n        // Do all transactions as readwrite against all object stores, since we\n        // are the only reader/writer.\n        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {\n            // Verify that we still have the owner lease as part of every transaction.\n            return _this.ensureOwnerLease(txn).next(function () { return operation(txn); });\n        });\n    };\n    IndexedDbPersistence.isAvailable = function () {\n        return SimpleDb.isAvailable();\n    };\n    /**\n     * Generates a string used as a prefix when storing data in IndexedDB and\n     * LocalStorage.\n     */\n    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {\n        // Use two different prefix formats:\n        //\n        //   * firestore / persistenceKey / projectID . databaseID / ...\n        //   * firestore / persistenceKey / projectID / ...\n        //\n        // projectIDs are DNS-compatible names and cannot contain dots\n        // so there's no danger of collisions.\n        var database = databaseInfo.databaseId.projectId;\n        if (!databaseInfo.databaseId.isDefaultDatabase) {\n            database += '.' + databaseInfo.databaseId.database;\n        }\n        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n    };\n    /**\n     * Acquires the owner lease if there's no valid owner. Else returns a rejected\n     * promise.\n     */\n    IndexedDbPersistence.prototype.tryAcquireOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (!_this.validOwner(dbOwner)) {\n                    var newDbOwner = new DbOwner(_this.ownerId, Date.now());\n                    log.debug(LOG_TAG, 'No valid owner. Acquiring owner lease. Current owner:', dbOwner, 'New owner:', newDbOwner);\n                    return store.put('owner', newDbOwner);\n                }\n                else {\n                    log.debug(LOG_TAG, 'Valid owner already. Failing. Current owner:', dbOwner);\n                    _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                    return PersistencePromise.reject(_this.persistenceError);\n                }\n            });\n        });\n    };\n    /** Checks the owner lease and deletes it if we are the current owner. */\n    IndexedDbPersistence.prototype.releaseOwnerLease = function () {\n        var _this = this;\n        // NOTE: Don't use this.runTransaction, since it requires us to already\n        // have the lease.\n        return this.simpleDb.runTransaction('readwrite', [DbOwner.store], function (txn) {\n            var store = txn.store(DbOwner.store);\n            return store.get('owner').next(function (dbOwner) {\n                if (dbOwner !== null && dbOwner.ownerId === _this.ownerId) {\n                    log.debug(LOG_TAG, 'Releasing owner lease.');\n                    return store.delete('owner');\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Checks the owner lease and returns a rejected promise if we are not the\n     * current owner. This should be included in every transaction to guard\n     * against losing the owner lease.\n     */\n    IndexedDbPersistence.prototype.ensureOwnerLease = function (txn) {\n        var _this = this;\n        var store = txn.store(DbOwner.store);\n        return store.get('owner').next(function (dbOwner) {\n            if (dbOwner === null || dbOwner.ownerId !== _this.ownerId) {\n                _this.persistenceError = new FirestoreError(Code.FAILED_PRECONDITION, EXISTING_OWNER_ERROR_MSG);\n                return PersistencePromise.reject(_this.persistenceError);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns true if the provided owner exists, has a recent timestamp, and\n     * isn't zombied.\n     *\n     * NOTE: To determine if the owner is zombied, this method reads from\n     * LocalStorage which could be mildly expensive.\n     */\n    IndexedDbPersistence.prototype.validOwner = function (dbOwner) {\n        var now = Date.now();\n        var minAcceptable = now - OWNER_LEASE_MAX_AGE_MS;\n        var maxAcceptable = now;\n        if (dbOwner === null) {\n            return false; // no owner.\n        }\n        else if (dbOwner.leaseTimestampMs < minAcceptable) {\n            return false; // owner lease has expired.\n        }\n        else if (dbOwner.leaseTimestampMs > maxAcceptable) {\n            log.error('Persistence owner-lease is in the future. Discarding.', dbOwner);\n            return false;\n        }\n        else if (dbOwner.ownerId === this.getZombiedOwnerId()) {\n            return false; // owner's tab closed.\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Schedules a recurring timer to update the owner lease timestamp to prevent\n     * other tabs from taking the lease.\n     */\n    IndexedDbPersistence.prototype.scheduleOwnerLeaseRefreshes = function () {\n        var _this = this;\n        // NOTE: This doesn't need to be scheduled on the async queue and doing so\n        // would increase the chances of us not refreshing on time if the queue is\n        // backed up for some reason.\n        this.ownerLeaseRefreshHandle = setInterval(function () {\n            var txResult = _this.runTransaction('Refresh owner timestamp', function (txn) {\n                // NOTE: We don't need to validate the current owner contents, since\n                // runTransaction does that automatically.\n                var store = txn.store(DbOwner.store);\n                return store.put('owner', new DbOwner(_this.ownerId, Date.now()));\n            });\n            txResult.catch(function (reason) {\n                // Probably means we lost the lease. Report the error and stop trying to\n                // refresh the lease.\n                log.error(reason);\n                _this.stopOwnerLeaseRefreshes();\n            });\n        }, OWNER_LEASE_REFRESH_INTERVAL_MS);\n    };\n    IndexedDbPersistence.prototype.stopOwnerLeaseRefreshes = function () {\n        if (this.ownerLeaseRefreshHandle) {\n            clearInterval(this.ownerLeaseRefreshHandle);\n            this.ownerLeaseRefreshHandle = null;\n        }\n    };\n    /**\n     * Attaches a window.unload handler that will synchronously write our\n     * ownerId to a \"zombie owner id\" location in localstorage. This can be used\n     * by tabs trying to acquire the lease to determine that the lease should be\n     * acquired immediately even if the timestamp is recent. This is particularly\n     * important for the refresh case (so the tab correctly re-acquires the owner\n     * lease). LocalStorage is used for this rather than IndexedDb because it is\n     * a synchronous API and so can be used reliably from an unload handler.\n     */\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n        var _this = this;\n        this.windowUnloadHandler = function () {\n            // Record that we're zombied.\n            _this.setZombiedOwnerId(_this.ownerId);\n            // Attempt graceful shutdown (including releasing our owner lease), but\n            // there's no guarantee it will complete.\n            _this.shutdown();\n        };\n        window.addEventListener('unload', this.windowUnloadHandler);\n    };\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n        if (this.windowUnloadHandler) {\n            window.removeEventListener('unload', this.windowUnloadHandler);\n            this.windowUnloadHandler = null;\n        }\n    };\n    /**\n     * Returns any recorded \"zombied owner\" (i.e. a previous owner that became\n     * zombied due to their tab closing) from LocalStorage, or null if no such\n     * record exists.\n     */\n    IndexedDbPersistence.prototype.getZombiedOwnerId = function () {\n        try {\n            var zombiedOwnerId = window.localStorage.getItem(this.zombiedOwnerLocalStorageKey());\n            log.debug(LOG_TAG, 'Zombied ownerID from LocalStorage:', zombiedOwnerId);\n            return zombiedOwnerId;\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to get zombie owner id.', e);\n            return null;\n        }\n    };\n    /**\n     * Records a zombied owner (an owner that had its tab closed) in LocalStorage\n     * or, if passed null, deletes any recorded zombied owner.\n     */\n    IndexedDbPersistence.prototype.setZombiedOwnerId = function (zombieOwnerId) {\n        try {\n            if (zombieOwnerId === null) {\n                window.localStorage.removeItem(this.zombiedOwnerLocalStorageKey());\n            }\n            else {\n                window.localStorage.setItem(this.zombiedOwnerLocalStorageKey(), zombieOwnerId);\n            }\n        }\n        catch (e) {\n            // Gracefully handle if LocalStorage isn't available / working.\n            log.error('Failed to set zombie owner id.', e);\n        }\n    };\n    IndexedDbPersistence.prototype.zombiedOwnerLocalStorageKey = function () {\n        return this.localStoragePrefix + ZOMBIE_OWNER_LOCALSTORAGE_SUFFIX;\n    };\n    IndexedDbPersistence.prototype.generateOwnerId = function () {\n        // For convenience, just use an AutoId.\n        return AutoId.newId();\n    };\n    /**\n     * The name of the main (and currently only) IndexedDB database. this name is\n     * appended to the prefix provided to the IndexedDbPersistence constructor.\n     */\n    IndexedDbPersistence.MAIN_DATABASE = 'main';\n    return IndexedDbPersistence;\n}());\nexport { IndexedDbPersistence };\n\n//# sourceMappingURL=indexeddb_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_persistence.js\n// module id = 130\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { immediatePredecessor, primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbDocumentMutation, DbMutationBatch, DbMutationQueue } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\n/** A mutation queue for a specific user, backed by IndexedDB. */\nvar IndexedDbMutationQueue = /** @class */ (function () {\n    function IndexedDbMutationQueue(\n        /**\n         * The normalized userId (e.g. null UID => \"\" userId) used to store /\n         * retrieve mutations.\n         */\n        userId, serializer) {\n        this.userId = userId;\n        this.serializer = serializer;\n        this.garbageCollector = null;\n    }\n    /**\n     * Creates a new mutation queue for the given user.\n     * @param user The user for which to create a mutation queue.\n     * @param serializer The serializer to use when persisting to IndexedDb.\n     */\n    IndexedDbMutationQueue.forUser = function (user, serializer) {\n        // TODO(mcg): Figure out what constraints there are on userIDs\n        // In particular, are there any reserved characters? are empty ids allowed?\n        // For the moment store these together in the same mutations table assuming\n        // that empty userIDs aren't allowed.\n        assert(user.uid !== '', 'UserID must not be an empty string.');\n        var userId = user.isUnauthenticated() ? '' : user.uid;\n        return new IndexedDbMutationQueue(userId, serializer);\n    };\n    IndexedDbMutationQueue.prototype.start = function (transaction) {\n        var _this = this;\n        return IndexedDbMutationQueue.loadNextBatchIdFromDb(transaction)\n            .next(function (nextBatchId) {\n            _this.nextBatchId = nextBatchId;\n            return mutationQueuesStore(transaction).get(_this.userId);\n        })\n            .next(function (metadata) {\n            if (!metadata) {\n                metadata = new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \n                /*lastStreamToken=*/ '');\n            }\n            _this.metadata = metadata;\n            // On restart, nextBatchId may end up lower than\n            // lastAcknowledgedBatchId since it's computed from the queue\n            // contents, and there may be no mutations in the queue. In this\n            // case, we need to reset lastAcknowledgedBatchId (which is safe\n            // since the queue must be empty).\n            if (_this.metadata.lastAcknowledgedBatchId >= _this.nextBatchId) {\n                return _this.checkEmpty(transaction).next(function (empty) {\n                    assert(empty, 'Reset nextBatchID is only possible when the queue is empty');\n                    _this.metadata.lastAcknowledgedBatchId = BATCHID_UNKNOWN;\n                    return mutationQueuesStore(transaction).put(_this.metadata);\n                });\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /**\n     * Returns one larger than the largest batch ID that has been stored. If there\n     * are no mutations returns 0. Note that batch IDs are global.\n     */\n    IndexedDbMutationQueue.loadNextBatchIdFromDb = function (txn) {\n        var maxBatchId = BATCHID_UNKNOWN;\n        return mutationsStore(txn)\n            .iterate({ reverse: true }, function (key, batch, control) {\n            var userId = key[0], batchId = key[1];\n            if (batchId > maxBatchId) {\n                maxBatchId = batch.batchId;\n            }\n            if (userId === '') {\n                // We can't compute a predecessor for the empty string, since it\n                // is lexographically first. That also means that no other\n                // userIds can come before this one, so we can just exit early.\n                control.done();\n            }\n            else {\n                var nextUser = immediatePredecessor(userId);\n                control.skip([nextUser]);\n            }\n        })\n            .next(function () { return maxBatchId + 1; });\n    };\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n        var empty = true;\n        var range = IDBKeyRange.bound(this.keyForBatchId(Number.NEGATIVE_INFINITY), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, value, control) {\n            empty = false;\n            control.done();\n        })\n            .next(function () { return empty; });\n    };\n    IndexedDbMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    IndexedDbMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastAcknowledgedBatchId);\n    };\n    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        this.metadata.lastAcknowledgedBatchId = batchId;\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.metadata.lastStreamToken);\n    };\n    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.metadata.lastStreamToken = validateStreamToken(streamToken);\n        return mutationQueuesStore(transaction).put(this.metadata);\n    };\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        var _this = this;\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        var dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n        return mutationsStore(transaction)\n            .put(dbBatch)\n            .next(function () {\n            var promises = [];\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n                var mutation = mutations_1[_i];\n                var encodedPath = EncodedResourcePath.encode(mutation.key.path);\n                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n                documentMutationsStore(transaction).put(indexKey, DbDocumentMutation.PLACEHOLDER);\n            }\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            return batch;\n        });\n    };\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        var _this = this;\n        return mutationsStore(transaction)\n            .get(this.keyForBatchId(batchId))\n            .next(function (dbBatch) {\n            return dbBatch ? _this.serializer.fromDbMutationBatch(dbBatch) : null;\n        });\n    };\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.lowerBound(this.keyForBatchId(batchId + 1));\n        var foundBatch = null;\n        return mutationsStore(transaction)\n            .iterate({ range: range }, function (key, dbBatch, control) {\n            if (dbBatch.userId === _this.userId) {\n                assert(dbBatch.batchId > batchId, 'Should have found mutation after ' + batchId);\n                foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);\n            }\n            control.done();\n        })\n            .next(function () { return foundBatch; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(Number.POSITIVE_INFINITY));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var _this = this;\n        var range = IDBKeyRange.bound(this.keyForBatchId(BATCHID_UNKNOWN), this.keyForBatchId(batchId));\n        return mutationsStore(transaction)\n            .loadAll(range)\n            .next(function (dbBatches) {\n            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });\n        });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        // Scan the document-mutation index starting with a prefix starting with\n        // the given documentKey.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        var results = [];\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            // Only consider rows matching exactly the specific key of\n            // interest. Note that because we order by path first, and we\n            // order terminators before path separators, we'll encounter all\n            // the index rows for documentKey contiguously. In particular, all\n            // the rows for documentKey will occur before any rows for\n            // documents nested in a subcollection beneath documentKey so we\n            // can stop as soon as we hit any such row.\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !documentKey.path.equals(path)) {\n                control.done();\n                return;\n            }\n            var mutationKey = _this.keyForBatchId(batchID);\n            // Look up the mutation batch in the store.\n            // PORTING NOTE: because iteration is callback driven in the web,\n            // we just look up the key instead of keeping an open iterator\n            // like iOS.\n            return mutationsStore(transaction)\n                .get(mutationKey)\n                .next(function (dbBatch) {\n                if (dbBatch === null) {\n                    fail('Dangling document-mutation reference found: ' +\n                        indexKey +\n                        ' which points to ' +\n                        mutationKey);\n                }\n                results.push(_this.serializer.fromDbMutationBatch(dbBatch));\n            });\n        })\n            .next(function () { return results; });\n    };\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        assert(!query.isDocumentQuery(), \"Document queries shouldn't go down this path\");\n        var queryPath = query.path;\n        var immediateChildrenLength = queryPath.length + 1;\n        // TODO(mcg): Actually implement a single-collection query\n        //\n        // This is actually executing an ancestor query, traversing the whole\n        // subtree below the collection which can be horrifically inefficient for\n        // some structures. The right way to solve this is to implement the full\n        // value index, but that's not in the cards in the near future so this is\n        // the best we can do for the moment.\n        //\n        // Since we don't yet index the actual properties in the mutations, our\n        // current approach is to just return all mutation batches that affect\n        // documents in the collection being queried.\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\n        var encodedQueryPath = indexPrefix[1];\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\n        // scan of the main table.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        return documentMutationsStore(transaction)\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\n            var path = EncodedResourcePath.decode(encodedPath);\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n                control.done();\n                return;\n            }\n            // Rows with document keys more than one segment longer than the\n            // query path can't be matches. For example, a query on 'rooms'\n            // can't match the document /rooms/abc/messages/xyx.\n            // TODO(mcg): we'll need a different scanner when we implement\n            // ancestor queries.\n            if (path.length !== immediateChildrenLength) {\n                return;\n            }\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        })\n            .next(function () {\n            var results = [];\n            var promises = [];\n            // TODO(rockwood): Implement this using iterate.\n            uniqueBatchIDs.forEach(function (batchID) {\n                var mutationKey = _this.keyForBatchId(batchID);\n                promises.push(mutationsStore(transaction)\n                    .get(mutationKey)\n                    .next(function (mutation) {\n                    if (mutation === null) {\n                        fail('Dangling document-mutation reference found, ' +\n                            'which points to ' +\n                            mutationKey);\n                    }\n                    results.push(_this.serializer.fromDbMutationBatch(mutation));\n                }));\n            });\n            return PersistencePromise.waitFor(promises).next(function () { return results; });\n        });\n    };\n    IndexedDbMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var txn = mutationsStore(transaction);\n        var indexTxn = documentMutationsStore(transaction);\n        var promises = [];\n        var _loop_1 = function (batch) {\n            var range = IDBKeyRange.only(this_1.keyForBatchId(batch.batchId));\n            var numDeleted = 0;\n            var removePromise = txn.iterate({ range: range }, function (key, value, control) {\n                numDeleted++;\n                return control.delete();\n            });\n            promises.push(removePromise.next(function () {\n                assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +\n                    batch.batchId);\n            }));\n            for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {\n                var mutation = _a[_i];\n                var indexKey = DbDocumentMutation.key(this_1.userId, mutation.key.path, batch.batchId);\n                promises.push(indexTxn.delete(indexKey));\n                if (this_1.garbageCollector !== null) {\n                    this_1.garbageCollector.addPotentialGarbageKey(mutation.key);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            _loop_1(batch);\n        }\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        var _this = this;\n        return this.checkEmpty(txn).next(function (empty) {\n            if (!empty) {\n                return PersistencePromise.resolve();\n            }\n            // Verify that there are no entries in the documentMutations index if\n            // the queue is empty.\n            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\n            var danglingMutationReferences = [];\n            return documentMutationsStore(txn)\n                .iterate({ range: startRange }, function (key, _, control) {\n                var userID = key[0];\n                if (userID !== _this.userId) {\n                    control.done();\n                    return;\n                }\n                else {\n                    var path = EncodedResourcePath.decode(key[1]);\n                    danglingMutationReferences.push(path);\n                }\n            })\n                .next(function () {\n                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. Dangling keys: ' +\n                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));\n            });\n        });\n    };\n    IndexedDbMutationQueue.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n        var _this = this;\n        var indexKey = DbDocumentMutation.prefixForPath(this.userId, key.path);\n        var encodedPath = indexKey[1];\n        var startRange = IDBKeyRange.lowerBound(indexKey);\n        var containsKey = false;\n        return documentMutationsStore(txn)\n            .iterate({ range: startRange, keysOnly: true }, function (key, _, control) {\n            var userID = key[0], keyPath = key[1], batchID = key[2];\n            if (userID === _this.userId && keyPath === encodedPath) {\n                containsKey = true;\n            }\n            control.done();\n        })\n            .next(function () { return containsKey; });\n    };\n    /**\n     * Creates a [userId, batchId] key for use with the DbMutationQueue object\n     * store.\n     */\n    IndexedDbMutationQueue.prototype.keyForBatchId = function (batchId) {\n        return [this.userId, batchId];\n    };\n    return IndexedDbMutationQueue;\n}());\nexport { IndexedDbMutationQueue };\nfunction validateStreamToken(token) {\n    assert(typeof token === 'string', 'Persisting non-string stream token not supported.');\n    return token;\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n    return getStore(txn, DbMutationBatch.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n    return getStore(txn, DbDocumentMutation.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n    return getStore(txn, DbMutationQueue.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_mutation_queue.js\n// module id = 131\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { assert, fail } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport * as EncodedResourcePath from './encoded_resource_path';\nimport { DbTarget, DbTargetDocument, DbTargetGlobal } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbQueryCache = /** @class */ (function () {\n    function IndexedDbQueryCache(serializer) {\n        this.serializer = serializer;\n        /**\n         * The last received snapshot version. We store this seperately from the\n         * metadata to avoid the extra conversion to/from DbTimestamp.\n         */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /**\n         * A cached copy of the metadata for the query cache.\n         */\n        this.metadata = new DbTargetGlobal(\n        /*highestTargetId=*/ 0, \n        /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp());\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n    }\n    IndexedDbQueryCache.prototype.start = function (transaction) {\n        var _this = this;\n        return globalTargetStore(transaction)\n            .get(DbTargetGlobal.key)\n            .next(function (metadata) {\n            if (metadata !== null) {\n                _this.metadata = metadata;\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\n                _this.lastRemoteSnapshotVersion = SnapshotVersion.fromTimestamp(new Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\n            }\n            return PersistencePromise.resolve();\n        });\n    };\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\n        return this.metadata.highestTargetId;\n    };\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\n    };\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        var _this = this;\n        var targetId = queryData.targetId;\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\n        if (targetId > this.metadata.highestTargetId) {\n            this.metadata.highestTargetId = targetId;\n            return addedQueryPromise.next(function () {\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\n            });\n        }\n        else {\n            return addedQueryPromise;\n        }\n    };\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\n            targetsStore(transaction).delete(queryData.targetId);\n        });\n    };\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\n        var _this = this;\n        // Iterating by the canonicalId may yield more than one result because\n        // canonicalId values are not required to be unique per target. This query\n        // depends on the queryTargets index to be efficent.\n        var canonicalId = query.canonicalId();\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n        var result = null;\n        return targetsStore(transaction)\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\n            var found = _this.serializer.fromDbTarget(value);\n            // After finding a potential match, check that the query is\n            // actually equal to the requested query.\n            if (query.equals(found.query)) {\n                result = found;\n                control.done();\n            }\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // Indexeddb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        var _this = this;\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n        // IndexedDb.\n        var promises = [];\n        var store = documentTargetStore(txn);\n        keys.forEach(function (key) {\n            var path = EncodedResourcePath.encode(key.path);\n            promises.push(store.delete([targetId, path]));\n            if (_this.garbageCollector !== null) {\n                _this.garbageCollector.addPotentialGarbageKey(key);\n            }\n        });\n        return PersistencePromise.waitFor(promises);\n    };\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        var store = documentTargetStore(txn);\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\n            return store.delete(range);\n        });\n    };\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\n        var _this = this;\n        var store = documentTargetStore(txn);\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\n            // In order to generate garbage events properly, we need to read these\n            // keys before deleting.\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\n                var path = EncodedResourcePath.decode(key[1]);\n                var docKey = new DocumentKey(path);\n                // Paranoid assertion in case the the collector is set to null\n                // during the iteration.\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\n            });\n        }\n        else {\n            return PersistencePromise.resolve();\n        }\n    };\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var promises = [];\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var store = documentTargetStore(txn);\n        var result = documentKeySet();\n        return store\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\n            var path = EncodedResourcePath.decode(key[1]);\n            var docKey = new DocumentKey(path);\n            result = result.add(docKey);\n        })\n            .next(function () { return result; });\n    };\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.garbageCollector = gc;\n    };\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\n        var path = EncodedResourcePath.encode(key.path);\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \n        /*lowerOpen=*/ false, \n        /*upperOpen=*/ true);\n        var count = 0;\n        return documentTargetStore(txn)\n            .iterate({\n            index: DbTargetDocument.documentTargetsIndex,\n            keysOnly: true,\n            range: range\n        }, function (key, _, control) {\n            count++;\n            control.done();\n        })\n            .next(function () { return count > 0; });\n    };\n    return IndexedDbQueryCache;\n}());\nexport { IndexedDbQueryCache };\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n    return getStore(txn, DbTarget.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n    return getStore(txn, DbTargetGlobal.store);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n    return getStore(txn, DbTargetDocument.store);\n}\n/**\n * Helper to get a typed SimpleDbStore from a transaction.\n */\nfunction getStore(txn, store) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\n\n//# sourceMappingURL=indexeddb_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_query_cache.js\n// module id = 132\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { fail } from '../util/assert';\nimport { DbRemoteDocument } from './indexeddb_schema';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\nexport { IndexedDbRemoteDocumentCache };\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n//# sourceMappingURL=indexeddb_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/indexeddb_remote_document_cache.js\n// module id = 133\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../core/timestamp';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { assert, fail } from '../util/assert';\nimport { DbMutationBatch, DbNoDocument, DbRemoteDocument, DbTarget, DbTimestamp } from './indexeddb_schema';\nimport { QueryData, QueryPurpose } from './query_data';\n/** Serializer for values stored in the LocalStore. */\nvar LocalSerializer = /** @class */ (function () {\n    function LocalSerializer(remoteSerializer) {\n        this.remoteSerializer = remoteSerializer;\n    }\n    /** Decodes a remote document from storage locally to a Document. */\n    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {\n        if (remoteDoc.document) {\n            return this.remoteSerializer.fromDocument(remoteDoc.document);\n        }\n        else if (remoteDoc.noDocument) {\n            var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n            var readTime = remoteDoc.noDocument.readTime;\n            var timestamp = new Timestamp(readTime.seconds, readTime.nanos);\n            return new NoDocument(key, SnapshotVersion.fromTimestamp(timestamp));\n        }\n        else {\n            return fail('Unexpected DbRemoteDocument');\n        }\n    };\n    /** Encodes a document for storage locally. */\n    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {\n        if (maybeDoc instanceof Document) {\n            var doc = this.remoteSerializer.toDocument(maybeDoc);\n            return new DbRemoteDocument(null, doc);\n        }\n        else {\n            var path = maybeDoc.key.path.toArray();\n            var timestamp = maybeDoc.version.toTimestamp();\n            var readTime = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n            return new DbRemoteDocument(new DbNoDocument(path, readTime), null);\n        }\n    };\n    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {\n        var _this = this;\n        var serializedMutations = batch.mutations.map(function (m) {\n            return _this.remoteSerializer.toMutation(m);\n        });\n        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toEpochMilliseconds(), serializedMutations);\n    };\n    /** Decodes a DbMutationBatch into a MutationBatch */\n    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {\n        var _this = this;\n        var mutations = dbBatch.mutations.map(function (m) {\n            return _this.remoteSerializer.fromMutation(m);\n        });\n        var timestamp = Timestamp.fromEpochMilliseconds(dbBatch.localWriteTimeMs);\n        return new MutationBatch(dbBatch.batchId, timestamp, mutations);\n    };\n    /** Decodes a DbTarget into QueryData */\n    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {\n        var readTime = new Timestamp(dbTarget.readTime.seconds, dbTarget.readTime.nanos);\n        var version = SnapshotVersion.fromTimestamp(readTime);\n        var query;\n        if (isDocumentQuery(dbTarget.query)) {\n            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n        }\n        else {\n            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n        }\n        return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, version, dbTarget.resumeToken);\n    };\n    /** Encodes QueryData into a DbTarget for storage locally. */\n    LocalSerializer.prototype.toDbTarget = function (queryData) {\n        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +\n            QueryPurpose.Listen +\n            ' may be stored, got ' +\n            queryData.purpose);\n        var timestamp = queryData.snapshotVersion.toTimestamp();\n        var dbTimestamp = new DbTimestamp(timestamp.seconds, timestamp.nanos);\n        var queryProto;\n        if (queryData.query.isDocumentQuery()) {\n            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);\n        }\n        else {\n            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);\n        }\n        assert(typeof queryData.resumeToken === 'string', 'Persisting non-string resume token not supported.');\n        var resumeToken = queryData.resumeToken;\n        // lastListenSequenceNumber is always 0 until we do real GC.\n        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, 0, queryProto);\n    };\n    return LocalSerializer;\n}());\nexport { LocalSerializer };\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n    return dbQuery.documents !== undefined;\n}\n\n//# sourceMappingURL=local_serializer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/local_serializer.js\n// module id = 134\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { Timestamp } from '../core/timestamp';\nimport { documentKeySet } from '../model/collections';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { ResetMapping, UpdateMapping } from '../remote/remote_event';\nimport { assert, fail } from '../util/assert';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryData, QueryPurpose } from './query_data';\nimport { ReferenceSet } from './reference_set';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nvar LOG_TAG = 'LocalStore';\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nvar LocalStore = /** @class */ (function () {\n    function LocalStore(\n        /** Manages our in-memory or durable persistence. */\n        persistence, initialUser, \n        /**\n         * The garbage collector collects documents that should no longer be\n         * cached (e.g. if they are no longer retained by the above reference sets\n         * and the garbage collector is performing eager collection).\n         */\n        garbageCollector) {\n        this.persistence = persistence;\n        this.garbageCollector = garbageCollector;\n        /**\n         * The set of document references maintained by any local views.\n         */\n        this.localViewReferences = new ReferenceSet();\n        /** Maps a targetID to data about its query. */\n        this.targetIds = {};\n        /** Used to generate targetIDs for queries tracked locally. */\n        this.targetIdGenerator = TargetIdGenerator.forLocalStore();\n        /**\n         * A heldBatchResult is a mutation batch result (from a write acknowledgement)\n         * that arrived before the watch stream got notified of a snapshot that\n         * includes the write. So we \"hold\" it until the watch stream catches up. It\n         * ensures that the local write remains visible (latency compensation) and\n         * doesn't temporarily appear reverted because the watch stream is slower than\n         * the write stream and so wasn't reflecting it.\n         *\n         * NOTE: Eventually we want to move this functionality into the remote store.\n         */\n        this.heldBatchResults = [];\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\n        this.queryCache = persistence.getQueryCache();\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue);\n        this.garbageCollector.addGarbageSource(this.localViewReferences);\n        this.garbageCollector.addGarbageSource(this.queryCache);\n        this.garbageCollector.addGarbageSource(this.mutationQueue);\n    }\n    /** Performs any initial startup actions required by the local store. */\n    LocalStore.prototype.start = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Start LocalStore', function (txn) {\n            return _this.startMutationQueue(txn).next(function () { return _this.startQueryCache(txn); });\n        });\n    };\n    /**\n     * Tells the LocalStore that the currently authenticated user has changed.\n     *\n     * In response the local store switches the mutation queue to the new user and\n     * returns any resulting document changes.\n     */\n    LocalStore.prototype.handleUserChange = function (user) {\n        var _this = this;\n        return this.persistence.runTransaction('Handle user change', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return _this.mutationQueue\n                .getAllMutationBatches(txn)\n                .next(function (promisedOldBatches) {\n                oldBatches = promisedOldBatches;\n                _this.garbageCollector.removeGarbageSource(_this.mutationQueue);\n                _this.mutationQueue = _this.persistence.getMutationQueue(user);\n                _this.garbageCollector.addGarbageSource(_this.mutationQueue);\n                return _this.startMutationQueue(txn);\n            })\n                .next(function () {\n                // Recreate our LocalDocumentsView using the new\n                // MutationQueue.\n                _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);\n                return _this.mutationQueue.getAllMutationBatches(txn);\n            })\n                .next(function (newBatches) {\n                // Union the old/new changed keys.\n                var changedKeys = documentKeySet();\n                for (var _i = 0, _a = [oldBatches, newBatches]; _i < _a.length; _i++) {\n                    var batches = _a[_i];\n                    for (var _b = 0, batches_1 = batches; _b < batches_1.length; _b++) {\n                        var batch = batches_1[_b];\n                        for (var _c = 0, _d = batch.mutations; _c < _d.length; _c++) {\n                            var mutation = _d[_c];\n                            changedKeys = changedKeys.add(mutation.key);\n                        }\n                    }\n                }\n                // Return the set of all (potentially) changed documents as the\n                // result of the user change.\n                return _this.localDocuments.getDocuments(txn, changedKeys);\n            });\n        });\n    };\n    LocalStore.prototype.startQueryCache = function (txn) {\n        var _this = this;\n        return this.queryCache.start(txn).next(function () {\n            var targetId = _this.queryCache.getHighestTargetId();\n            _this.targetIdGenerator = TargetIdGenerator.forLocalStore(targetId);\n        });\n    };\n    LocalStore.prototype.startMutationQueue = function (txn) {\n        var _this = this;\n        return this.mutationQueue\n            .start(txn)\n            .next(function () {\n            // If we have any leftover mutation batch results from a prior run,\n            // just drop them.\n            // TODO(http://b/33446471): We probably need to repopulate\n            // heldBatchResults or similar instead, but that is not\n            // straightforward since we're not persisting the write ack versions.\n            _this.heldBatchResults = [];\n            return _this.mutationQueue.getHighestAcknowledgedBatchId(txn);\n        })\n            .next(function (highestAck) {\n            // TODO(mikelehen): This is the only usage of\n            // getAllMutationBatchesThroughBatchId(). Consider removing it in\n            // favor of a getAcknowledgedBatches() method.\n            if (highestAck !== BATCHID_UNKNOWN) {\n                return _this.mutationQueue.getAllMutationBatchesThroughBatchId(txn, highestAck);\n            }\n            else {\n                return PersistencePromise.resolve([]);\n            }\n        })\n            .next(function (ackedBatches) {\n            if (ackedBatches.length > 0) {\n                return _this.mutationQueue.removeMutationBatches(txn, ackedBatches);\n            }\n            else {\n                return PersistencePromise.resolve();\n            }\n        });\n    };\n    /* Accept locally generated Mutations and commit them to storage. */\n    LocalStore.prototype.localWrite = function (mutations) {\n        var _this = this;\n        return this.persistence.runTransaction('Locally write mutations', function (txn) {\n            var batch;\n            var localWriteTime = Timestamp.now();\n            return _this.mutationQueue\n                .addMutationBatch(txn, localWriteTime, mutations)\n                .next(function (promisedBatch) {\n                batch = promisedBatch;\n                // TODO(koss): This is doing an N^2 update by replaying ALL the\n                // mutations on each document (instead of just the ones added) in\n                // this batch.\n                var keys = batch.keys();\n                return _this.localDocuments.getDocuments(txn, keys);\n            })\n                .next(function (changedDocuments) {\n                return { batchId: batch.batchId, changes: changedDocuments };\n            });\n        });\n    };\n    /**\n     * Acknowledge the given batch.\n     *\n     * On the happy path when a batch is acknowledged, the local store will\n     *\n     *  + remove the batch from the mutation queue;\n     *  + apply the changes to the remote document cache;\n     *  + recalculate the latency compensated view implied by those changes (there\n     *    may be mutations in the queue that affect the documents but haven't been\n     *    acknowledged yet); and\n     *  + give the changed documents back the sync engine\n     *\n     * @returns The resulting (modified) documents.\n     */\n    LocalStore.prototype.acknowledgeBatch = function (batchResult) {\n        var _this = this;\n        return this.persistence.runTransaction('Acknowledge batch', function (txn) {\n            var affected;\n            return _this.mutationQueue\n                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)\n                .next(function () {\n                if (_this.shouldHoldBatchResult(batchResult.commitVersion)) {\n                    _this.heldBatchResults.push(batchResult);\n                    affected = documentKeySet();\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var documentBuffer_1 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseBatchResults(txn, [batchResult], documentBuffer_1).next(function (promisedAffectedKeys) {\n                        affected = promisedAffectedKeys;\n                        return documentBuffer_1.apply(txn);\n                    });\n                }\n            })\n                .next(function () {\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affected);\n            });\n        });\n    };\n    /**\n     * Remove mutations from the MutationQueue for the specified batch;\n     * LocalDocuments will be recalculated.\n     *\n     * @returns The resulting modified documents.\n     */\n    LocalStore.prototype.rejectBatch = function (batchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Reject batch', function (txn) {\n            var toReject;\n            var affectedKeys;\n            return _this.mutationQueue\n                .lookupMutationBatch(txn, batchId)\n                .next(function (promisedToReject) {\n                assert(promisedToReject != null, 'Attempt to reject nonexistent batch!');\n                toReject = promisedToReject;\n                return _this.mutationQueue\n                    .getHighestAcknowledgedBatchId(txn)\n                    .next(function (lastAcked) {\n                    assert(batchId > lastAcked, \"Acknowledged batches can't be rejected.\");\n                    return toReject;\n                });\n            })\n                .next(function () {\n                return _this.removeMutationBatch(txn, toReject);\n            })\n                .next(function (promisedAffectedKeys) {\n                affectedKeys = promisedAffectedKeys;\n                return _this.mutationQueue.performConsistencyCheck(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, affectedKeys);\n            });\n        });\n    };\n    /** Returns the last recorded stream token for the current user. */\n    LocalStore.prototype.getLastStreamToken = function () {\n        var _this = this;\n        return this.persistence.runTransaction('Get last stream token', function (txn) {\n            return _this.mutationQueue.getLastStreamToken(txn);\n        });\n    };\n    /**\n     * Sets the stream token for the current user without acknowledging any\n     * mutation batch. This is usually only useful after a stream handshake or in\n     * response to an error that requires clearing the stream token.\n     */\n    LocalStore.prototype.setLastStreamToken = function (streamToken) {\n        var _this = this;\n        return this.persistence.runTransaction('Set last stream token', function (txn) {\n            return _this.mutationQueue.setLastStreamToken(txn, streamToken);\n        });\n    };\n    /**\n     * Returns the last consistent snapshot processed (used by the RemoteStore to\n     * determine whether to buffer incoming snapshots from the backend).\n     */\n    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.queryCache.getLastRemoteSnapshotVersion();\n    };\n    /**\n     * Update the \"ground-state\" (remote) documents. We assume that the remote\n     * event reflects any write batches that have been acknowledged or rejected\n     * (i.e. we do not re-apply local mutations to updates from this event).\n     *\n     * LocalDocuments are re-calculated if there are remaining mutations in the\n     * queue.\n     */\n    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {\n        var _this = this;\n        var documentBuffer = new RemoteDocumentChangeBuffer(this.remoteDocuments);\n        return this.persistence.runTransaction('Apply remote event', function (txn) {\n            var promises = [];\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                // Do not ref/unref unassigned targetIds - it may lead to leaks.\n                var queryData = _this.targetIds[targetId];\n                if (!queryData)\n                    return;\n                var mapping = change.mapping;\n                if (mapping) {\n                    // First make sure that all references are deleted\n                    if (mapping instanceof ResetMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeysForTargetId(txn, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.documents, targetId);\n                        }));\n                    }\n                    else if (mapping instanceof UpdateMapping) {\n                        promises.push(_this.queryCache\n                            .removeMatchingKeys(txn, mapping.removedDocuments, targetId)\n                            .next(function () {\n                            return _this.queryCache.addMatchingKeys(txn, mapping.addedDocuments, targetId);\n                        }));\n                    }\n                    else {\n                        return fail('Unknown mapping type: ' + JSON.stringify(mapping));\n                    }\n                }\n                // Update the resume token if the change includes one. Don't clear\n                // any preexisting value.\n                var resumeToken = change.resumeToken;\n                if (resumeToken.length > 0) {\n                    queryData = queryData.update({\n                        resumeToken: resumeToken,\n                        snapshotVersion: change.snapshotVersion\n                    });\n                    _this.targetIds[targetId] = queryData;\n                    promises.push(_this.queryCache.addQueryData(txn, queryData));\n                }\n            });\n            var changedDocKeys = documentKeySet();\n            remoteEvent.documentUpdates.forEach(function (key, doc) {\n                changedDocKeys = changedDocKeys.add(key);\n                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {\n                    // Make sure we don't apply an old document version to the remote\n                    // cache, though we make an exception for SnapshotVersion.MIN which\n                    // can happen for manufactured events (e.g. in the case of a limbo\n                    // document resolution failing).\n                    if (existingDoc == null ||\n                        doc.version.equals(SnapshotVersion.MIN) ||\n                        doc.version.compareTo(existingDoc.version) >= 0) {\n                        documentBuffer.addEntry(doc);\n                    }\n                    else {\n                        log.debug(LOG_TAG, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n                    }\n                    // The document might be garbage because it was unreferenced by\n                    // everything. Make sure to mark it as garbage if it is...\n                    _this.garbageCollector.addPotentialGarbageKey(key);\n                }));\n            });\n            // HACK: The only reason we allow a null snapshot version is so that we\n            // can synthesize remote events when we get permission denied errors while\n            // trying to resolve the state of a locally cached document that is in\n            // limbo.\n            var lastRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion();\n            var remoteVersion = remoteEvent.snapshotVersion;\n            if (!remoteVersion.equals(SnapshotVersion.MIN)) {\n                assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +\n                    remoteVersion +\n                    ' < ' +\n                    lastRemoteVersion);\n                promises.push(_this.queryCache.setLastRemoteSnapshotVersion(txn, remoteVersion));\n            }\n            var releasedWriteKeys;\n            return PersistencePromise.waitFor(promises)\n                .next(function () { return _this.releaseHeldBatchResults(txn, documentBuffer); })\n                .next(function (promisedReleasedWriteKeys) {\n                releasedWriteKeys = promisedReleasedWriteKeys;\n                return documentBuffer.apply(txn);\n            })\n                .next(function () {\n                return _this.localDocuments.getDocuments(txn, changedDocKeys.unionWith(releasedWriteKeys));\n            });\n        });\n    };\n    /**\n     * Notify local store of the changed views to locally pin documents.\n     */\n    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {\n        var _this = this;\n        return this.persistence.runTransaction('Notify local view changes', function (txn) {\n            var promises = [];\n            var _loop_1 = function (view) {\n                promises.push(_this.queryCache\n                    .getQueryData(txn, view.query)\n                    .next(function (queryData) {\n                    assert(queryData !== null, 'Local view changes contain unallocated query.');\n                    var targetId = queryData.targetId;\n                    _this.localViewReferences.addReferences(view.addedKeys, targetId);\n                    _this.localViewReferences.removeReferences(view.removedKeys, targetId);\n                }));\n            };\n            for (var _i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n                var view = viewChanges_1[_i];\n                _loop_1(view);\n            }\n            return PersistencePromise.waitFor(promises);\n        });\n    };\n    /**\n     * Gets the mutation batch after the passed in batchId in the mutation queue\n     * or null if empty.\n     * @param afterBatchId If provided, the batch to search after.\n     * @returns The next mutation or null if there wasn't one.\n     */\n    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {\n        var _this = this;\n        return this.persistence.runTransaction('Get next mutation batch', function (txn) {\n            if (afterBatchId === undefined) {\n                afterBatchId = BATCHID_UNKNOWN;\n            }\n            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n        });\n    };\n    /**\n     * Read the current value of a Document with a given key or null if not\n     * found - used for testing.\n     */\n    LocalStore.prototype.readDocument = function (key) {\n        var _this = this;\n        return this.persistence.runTransaction('read document', function (txn) {\n            return _this.localDocuments.getDocument(txn, key);\n        });\n    };\n    /**\n     * Assigns the given query an internal ID so that its results can be pinned so\n     * they don't get GC'd. A query must be allocated in the local store before\n     * the store can be used to manage its view.\n     */\n    LocalStore.prototype.allocateQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Allocate query', function (txn) {\n            var queryData;\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (cached) {\n                if (cached) {\n                    // This query has been listened to previously, so reuse the\n                    // previous targetID.\n                    // TODO(mcg): freshen last accessed date?\n                    queryData = cached;\n                    return PersistencePromise.resolve();\n                }\n                else {\n                    var targetId = _this.targetIdGenerator.next();\n                    queryData = new QueryData(query, targetId, QueryPurpose.Listen);\n                    return _this.queryCache.addQueryData(txn, queryData);\n                }\n            })\n                .next(function () {\n                assert(!_this.targetIds[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);\n                _this.targetIds[queryData.targetId] = queryData;\n                return queryData;\n            });\n        });\n    };\n    /** Unpin all the documents associated with the given query. */\n    LocalStore.prototype.releaseQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Release query', function (txn) {\n            return _this.queryCache\n                .getQueryData(txn, query)\n                .next(function (queryData) {\n                assert(queryData != null, 'Tried to release nonexistent query: ' + query);\n                _this.localViewReferences.removeReferencesForId(queryData.targetId);\n                delete _this.targetIds[queryData.targetId];\n                if (_this.garbageCollector.isEager) {\n                    return _this.queryCache.removeQueryData(txn, queryData);\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            })\n                .next(function () {\n                // If this was the last watch target, then we won't get any more\n                // watch snapshots, so we should release any held batch results.\n                if (objUtils.isEmpty(_this.targetIds)) {\n                    var documentBuffer_2 = new RemoteDocumentChangeBuffer(_this.remoteDocuments);\n                    return _this.releaseHeldBatchResults(txn, documentBuffer_2).next(function () {\n                        documentBuffer_2.apply(txn);\n                    });\n                }\n                else {\n                    return PersistencePromise.resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Runs the specified query against all the documents in the local store and\n     * returns the results.\n     */\n    LocalStore.prototype.executeQuery = function (query) {\n        var _this = this;\n        return this.persistence.runTransaction('Execute query', function (txn) {\n            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);\n        });\n    };\n    /**\n     * Returns the keys of the documents that are associated with the given\n     * target id in the remote table.\n     */\n    LocalStore.prototype.remoteDocumentKeys = function (targetId) {\n        var _this = this;\n        return this.persistence.runTransaction('Remote document keys', function (txn) {\n            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);\n        });\n    };\n    /**\n     * Collect garbage if necessary.\n     * Should be called periodically by Sync Engine to recover resources. The\n     * implementation must guarantee that GC won't happen in other places than\n     * this method call.\n     */\n    LocalStore.prototype.collectGarbage = function () {\n        var _this = this;\n        // Call collectGarbage regardless of whether isGCEnabled so the referenceSet\n        // doesn't continue to accumulate the garbage keys.\n        return this.persistence.runTransaction('Garbage collection', function (txn) {\n            return _this.garbageCollector.collectGarbage(txn).next(function (garbage) {\n                var promises = [];\n                garbage.forEach(function (key) {\n                    promises.push(_this.remoteDocuments.removeEntry(txn, key));\n                });\n                return PersistencePromise.waitFor(promises);\n            });\n        });\n    };\n    LocalStore.prototype.releaseHeldBatchResults = function (txn, documentBuffer) {\n        var toRelease = [];\n        for (var _i = 0, _a = this.heldBatchResults; _i < _a.length; _i++) {\n            var batchResult = _a[_i];\n            if (!this.isRemoteUpToVersion(batchResult.commitVersion)) {\n                break;\n            }\n            toRelease.push(batchResult);\n        }\n        if (toRelease.length === 0) {\n            return PersistencePromise.resolve(documentKeySet());\n        }\n        else {\n            this.heldBatchResults.splice(0, toRelease.length);\n            return this.releaseBatchResults(txn, toRelease, documentBuffer);\n        }\n    };\n    LocalStore.prototype.isRemoteUpToVersion = function (version) {\n        // If there are no watch targets, then we won't get remote snapshots, and\n        // we are always \"up-to-date.\"\n        var lastRemoteVersion = this.queryCache.getLastRemoteSnapshotVersion();\n        return (version.compareTo(lastRemoteVersion) <= 0 ||\n            objUtils.isEmpty(this.targetIds));\n    };\n    LocalStore.prototype.shouldHoldBatchResult = function (version) {\n        // Check if watcher isn't up to date or prior results are already held.\n        return (!this.isRemoteUpToVersion(version) || this.heldBatchResults.length > 0);\n    };\n    LocalStore.prototype.releaseBatchResults = function (txn, batchResults, documentBuffer) {\n        var _this = this;\n        var promiseChain = PersistencePromise.resolve();\n        var _loop_2 = function (batchResult) {\n            promiseChain = promiseChain.next(function () {\n                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);\n            });\n        };\n        for (var _i = 0, batchResults_1 = batchResults; _i < batchResults_1.length; _i++) {\n            var batchResult = batchResults_1[_i];\n            _loop_2(batchResult);\n        }\n        return promiseChain.next(function () {\n            return _this.removeMutationBatches(txn, batchResults.map(function (result) { return result.batch; }));\n        });\n    };\n    LocalStore.prototype.removeMutationBatch = function (txn, batch) {\n        return this.removeMutationBatches(txn, [batch]);\n    };\n    /** Removes all the mutation batches named in the given array. */\n    LocalStore.prototype.removeMutationBatches = function (txn, batches) {\n        var affectedDocs = documentKeySet();\n        for (var _i = 0, batches_2 = batches; _i < batches_2.length; _i++) {\n            var batch = batches_2[_i];\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                affectedDocs = affectedDocs.add(key);\n            }\n        }\n        return this.mutationQueue\n            .removeMutationBatches(txn, batches)\n            .next(function () { return affectedDocs; });\n    };\n    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {\n        var batch = batchResult.batch;\n        var docKeys = batch.keys();\n        var promiseChain = PersistencePromise.resolve();\n        docKeys.forEach(function (docKey) {\n            promiseChain = promiseChain\n                .next(function () {\n                return documentBuffer.getEntry(txn, docKey);\n            })\n                .next(function (remoteDoc) {\n                var doc = remoteDoc;\n                var ackVersion = batchResult.docVersions.get(docKey);\n                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');\n                if (!doc || doc.version.compareTo(ackVersion) < 0) {\n                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n                    if (!doc) {\n                        assert(!remoteDoc, 'Mutation batch ' +\n                            batch +\n                            ' applied to document ' +\n                            remoteDoc +\n                            ' resulted in null');\n                    }\n                    else {\n                        documentBuffer.addEntry(doc);\n                    }\n                }\n            });\n        });\n        return promiseChain;\n    };\n    return LocalStore;\n}());\nexport { LocalStore };\n\n//# sourceMappingURL=local_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/local_store.js\n// module id = 135\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet, documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nvar LocalDocumentsView = /** @class */ (function () {\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.mutationQueue = mutationQueue;\n    }\n    /**\n     * Get the local view of the document identified by `key`.\n     *\n     * @return Local view of the document or null if we don't have any cached\n     * state for it.\n     */\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n        var _this = this;\n        return this.remoteDocumentCache\n            .getEntry(transaction, key)\n            .next(function (remoteDoc) {\n            return _this.computeLocalDocument(transaction, key, remoteDoc);\n        });\n    };\n    /**\n     * Gets the local view of the documents identified by `keys`.\n     *\n     * If we don't have cached state for a document in `keys`, a NoDocument will\n     * be stored for that key in the resulting set.\n     */\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n        var _this = this;\n        var promises = [];\n        var results = maybeDocumentMap();\n        keys.forEach(function (key) {\n            promises.push(_this.getDocument(transaction, key).next(function (maybeDoc) {\n                // TODO(http://b/32275378): Don't conflate missing / deleted.\n                if (!maybeDoc) {\n                    maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());\n                }\n                results = results.insert(key, maybeDoc);\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return results; });\n    };\n    /** Performs a query against the local view of all documents. */\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        if (DocumentKey.isDocumentKey(query.path)) {\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n        }\n        else {\n            return this.getDocumentsMatchingCollectionQuery(transaction, query);\n        }\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n        // Just do a simple document lookup.\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {\n            var result = documentMap();\n            if (maybeDoc instanceof Document) {\n                result = result.insert(maybeDoc.key, maybeDoc);\n            }\n            return result;\n        });\n    };\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {\n        var _this = this;\n        // Query the remote documents and overlay mutations.\n        // TODO(mikelehen): There may be significant overlap between the mutations\n        // affecting these remote documents and the\n        // getAllMutationBatchesAffectingQuery() mutations. Consider optimizing.\n        var results;\n        return this.remoteDocumentCache\n            .getDocumentsMatchingQuery(transaction, query)\n            .next(function (queryResults) {\n            return _this.computeLocalDocuments(transaction, queryResults);\n        })\n            .next(function (promisedResults) {\n            results = promisedResults;\n            // Now use the mutation queue to discover any other documents that may\n            // match the query after applying mutations.\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n        })\n            .next(function (matchingMutationBatches) {\n            var matchingKeys = documentKeySet();\n            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n                var batch = matchingMutationBatches_1[_i];\n                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                    var mutation = _b[_a];\n                    // TODO(mikelehen): PERF: Check if this mutation actually\n                    // affects the query to reduce work.\n                    if (!results.get(mutation.key)) {\n                        matchingKeys = matchingKeys.add(mutation.key);\n                    }\n                }\n            }\n            // Now add in the results for the matchingKeys.\n            var promises = [];\n            matchingKeys.forEach(function (key) {\n                promises.push(_this.getDocument(transaction, key).next(function (doc) {\n                    if (doc instanceof Document) {\n                        results = results.insert(doc.key, doc);\n                    }\n                }));\n            });\n            return PersistencePromise.waitFor(promises);\n        })\n            .next(function () {\n            // Finally, filter out any documents that don't actually match\n            // the query.\n            results.forEach(function (key, doc) {\n                if (!query.matches(doc)) {\n                    results = results.remove(key);\n                }\n            });\n            return results;\n        });\n    };\n    /**\n     * Takes a remote document and applies local mutations to generate the local\n     * view of the document.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the document (necessary when remoteDocument\n     *     is null).\n     * @param document The base remote document to apply mutations to or null.\n     */\n    LocalDocumentsView.prototype.computeLocalDocument = function (transaction, documentKey, document) {\n        return this.mutationQueue\n            .getAllMutationBatchesAffectingDocumentKey(transaction, documentKey)\n            .next(function (batches) {\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n                var batch = batches_1[_i];\n                document = batch.applyToLocalView(documentKey, document);\n            }\n            return document;\n        });\n    };\n    /**\n     * Takes a set of remote documents and applies local mutations to generate the\n     * local view of the documents.\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documents The base remote documents to apply mutations to.\n     * @return The local view of the documents.\n     */\n    LocalDocumentsView.prototype.computeLocalDocuments = function (transaction, documents) {\n        var _this = this;\n        var promises = [];\n        documents.forEach(function (key, doc) {\n            promises.push(_this.computeLocalDocument(transaction, key, doc).next(function (mutatedDoc) {\n                if (mutatedDoc instanceof Document) {\n                    documents = documents.insert(mutatedDoc.key, mutatedDoc);\n                }\n                else if (mutatedDoc instanceof NoDocument) {\n                    documents = documents.remove(mutatedDoc.key);\n                }\n                else {\n                    fail('Unknown MaybeDocument: ' + mutatedDoc);\n                }\n            }));\n        });\n        return PersistencePromise.waitFor(promises).next(function () { return documents; });\n    };\n    return LocalDocumentsView;\n}());\nexport { LocalDocumentsView };\n\n//# sourceMappingURL=local_documents_view.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/local_documents_view.js\n// module id = 136\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\n    function RemoteDocumentChangeBuffer(remoteDocumentCache) {\n        this.remoteDocumentCache = remoteDocumentCache;\n        this.changes = maybeDocumentMap();\n    }\n    /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {\n        var changes = this.assertChanges();\n        this.changes = changes.insert(maybeDocument.key, maybeDocument);\n    };\n    // NOTE: removeEntry() is not presently necessary and so is omitted.\n    /**\n     * Looks up an entry in the cache. The buffered changes will first be checked,\n     * and if no buffered change applies, this will forward to\n     * `RemoteDocumentCache.getEntry()`.\n     *\n     * @param transaction The transaction in which to perform any persistence\n     *     operations.\n     * @param documentKey The key of the entry to look up.\n     * @return The cached Document or NoDocument entry, or null if we have nothing\n     * cached.\n     */\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n        var changes = this.assertChanges();\n        var bufferedEntry = changes.get(documentKey);\n        if (bufferedEntry) {\n            return PersistencePromise.resolve(bufferedEntry);\n        }\n        else {\n            return this.remoteDocumentCache.getEntry(transaction, documentKey);\n        }\n    };\n    /**\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\n     * the provided transaction.\n     */\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n        var _this = this;\n        var changes = this.assertChanges();\n        var promises = [];\n        changes.forEach(function (key, maybeDoc) {\n            promises.push(_this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n        });\n        // We should not be used to buffer any more changes.\n        this.changes = null;\n        return PersistencePromise.waitFor(promises);\n    };\n    /** Helper to assert this.changes is not null and return it. */\n    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {\n        assert(this.changes !== null, 'Changes have already been applied.');\n        return this.changes;\n    };\n    return RemoteDocumentChangeBuffer;\n}());\nexport { RemoteDocumentChangeBuffer };\n\n//# sourceMappingURL=remote_document_change_buffer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/remote_document_change_buffer.js\n// module id = 137\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new MemoryRemoteDocumentCache();\n        this.queryCache = new MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\nexport { MemoryPersistence };\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n//# sourceMappingURL=memory_persistence.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/memory_persistence.js\n// module id = 138\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\nvar MemoryMutationQueue = /** @class */ (function () {\n    function MemoryMutationQueue() {\n        /**\n         * The set of all mutations that have been sent but not yet been applied to\n         * the backend.\n         */\n        this.mutationQueue = [];\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\n        this.nextBatchId = 1;\n        /** The highest acknowledged mutation in the queue. */\n        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        /** The last received stream token from the server, used to acknowledge which\n         * responses the client has processed. Stream tokens are opaque checkpoint\n         * markers whose only real value is their inclusion in the next request.\n         */\n        this.lastStreamToken = emptyByteString();\n        /** The garbage collector to notify about potential garbage keys. */\n        this.garbageCollector = null;\n        /** An ordered mapping between documents and the mutations batch IDs. */\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n    }\n    MemoryMutationQueue.prototype.start = function (transaction) {\n        // NOTE: The queue may be shutdown / started multiple times, since we\n        // maintain the queue for the duration of the app session in case a user\n        // logs out / back in. To behave like the LevelDB-backed MutationQueue (and\n        // accommodate tests that expect as much), we reset nextBatchId and\n        // highestAcknowledgedBatchId if the queue is empty.\n        if (this.mutationQueue.length === 0) {\n            this.nextBatchId = 1;\n            this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;\n        }\n        assert(this.highestAcknowledgedBatchId < this.nextBatchId, 'highestAcknowledgedBatchId must be less than the nextBatchId');\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\n    };\n    MemoryMutationQueue.prototype.getNextBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.nextBatchId);\n    };\n    MemoryMutationQueue.prototype.getHighestAcknowledgedBatchId = function (transaction) {\n        return PersistencePromise.resolve(this.highestAcknowledgedBatchId);\n    };\n    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {\n        var batchId = batch.batchId;\n        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');\n        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');\n        // Verify that the batch in the queue is the one to be acknowledged.\n        var check = this.mutationQueue[batchIndex];\n        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +\n            batchId +\n            ', got batch ' +\n            check.batchId);\n        assert(!check.isTombstone(), \"Can't acknowledge a previously removed batch\");\n        this.highestAcknowledgedBatchId = batchId;\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {\n        return PersistencePromise.resolve(this.lastStreamToken);\n    };\n    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {\n        this.lastStreamToken = streamToken;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {\n        assert(mutations.length !== 0, 'Mutation batches should not be empty');\n        var batchId = this.nextBatchId;\n        this.nextBatchId++;\n        if (this.mutationQueue.length > 0) {\n            var prior = this.mutationQueue[this.mutationQueue.length - 1];\n            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');\n        }\n        var batch = new MutationBatch(batchId, localWriteTime, mutations);\n        this.mutationQueue.push(batch);\n        // Track references by document key.\n        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n            var mutation = mutations_1[_i];\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n        }\n        return PersistencePromise.resolve(batch);\n    };\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\n    };\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n        var size = this.mutationQueue.length;\n        // All batches with batchId <= this.highestAcknowledgedBatchId have been\n        // acknowledged so the first unacknowledged batch after batchID will have a\n        // batchID larger than both of these values.\n        batchId = Math.max(batchId + 1, this.highestAcknowledgedBatchId);\n        // The requested batchId may still be out of range so normalize it to the\n        // start of the queue.\n        var rawIndex = this.indexOfBatchId(batchId);\n        var index = rawIndex < 0 ? 0 : rawIndex;\n        // Finally return the first non-tombstone batch.\n        for (; index < size; index++) {\n            var batch = this.mutationQueue[index];\n            if (!batch.isTombstone()) {\n                return PersistencePromise.resolve(batch);\n            }\n        }\n        return PersistencePromise.resolve(null);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(this.mutationQueue.length));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesThroughBatchId = function (transaction, batchId) {\n        var count = this.mutationQueue.length;\n        var endIndex = this.indexOfBatchId(batchId);\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        else if (endIndex >= count) {\n            endIndex = count;\n        }\n        else {\n            // The endIndex is in the queue so increment to pull everything in the\n            // queue including it.\n            endIndex++;\n        }\n        return PersistencePromise.resolve(this.getAllLiveMutationBatchesBeforeIndex(endIndex));\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n        var _this = this;\n        var start = new DocReference(documentKey, 0);\n        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n        var result = [];\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n            assert(documentKey.equals(ref.key), \"Should only iterate over a single key's batches\");\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\n            assert(batch !== null, 'Batches in the index must exist in the main table');\n            result.push(batch);\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n        var _this = this;\n        // Use the query path as a prefix for testing if a document matches the\n        // query.\n        var prefix = query.path;\n        var immediateChildrenPathLength = prefix.length + 1;\n        // Construct a document reference for actually scanning the index. Unlike\n        // the prefix the document key in this reference must have an even number of\n        // segments. The empty segment can be used a suffix of the query path\n        // because it precedes all other segments in an ordered traversal.\n        var startPath = prefix;\n        if (!DocumentKey.isDocumentKey(startPath)) {\n            startPath = startPath.child('');\n        }\n        var start = new DocReference(new DocumentKey(startPath), 0);\n        // Find unique batchIDs referenced by all documents potentially matching the\n        // query.\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\n            var rowKeyPath = ref.key.path;\n            if (!prefix.isPrefixOf(rowKeyPath)) {\n                return false;\n            }\n            else {\n                // Rows with document keys more than one segment longer than the query\n                // path can't be matches. For example, a query on 'rooms' can't match\n                // the document /rooms/abc/messages/xyx.\n                // TODO(mcg): we'll need a different scanner when we implement\n                // ancestor queries.\n                if (rowKeyPath.length === immediateChildrenPathLength) {\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n                }\n                return true;\n            }\n        }, start);\n        // Construct an array of matching batches, sorted by batchID to ensure that\n        // multiple mutations affecting the same document key are applied in order.\n        var result = [];\n        uniqueBatchIDs.forEach(function (batchId) {\n            var batch = _this.findMutationBatch(batchId);\n            if (batch !== null) {\n                result.push(batch);\n            }\n        });\n        return PersistencePromise.resolve(result);\n    };\n    MemoryMutationQueue.prototype.removeMutationBatches = function (transaction, batches) {\n        var batchCount = batches.length;\n        assert(batchCount > 0, 'Should not remove mutations when none exist.');\n        var firstBatchId = batches[0].batchId;\n        var queueCount = this.mutationQueue.length;\n        // Find the position of the first batch for removal. This need not be the\n        // first entry in the queue.\n        var startIndex = this.indexOfExistingBatchId(firstBatchId, 'removed');\n        assert(this.mutationQueue[startIndex].batchId === firstBatchId, 'Removed batches must exist in the queue');\n        // Check that removed batches are contiguous (while excluding tombstones).\n        var batchIndex = 1;\n        var queueIndex = startIndex + 1;\n        while (batchIndex < batchCount && queueIndex < queueCount) {\n            var batch = this.mutationQueue[queueIndex];\n            if (batch.isTombstone()) {\n                queueIndex++;\n                continue;\n            }\n            assert(batch.batchId === batches[batchIndex].batchId, 'Removed batches must be contiguous in the queue');\n            batchIndex++;\n            queueIndex++;\n        }\n        // Only actually remove batches if removing at the front of the queue.\n        // Previously rejected batches may have left tombstones in the queue, so\n        // expand the removal range to include any tombstones.\n        if (startIndex === 0) {\n            for (; queueIndex < queueCount; queueIndex++) {\n                var batch = this.mutationQueue[queueIndex];\n                if (!batch.isTombstone()) {\n                    break;\n                }\n            }\n            var length_1 = queueIndex - startIndex;\n            this.mutationQueue.splice(startIndex, length_1);\n        }\n        else {\n            // Mark the tombstones\n            for (var i = startIndex; i < queueIndex; i++) {\n                this.mutationQueue[i] = this.mutationQueue[i].toTombstone();\n            }\n        }\n        var references = this.batchesByDocumentKey;\n        for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n            var batch = batches_1[_i];\n            var batchId = batch.batchId;\n            for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {\n                var mutation = _b[_a];\n                var key = mutation.key;\n                if (this.garbageCollector !== null) {\n                    this.garbageCollector.addPotentialGarbageKey(key);\n                }\n                var ref = new DocReference(key, batchId);\n                references = references.delete(ref);\n            }\n        }\n        this.batchesByDocumentKey = references;\n        return PersistencePromise.resolve();\n    };\n    MemoryMutationQueue.prototype.setGarbageCollector = function (garbageCollector) {\n        this.garbageCollector = garbageCollector;\n    };\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n        var ref = new DocReference(key, 0);\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n        return PersistencePromise.resolve(key.equals(firstRef && firstRef.key));\n    };\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n        if (this.mutationQueue.length === 0) {\n            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');\n        }\n        return PersistencePromise.resolve();\n    };\n    /**\n     * A private helper that collects all the mutations batches in the queue up to\n     * but not including the given endIndex. All tombstones in the queue are\n     * excluded.\n     */\n    MemoryMutationQueue.prototype.getAllLiveMutationBatchesBeforeIndex = function (endIndex) {\n        var result = [];\n        for (var i = 0; i < endIndex; i++) {\n            var batch = this.mutationQueue[i];\n            if (!batch.isTombstone()) {\n                result.push(batch);\n            }\n        }\n        return result;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue and asserts that\n     * the resulting index is within the bounds of the queue.\n     *\n     * @param batchId The batchId to search for\n     * @param action A description of what the caller is doing, phrased in passive\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n     */\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n        var index = this.indexOfBatchId(batchId);\n        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);\n        return index;\n    };\n    /**\n     * Finds the index of the given batchId in the mutation queue. This operation\n     * is O(1).\n     *\n     * @return The computed index of the batch with the given batchId, based on\n     * the state of the queue. Note this index can be negative if the requested\n     * batchId has already been remvoed from the queue or past the end of the\n     * queue if the batchId is larger than the last added batch.\n     */\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n        if (this.mutationQueue.length === 0) {\n            // As an index this is past the end of the queue\n            return 0;\n        }\n        // Examine the front of the queue to figure out the difference between the\n        // batchId and indexes in the array. Note that since the queue is ordered\n        // by batchId, if the first batch has a larger batchId then the requested\n        // batchId doesn't exist in the queue.\n        var firstBatchId = this.mutationQueue[0].batchId;\n        return batchId - firstBatchId;\n    };\n    /**\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\n     * other functions that uses this code easier to read and more efficent.\n     */\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n        var index = this.indexOfBatchId(batchId);\n        if (index < 0 || index >= this.mutationQueue.length) {\n            return null;\n        }\n        var batch = this.mutationQueue[index];\n        assert(batch.batchId === batchId, 'If found batch must match');\n        return batch.isTombstone() ? null : batch;\n    };\n    return MemoryMutationQueue;\n}());\nexport { MemoryMutationQueue };\n\n//# sourceMappingURL=memory_mutation_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/memory_mutation_queue.js\n// module id = 139\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ObjectMap } from '../util/obj_map';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nvar MemoryQueryCache = /** @class */ (function () {\n    function MemoryQueryCache() {\n        /**\n         * Maps a query to the data about that query\n         */\n        this.queries = new ObjectMap(function (q) { return q.canonicalId(); });\n        /** The last received snapshot version. */\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\n        /** The highest numbered target ID encountered. */\n        this.highestTargetId = 0;\n        /**\n         * A ordered bidirectional mapping between documents and the remote target\n         * IDs.\n         */\n        this.references = new ReferenceSet();\n    }\n    MemoryQueryCache.prototype.start = function (transaction) {\n        // Nothing to do.\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\n        return this.lastRemoteSnapshotVersion;\n    };\n    MemoryQueryCache.prototype.getHighestTargetId = function () {\n        return this.highestTargetId;\n    };\n    MemoryQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\n        this.lastRemoteSnapshotVersion = snapshotVersion;\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {\n        this.queries.set(queryData.query, queryData);\n        var targetId = queryData.targetId;\n        if (targetId > this.highestTargetId) {\n            this.highestTargetId = targetId;\n        }\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {\n        this.queries.delete(queryData.query);\n        this.references.removeReferencesForId(queryData.targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {\n        var queryData = this.queries.get(query) || null;\n        return PersistencePromise.resolve(queryData);\n    };\n    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n        this.references.addReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n        this.references.removeReferences(keys, targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n        this.references.removeReferencesForId(targetId);\n        return PersistencePromise.resolve();\n    };\n    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n        var matchingKeys = this.references.referencesForId(targetId);\n        return PersistencePromise.resolve(matchingKeys);\n    };\n    MemoryQueryCache.prototype.setGarbageCollector = function (gc) {\n        this.references.setGarbageCollector(gc);\n    };\n    MemoryQueryCache.prototype.containsKey = function (txn, key) {\n        return this.references.containsKey(txn, key);\n    };\n    return MemoryQueryCache;\n}());\nexport { MemoryQueryCache };\n\n//# sourceMappingURL=memory_query_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/memory_query_cache.js\n// module id = 140\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap, maybeDocumentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { PersistencePromise } from './persistence_promise';\nvar MemoryRemoteDocumentCache = /** @class */ (function () {\n    function MemoryRemoteDocumentCache() {\n        this.docs = maybeDocumentMap();\n    }\n    MemoryRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        this.docs = this.docs.insert(maybeDocument.key, maybeDocument);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        this.docs = this.docs.remove(documentKey);\n        return PersistencePromise.resolve();\n    };\n    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        return PersistencePromise.resolve(this.docs.get(documentKey));\n    };\n    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var prefix = new DocumentKey(query.path.child(''));\n        var iterator = this.docs.getIteratorFrom(prefix);\n        while (iterator.hasNext()) {\n            var _a = iterator.getNext(), key = _a.key, maybeDoc = _a.value;\n            if (!query.path.isPrefixOf(key.path)) {\n                break;\n            }\n            if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        }\n        return PersistencePromise.resolve(results);\n    };\n    return MemoryRemoteDocumentCache;\n}());\nexport { MemoryRemoteDocumentCache };\n\n//# sourceMappingURL=memory_remote_document_cache.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/memory_remote_document_cache.js\n// module id = 141\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\nexport { NoOpGarbageCollector };\n\n//# sourceMappingURL=no_op_garbage_collector.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/local/no_op_garbage_collector.js\n// module id = 142\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { maybeDocumentMap } from '../model/collections';\nimport { assert } from '../util/assert';\nimport { PersistentListenStream, PersistentWriteStream } from './persistent_stream';\n/**\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\n * which provides an interface that is more convenient for the rest of the\n * client SDK architecture to consume.\n */\nvar Datastore = /** @class */ (function () {\n    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        this.databaseInfo = databaseInfo;\n        this.queue = queue;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.serializer = serializer;\n        this.initialBackoffDelay = initialBackoffDelay;\n    }\n    Datastore.prototype.newPersistentWriteStream = function () {\n        return new PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.newPersistentWatchStream = function () {\n        return new PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);\n    };\n    Datastore.prototype.commit = function (mutations) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\n        };\n        return this.invokeRPC('Commit', params).then(function (response) {\n            return _this.serializer.fromWriteResults(response.writeResults);\n        });\n    };\n    Datastore.prototype.lookup = function (keys) {\n        var _this = this;\n        var params = {\n            database: this.serializer.encodedDatabaseId,\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\n        };\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\n            var docs = maybeDocumentMap();\n            response.forEach(function (proto) {\n                var doc = _this.serializer.fromMaybeDocument(proto);\n                docs = docs.insert(doc.key, doc);\n            });\n            var result = [];\n            keys.forEach(function (key) {\n                var doc = docs.get(key);\n                assert(!!doc, 'Missing entity in write response for ' + key);\n                result.push(doc);\n            });\n            return result;\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC. */\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeRPC(rpcName, request, token);\n        });\n    };\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\n        var _this = this;\n        // TODO(mikelehen): Retry (with backoff) on token failures?\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\n        });\n    };\n    return Datastore;\n}());\nexport { Datastore };\n\n//# sourceMappingURL=datastore.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/datastore.js\n// module id = 143\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport * as log from '../util/log';\nimport { ExponentialBackoff } from './backoff';\nimport { isNullOrUndefined } from '../util/types';\nvar LOG_TAG = 'PersistentStream';\nvar PersistentStreamState;\n(function (PersistentStreamState) {\n    /**\n     * The streaming RPC is not running and there's no error condition.\n     * Calling `start` will start the stream immediately without backoff.\n     * While in this state isStarted will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Initial\"] = 0] = \"Initial\";\n    /**\n     * The stream is starting, and is waiting for an auth token to attach to\n     * the initial request. While in this state, isStarted will return\n     * true but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Auth\"] = 1] = \"Auth\";\n    /**\n     * The streaming RPC is up and running. Requests and responses can flow\n     * freely. Both isStarted and isOpen will return true.\n     */\n    PersistentStreamState[PersistentStreamState[\"Open\"] = 2] = \"Open\";\n    /**\n     * The stream encountered an error. The next start attempt will back off.\n     * While in this state isStarted() will return false.\n     *\n     */\n    PersistentStreamState[PersistentStreamState[\"Error\"] = 3] = \"Error\";\n    /**\n     * An in-between state after an error where the stream is waiting before\n     * re-starting. After\n     * waiting is complete, the stream will try to open. While in this\n     * state isStarted() will return YES but isOpen will return false.\n     */\n    PersistentStreamState[PersistentStreamState[\"Backoff\"] = 4] = \"Backoff\";\n    /**\n     * The stream has been explicitly stopped; no further events will be emitted.\n     */\n    PersistentStreamState[PersistentStreamState[\"Stopped\"] = 5] = \"Stopped\";\n})(PersistentStreamState || (PersistentStreamState = {}));\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nvar BACKOFF_INITIAL_DELAY_MS = 1000;\n/** Maximum backoff time in milliseconds */\nvar BACKOFF_MAX_DELAY_MS = 60 * 1000;\nvar BACKOFF_FACTOR = 1.5;\n/** The time a stream stays open after it is marked idle. */\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be `start`ed before messages can\n * be sent and received. The PersistentStream will call the onOpen function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a `start` fail, PersistentStream will call the registered\n * onClose with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nvar PersistentStream = /** @class */ (function () {\n    function PersistentStream(queue, connection, credentialsProvider, \n        // Used for faster retries in testing\n        initialBackoffDelay) {\n        this.queue = queue;\n        this.connection = connection;\n        this.credentialsProvider = credentialsProvider;\n        this.idle = false;\n        this.stream = null;\n        this.listener = null;\n        this.backoff = new ExponentialBackoff(initialBackoffDelay ? initialBackoffDelay : BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);\n        this.state = PersistentStreamState.Initial;\n    }\n    /**\n     * Returns true if `start` has been called and no error has occurred. True\n     * indicates the stream is open or in the process of opening (which\n     * encompasses respecting backoff, getting auth tokens, and starting the\n     * actual RPC). Use `isOpen` to determine if the stream is open and ready for\n     * outbound requests.\n     */\n    PersistentStream.prototype.isStarted = function () {\n        return (this.state === PersistentStreamState.Backoff ||\n            this.state === PersistentStreamState.Auth ||\n            this.state === PersistentStreamState.Open);\n    };\n    /**\n     * Returns true if the underlying RPC is open (the openHandler has been\n     * called) and the stream is ready for outbound requests.\n     */\n    PersistentStream.prototype.isOpen = function () {\n        return this.state === PersistentStreamState.Open;\n    };\n    /**\n     * Starts the RPC. Only allowed if isStarted returns false. The stream is\n     * not immediately ready for use: onOpen will be invoked when the RPC is ready\n     * for outbound requests, at which point isOpen will return true.\n     *\n     *  When start returns, isStarted will return true.\n     */\n    PersistentStream.prototype.start = function (listener) {\n        if (this.state === PersistentStreamState.Error) {\n            this.performBackoff(listener);\n            return;\n        }\n        assert(this.state === PersistentStreamState.Initial, 'Already started');\n        this.listener = listener;\n        this.auth();\n    };\n    /**\n     * Stops the RPC. This call is idempotent and allowed regardless of the\n     * current isStarted state.\n     *\n     * When stop returns, isStarted and isOpen will both return false.\n     */\n    PersistentStream.prototype.stop = function () {\n        if (this.isStarted()) {\n            this.close(PersistentStreamState.Stopped);\n        }\n    };\n    /**\n     * After an error the stream will usually back off on the next attempt to\n     * start it. If the error warrants an immediate restart of the stream, the\n     * sender can use this to indicate that the receiver should not back off.\n     *\n     * Each error will call the onClose function. That function can decide to\n     * inhibit backoff if required.\n     */\n    PersistentStream.prototype.inhibitBackoff = function () {\n        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');\n        this.state = PersistentStreamState.Initial;\n        this.backoff.reset();\n    };\n    /**\n     * Initializes the idle timer. If no write takes place within one minute, the\n     * WebChannel stream will be closed.\n     */\n    PersistentStream.prototype.markIdle = function () {\n        var _this = this;\n        this.idle = true;\n        this.queue\n            .schedule(function () {\n            return _this.handleIdleCloseTimer();\n        }, IDLE_TIMEOUT_MS)\n            .catch(function (err) {\n            // When the AsyncQueue gets drained during testing, pending Promises\n            // (including these idle checks) will get rejected. We special-case\n            // these cancelled idle checks to make sure that these specific Promise\n            // rejections are not considered unhandled.\n            assert(err.code === Code.CANCELLED, \"Received unexpected error in idle timeout closure. Expected CANCELLED, but was: \" + err);\n        });\n    };\n    /** Sends a message to the underlying stream. */\n    PersistentStream.prototype.sendRequest = function (msg) {\n        this.cancelIdleCheck();\n        this.stream.send(msg);\n    };\n    /** Called by the idle timer when the stream should close due to inactivity. */\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\n        if (this.isOpen() && this.idle) {\n            // When timing out an idle stream there's no reason to force the stream into backoff when\n            // it restarts so set the stream state to Initial instead of Error.\n            return this.close(PersistentStreamState.Initial);\n        }\n        return Promise.resolve();\n    };\n    /** Marks the stream as active again. */\n    PersistentStream.prototype.cancelIdleCheck = function () {\n        this.idle = false;\n    };\n    /**\n     * Closes the stream and cleans up as necessary:\n     *\n     * * closes the underlying GRPC stream;\n     * * calls the onClose handler with the given 'error';\n     * * sets internal stream state to 'finalState';\n     * * adjusts the backoff timer based on the error\n     *\n     * A new stream can be opened by calling `start` unless `finalState` is set to\n     * `PersistentStreamState.Stopped`.\n     *\n     * @param finalState the intended state of the stream after closing.\n     * @param error the error the connection was closed with.\n     */\n    PersistentStream.prototype.close = function (finalState, error) {\n        assert(finalState == PersistentStreamState.Error || isNullOrUndefined(error), \"Can't provide an error when not in an error state.\");\n        this.cancelIdleCheck();\n        if (finalState != PersistentStreamState.Error) {\n            // If this is an intentional close ensure we don't delay our next connection attempt.\n            this.backoff.reset();\n        }\n        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n            log.error(error.toString());\n            log.error('Using maximum backoff delay to prevent overloading the backend.');\n            this.backoff.resetToMax();\n        }\n        // Clean up the underlying stream because we are no longer interested in events.\n        if (this.stream !== null) {\n            this.tearDown();\n            this.stream.close();\n            this.stream = null;\n        }\n        // This state must be assigned before calling onClose() to allow the callback to\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\n        this.state = finalState;\n        var listener = this.listener;\n        // Clear the listener to avoid bleeding of events from the underlying streams.\n        this.listener = null;\n        // If the caller explicitly requested a stream stop, don't notify them of a closing stream (it\n        // could trigger undesirable recovery logic, etc.).\n        if (finalState != PersistentStreamState.Stopped) {\n            return listener.onClose(error);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Can be overridden to perform additional cleanup before the stream is closed.\n     * Calling super.tearDown() is not required.\n     */\n    PersistentStream.prototype.tearDown = function () { };\n    PersistentStream.prototype.auth = function () {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');\n        this.state = PersistentStreamState.Auth;\n        this.credentialsProvider.getToken(/*forceRefresh=*/ false).then(function (token) {\n            // Normally we'd have to schedule the callback on the AsyncQueue.\n            // However, the following calls are safe to be called outside the\n            // AsyncQueue since they don't chain asynchronous calls\n            _this.startStream(token);\n        }, function (error) {\n            _this.queue.schedule(function () {\n                if (_this.state !== PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for authorization.\n                    var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n                    return _this.handleStreamClose(rpcError);\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        });\n    };\n    PersistentStream.prototype.startStream = function (token) {\n        var _this = this;\n        if (this.state === PersistentStreamState.Stopped) {\n            // Stream can be stopped while waiting for authorization.\n            return;\n        }\n        assert(this.state === PersistentStreamState.Auth, 'Trying to start stream in a non-auth state');\n        // Helper function to dispatch to AsyncQueue and make sure that any\n        // close will seem instantaneous and events are prevented from being\n        // raised after the close call\n        var dispatchIfStillActive = function (stream, fn) {\n            _this.queue.schedule(function () {\n                // Only raise events if the stream instance has not changed\n                if (_this.stream === stream) {\n                    return fn();\n                }\n                else {\n                    return Promise.resolve();\n                }\n            });\n        };\n        // Only start stream if listener has not changed\n        if (this.listener !== null) {\n            var currentStream_1 = this.startRpc(token);\n            this.stream = currentStream_1;\n            this.stream.onOpen(function () {\n                dispatchIfStillActive(currentStream_1, function () {\n                    assert(_this.state === PersistentStreamState.Auth, 'Expected stream to be in state auth, but was ' + _this.state);\n                    _this.state = PersistentStreamState.Open;\n                    return _this.listener.onOpen();\n                });\n            });\n            this.stream.onClose(function (error) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.handleStreamClose(error);\n                });\n            });\n            this.stream.onMessage(function (msg) {\n                dispatchIfStillActive(currentStream_1, function () {\n                    return _this.onMessage(msg);\n                });\n            });\n        }\n    };\n    PersistentStream.prototype.performBackoff = function (listener) {\n        var _this = this;\n        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff in an error case');\n        this.state = PersistentStreamState.Backoff;\n        this.backoff.backoffAndWait().then(function () {\n            // Backoff does not run on the AsyncQueue, so we need to reschedule to\n            // make sure the queue blocks\n            _this.queue.schedule(function () {\n                if (_this.state === PersistentStreamState.Stopped) {\n                    // Stream can be stopped while waiting for backoff to complete.\n                    return Promise.resolve();\n                }\n                _this.state = PersistentStreamState.Initial;\n                _this.start(listener);\n                assert(_this.isStarted(), 'PersistentStream should have started');\n                return Promise.resolve();\n            });\n        });\n    };\n    PersistentStream.prototype.handleStreamClose = function (error) {\n        assert(this.isStarted(), \"Can't handle server close on non-started stream\");\n        log.debug(LOG_TAG, \"close with error: \" + error);\n        this.stream = null;\n        // In theory the stream could close cleanly, however, in our current model\n        // we never expect this to happen because if we stop a stream ourselves,\n        // this callback will never be called. To prevent cases where we retry\n        // without a backoff accidentally, we set the stream to error in all cases.\n        return this.close(PersistentStreamState.Error, error);\n    };\n    return PersistentStream;\n}());\nexport { PersistentStream };\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the openHandler, any number of listen and\n * unlisten calls calls can be sent to control what changes will be sent from\n * the server for ListenResponses.\n */\nvar PersistentListenStream = /** @class */ (function (_super) {\n    __extends(PersistentListenStream, _super);\n    function PersistentListenStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        return _this;\n    }\n    PersistentListenStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Listen', token);\n    };\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n        // A successful response means the stream is healthy\n        this.backoff.reset();\n        var watchChange = this.serializer.fromWatchChange(watchChangeProto);\n        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);\n        return this.listener.onWatchChange(watchChange, snapshot);\n    };\n    /**\n     * Registers interest in the results of the given query. If the query\n     * includes a resumeToken it will be included in the request. Results that\n     * affect the query will be streamed back as WatchChange messages that\n     * reference the targetId.\n     */\n    PersistentListenStream.prototype.watch = function (queryData) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.addTarget = this.serializer.toTarget(queryData);\n        var labels = this.serializer.toListenRequestLabels(queryData);\n        if (labels) {\n            request.labels = labels;\n        }\n        this.sendRequest(request);\n    };\n    /**\n     * Unregisters interest in the results of the query associated with the\n     * given targetId.\n     */\n    PersistentListenStream.prototype.unwatch = function (targetId) {\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        request.removeTarget = targetId;\n        this.sendRequest(request);\n    };\n    return PersistentListenStream;\n}(PersistentStream));\nexport { PersistentListenStream };\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nvar PersistentWriteStream = /** @class */ (function (_super) {\n    __extends(PersistentWriteStream, _super);\n    function PersistentWriteStream(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) {\n        var _this = _super.call(this, queue, connection, credentials, initialBackoffDelay) || this;\n        _this.databaseInfo = databaseInfo;\n        _this.serializer = serializer;\n        _this.handshakeComplete_ = false;\n        return _this;\n    }\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n        /**\n         * Tracks whether or not a handshake has been successfully exchanged and\n         * the stream is ready to accept mutations.\n         */\n        get: function () {\n            return this.handshakeComplete_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Override of PersistentStream.start\n    PersistentWriteStream.prototype.start = function (listener) {\n        this.handshakeComplete_ = false;\n        _super.prototype.start.call(this, listener);\n    };\n    PersistentWriteStream.prototype.tearDown = function () {\n        if (this.handshakeComplete_) {\n            this.writeMutations([]);\n        }\n    };\n    PersistentWriteStream.prototype.startRpc = function (token) {\n        return this.connection.openStream('Write', token);\n    };\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\n        // Always capture the last stream token.\n        assert(!!responseProto.streamToken, 'Got a write response without a stream token');\n        this.lastStreamToken = responseProto.streamToken;\n        if (!this.handshakeComplete_) {\n            // The first response is always the handshake response\n            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');\n            this.handshakeComplete_ = true;\n            return this.listener.onHandshakeComplete();\n        }\n        else {\n            // A successful first write response means the stream is healthy,\n            // Note, that we could consider a successful handshake healthy, however,\n            // the write itself might be causing an error we want to back off from.\n            this.backoff.reset();\n            var results = this.serializer.fromWriteResults(responseProto.writeResults);\n            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);\n            return this.listener.onMutationResult(commitVersion, results);\n        }\n    };\n    /**\n     * Sends an initial streamToken to the server, performing the handshake\n     * required to make the StreamingWrite RPC work. Subsequent\n     * calls should wait until onHandshakeComplete was called.\n     */\n    PersistentWriteStream.prototype.writeHandshake = function () {\n        assert(this.isOpen(), 'Writing handshake requires an opened stream');\n        assert(!this.handshakeComplete_, 'Handshake already completed');\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\n        // stream token on the handshake, ignoring any stream token we might have.\n        var request = {};\n        request.database = this.serializer.encodedDatabaseId;\n        this.sendRequest(request);\n    };\n    /** Sends a group of mutations to the Firestore backend to apply. */\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\n        var _this = this;\n        assert(this.isOpen(), 'Writing mutations requires an opened stream');\n        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');\n        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');\n        var request = {\n            // Protos are typed with string, but we support UInt8Array on Node\n            // tslint:disable-next-line:no-any\n            streamToken: this.lastStreamToken,\n            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })\n        };\n        this.sendRequest(request);\n    };\n    return PersistentWriteStream;\n}(PersistentStream));\nexport { PersistentWriteStream };\n\n//# sourceMappingURL=persistent_stream.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/persistent_stream.js\n// module id = 144\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as log from '../util/log';\nimport { Deferred } from '../util/promise';\nvar LOG_TAG = 'ExponentialBackoff';\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nvar ExponentialBackoff = /** @class */ (function () {\n    function ExponentialBackoff(\n        /**\n         * The initial delay (used as the base delay on the first retry attempt).\n         * Note that jitter will still be applied, so the actual delay could be as\n         * little as 0.5*initialDelayMs.\n         */\n        initialDelayMs, \n        /**\n         * The multiplier to use to determine the extended base delay after each\n         * attempt.\n         */\n        backoffFactor, \n        /**\n         * The maximum base delay after which no further backoff is performed.\n         * Note that jitter will still be applied, so the actual delay could be as\n         * much as 1.5*maxDelayMs.\n         */\n        maxDelayMs) {\n        this.initialDelayMs = initialDelayMs;\n        this.backoffFactor = backoffFactor;\n        this.maxDelayMs = maxDelayMs;\n        this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */\n    ExponentialBackoff.prototype.reset = function () {\n        this.currentBaseMs = 0;\n    };\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n    ExponentialBackoff.prototype.resetToMax = function () {\n        this.currentBaseMs = this.maxDelayMs;\n    };\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     */\n    ExponentialBackoff.prototype.backoffAndWait = function () {\n        var def = new Deferred();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        var delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            log.debug(LOG_TAG, \"Backing off for \" + delayWithJitterMs + \" ms \" +\n                (\"(base delay: \" + this.currentBaseMs + \" ms)\"));\n        }\n        setTimeout(function () {\n            def.resolve();\n        }, delayWithJitterMs);\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        if (this.currentBaseMs < this.initialDelayMs) {\n            this.currentBaseMs = this.initialDelayMs;\n        }\n        if (this.currentBaseMs > this.maxDelayMs) {\n            this.currentBaseMs = this.maxDelayMs;\n        }\n        return def.promise;\n    };\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\n        return (Math.random() - 0.5) * this.currentBaseMs;\n    };\n    return ExponentialBackoff;\n}());\nexport { ExponentialBackoff };\n\n//# sourceMappingURL=backoff.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/backoff.js\n// module id = 145\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState } from '../core/types';\nimport { QueryData, QueryPurpose } from '../local/query_data';\nimport { NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { emptyByteString } from '../platform/platform';\nimport { assert } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\nimport * as objUtils from '../util/obj';\nimport { ResetMapping, UpdateMapping } from './remote_event';\nimport { isPermanentError } from './rpc_error';\nimport { WatchChangeAggregator, WatchTargetChange, WatchTargetChangeState } from './watch_change';\nvar LOG_TAG = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nvar MAX_PENDING_WRITES = 10;\n// The RemoteStore notifies an onlineStateHandler with OnlineState.Failed if we\n// fail to connect to the backend. This subsequently triggers get() requests to\n// fail or use cached data, etc. Unfortunately, our connections have\n// historically been subject to various transient failures. So we wait for\n// multiple failures before notifying the onlineStateHandler.\nvar ONLINE_ATTEMPTS_BEFORE_FAILURE = 2;\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nvar RemoteStore = /** @class */ (function () {\n    function RemoteStore(\n        /**\n         * The local store, used to fill the write pipeline with outbound\n         * mutations and resolve existence filter mismatches.\n         */\n        localStore, \n        /** The client-side proxy for interacting with the backend. */\n        datastore, onlineStateHandler) {\n        this.localStore = localStore;\n        this.datastore = datastore;\n        this.onlineStateHandler = onlineStateHandler;\n        this.pendingWrites = [];\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        /**\n         * A mapping of watched targets that the client cares about tracking and the\n         * user has explicitly called a 'listen' for this target.\n         *\n         * These targets may or may not have been sent to or acknowledged by the\n         * server. On re-establishing the listen stream, these targets should be sent\n         * to the server. The targets removed with unlistens are removed eagerly\n         * without waiting for confirmation from the listen stream.\n         */\n        this.listenTargets = {};\n        /**\n         * A mapping of targetId to pending acks needed.\n         *\n         * If a targetId is present in this map, then we're waiting for watch to\n         * acknowledge a removal or addition of the target. If a target is not in this\n         * mapping, and it's in the listenTargets map, then we consider the target to\n         * be active.\n         *\n         * We increment the count here every time we issue a request over the stream\n         * to watch or unwatch. We then decrement the count every time we get a target\n         * added or target removed message from the server. Once the count is equal to\n         * 0 we know that the client and server are in the same state (once this state\n         * is reached the targetId is removed from the map to free the memory).\n         */\n        this.pendingTargetResponses = {};\n        this.accumulatedWatchChanges = [];\n        this.watchStream = null;\n        this.writeStream = null;\n        /**\n         * The online state of the watch stream. The state is set to healthy if and\n         * only if there are messages received by the backend.\n         */\n        this.watchStreamOnlineState = OnlineState.Unknown;\n        /** A count of consecutive failures to open the stream. */\n        this.watchStreamFailures = 0;\n        /** Whether the client should fire offline warning. */\n        this.shouldWarnOffline = true;\n    }\n    /**\n     * Starts up the remote store, creating streams, restoring state from\n     * LocalStore, etc.\n     */\n    RemoteStore.prototype.start = function () {\n        return this.enableNetwork();\n    };\n    RemoteStore.prototype.setOnlineStateToHealthy = function () {\n        this.shouldWarnOffline = false;\n        this.updateAndBroadcastOnlineState(OnlineState.Healthy);\n    };\n    RemoteStore.prototype.setOnlineStateToUnknown = function () {\n        // The state is set to unknown when a healthy stream is closed (e.g. due to\n        // a token timeout) or when we have no active listens and therefore there's\n        // no need to start the stream. Assuming there is (possibly in the future)\n        // an active listen, then we will eventually move to state Online or Failed,\n        // but we always want to make at least ONLINE_ATTEMPTS_BEFORE_FAILURE\n        // attempts before failing, so we reset the count here.\n        this.watchStreamFailures = 0;\n        this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n    };\n    RemoteStore.prototype.updateOnlineStateAfterFailure = function () {\n        // The first failure after we are successfully connected moves us to the\n        // 'Unknown' state. We then may make multiple attempts (based on\n        // ONLINE_ATTEMPTS_BEFORE_FAILURE) before we actually report failure.\n        if (this.watchStreamOnlineState === OnlineState.Healthy) {\n            this.setOnlineStateToUnknown();\n        }\n        else {\n            this.watchStreamFailures++;\n            if (this.watchStreamFailures >= ONLINE_ATTEMPTS_BEFORE_FAILURE) {\n                if (this.shouldWarnOffline) {\n                    log.error('Could not reach Firestore backend.');\n                    this.shouldWarnOffline = false;\n                }\n                this.updateAndBroadcastOnlineState(OnlineState.Failed);\n            }\n        }\n    };\n    RemoteStore.prototype.updateAndBroadcastOnlineState = function (onlineState) {\n        var didChange = this.watchStreamOnlineState !== onlineState;\n        this.watchStreamOnlineState = onlineState;\n        if (didChange) {\n            this.onlineStateHandler(onlineState);\n        }\n    };\n    RemoteStore.prototype.isNetworkEnabled = function () {\n        assert((this.watchStream == null) == (this.writeStream == null), 'WatchStream and WriteStream should both be null or non-null');\n        return this.watchStream != null;\n    };\n    /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */\n    RemoteStore.prototype.enableNetwork = function () {\n        var _this = this;\n        assert(this.watchStream == null, 'enableNetwork() called with non-null watchStream.');\n        assert(this.writeStream == null, 'enableNetwork() called with non-null writeStream.');\n        // Create new streams (but note they're not started yet).\n        this.watchStream = this.datastore.newPersistentWatchStream();\n        this.writeStream = this.datastore.newPersistentWriteStream();\n        // Load any saved stream token from persistent storage\n        return this.localStore.getLastStreamToken().then(function (token) {\n            _this.writeStream.lastStreamToken = token;\n            if (_this.shouldStartWatchStream()) {\n                _this.startWatchStream();\n            }\n            _this.updateAndBroadcastOnlineState(OnlineState.Unknown);\n            return _this.fillWritePipeline(); // This may start the writeStream.\n        });\n    };\n    /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */\n    RemoteStore.prototype.disableNetwork = function () {\n        this.updateAndBroadcastOnlineState(OnlineState.Failed);\n        // NOTE: We're guaranteed not to get any further events from these streams (not even a close\n        // event).\n        this.watchStream.stop();\n        this.writeStream.stop();\n        this.cleanUpWatchStreamState();\n        this.cleanUpWriteStreamState();\n        this.writeStream = null;\n        this.watchStream = null;\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.shutdown = function () {\n        log.debug(LOG_TAG, 'RemoteStore shutting down.');\n        this.disableNetwork();\n        return Promise.resolve(undefined);\n    };\n    /** Starts new listen for the given query. Uses resume token if provided */\n    RemoteStore.prototype.listen = function (queryData) {\n        assert(!objUtils.contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');\n        // Mark this as something the client is currently listening for.\n        this.listenTargets[queryData.targetId] = queryData;\n        if (this.shouldStartWatchStream()) {\n            // The listen will be sent in onWatchStreamOpen\n            this.startWatchStream();\n        }\n        else if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendWatchRequest(queryData);\n        }\n    };\n    /** Removes the listen from server */\n    RemoteStore.prototype.unlisten = function (targetId) {\n        assert(objUtils.contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');\n        var queryData = this.listenTargets[targetId];\n        delete this.listenTargets[targetId];\n        if (this.isNetworkEnabled() && this.watchStream.isOpen()) {\n            this.sendUnwatchRequest(targetId);\n            if (objUtils.isEmpty(this.listenTargets)) {\n                this.watchStream.markIdle();\n            }\n        }\n    };\n    /**\n     * We need to increment the the expected number of pending responses we're due\n     * from watch so we wait for the ack to process any messages from this target.\n     */\n    RemoteStore.prototype.sendWatchRequest = function (queryData) {\n        this.recordPendingTargetRequest(queryData.targetId);\n        this.watchStream.watch(queryData);\n    };\n    /**\n     * We need to increment the expected number of pending responses we're due\n     * from watch so we wait for the removal on the server before we process any\n     * messages from this target.\n     */\n    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {\n        this.recordPendingTargetRequest(targetId);\n        this.watchStream.unwatch(targetId);\n    };\n    /**\n     * Increment the mapping of how many acks are needed from watch before we can\n     * consider the server to be 'in-sync' with the client's active targets.\n     */\n    RemoteStore.prototype.recordPendingTargetRequest = function (targetId) {\n        // For each request we get we need to record we need a response for it.\n        this.pendingTargetResponses[targetId] =\n            (this.pendingTargetResponses[targetId] || 0) + 1;\n    };\n    RemoteStore.prototype.startWatchStream = function () {\n        assert(this.shouldStartWatchStream(), 'startWriteStream() called when shouldStartWatchStream() is false.');\n        this.watchStream.start({\n            onOpen: this.onWatchStreamOpen.bind(this),\n            onClose: this.onWatchStreamClose.bind(this),\n            onWatchChange: this.onWatchStreamChange.bind(this)\n        });\n    };\n    /**\n     * Returns whether the watch stream should be started because there are\n     * active targets trying to be listened too\n     */\n    RemoteStore.prototype.shouldStartWatchStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.watchStream.isStarted() &&\n            !objUtils.isEmpty(this.listenTargets));\n    };\n    RemoteStore.prototype.cleanUpWatchStreamState = function () {\n        // If the connection is closed then we'll never get a snapshot version for\n        // the accumulated changes and so we'll never be able to complete the batch.\n        // When we start up again the server is going to resend these changes\n        // anyway, so just toss the accumulated state.\n        this.accumulatedWatchChanges = [];\n        this.pendingTargetResponses = {};\n    };\n    RemoteStore.prototype.onWatchStreamOpen = function () {\n        var _this = this;\n        // TODO(b/35852690): close the stream again (with some timeout?) if no watch\n        // targets are active\n        objUtils.forEachNumber(this.listenTargets, function (targetId, queryData) {\n            _this.sendWatchRequest(queryData);\n        });\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamClose = function (error) {\n        assert(this.isNetworkEnabled(), 'onWatchStreamClose() should only be called when the network is enabled');\n        this.cleanUpWatchStreamState();\n        // If there was an error, retry the connection.\n        if (this.shouldStartWatchStream()) {\n            this.updateOnlineStateAfterFailure();\n            this.startWatchStream();\n        }\n        else {\n            // No need to restart watch stream because there are no active targets.\n            // The online state is set to unknown because there is no active attempt\n            // at establishing a connection\n            this.setOnlineStateToUnknown();\n        }\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {\n        // Mark the connection as healthy because we got a message from the server\n        this.setOnlineStateToHealthy();\n        if (watchChange instanceof WatchTargetChange &&\n            watchChange.state === WatchTargetChangeState.Removed &&\n            watchChange.cause) {\n            // There was an error on a target, don't wait for a consistent snapshot\n            // to raise events\n            return this.handleTargetError(watchChange);\n        }\n        // Accumulate watch changes but don't process them if there's no\n        // snapshotVersion or it's older than a previous snapshot we've processed\n        // (can happen after we resume a target using a resume token).\n        this.accumulatedWatchChanges.push(watchChange);\n        if (!snapshotVersion.equals(SnapshotVersion.MIN) &&\n            snapshotVersion.compareTo(this.localStore.getLastRemoteSnapshotVersion()) >= 0) {\n            var changes = this.accumulatedWatchChanges;\n            this.accumulatedWatchChanges = [];\n            return this.handleWatchChangeBatch(snapshotVersion, changes);\n        }\n        else {\n            return Promise.resolve();\n        }\n    };\n    /**\n     * Takes a batch of changes from the Datastore, repackages them as a\n     * RemoteEvent, and passes that on to the listener, which is typically the\n     * SyncEngine.\n     */\n    RemoteStore.prototype.handleWatchChangeBatch = function (snapshotVersion, changes) {\n        var _this = this;\n        var aggregator = new WatchChangeAggregator(snapshotVersion, this.listenTargets, this.pendingTargetResponses);\n        aggregator.addChanges(changes);\n        var remoteEvent = aggregator.createRemoteEvent();\n        // Get the new response counts from the aggregator\n        this.pendingTargetResponses = aggregator.pendingTargetResponses;\n        var promises = [];\n        // Handle existence filters and existence filter mismatches.\n        objUtils.forEachNumber(aggregator.existenceFilters, function (targetId, filter) {\n            var queryData = _this.listenTargets[targetId];\n            if (!queryData) {\n                // A watched target might have been removed already.\n                return;\n            }\n            var query = queryData.query;\n            if (query.isDocumentQuery()) {\n                if (filter.count === 0) {\n                    // The existence filter told us the document does not exist.\n                    // We need to deduce that this document does not exist and apply\n                    // a deleted document to our updates. Without applying a deleted\n                    // document there might be another query that will raise this\n                    // document as part of a snapshot until it is resolved,\n                    // essentially exposing inconsistency between queries.\n                    var key = new DocumentKey(query.path);\n                    var deletedDoc = new NoDocument(key, snapshotVersion);\n                    remoteEvent.addDocumentUpdate(deletedDoc);\n                }\n                else {\n                    assert(filter.count === 1, 'Single document existence filter with count: ' + filter.count);\n                }\n            }\n            else {\n                // Not a document query.\n                var promise = _this.localStore\n                    .remoteDocumentKeys(targetId)\n                    .then(function (trackedRemote) {\n                    if (remoteEvent.targetChanges[targetId]) {\n                        var mapping = remoteEvent.targetChanges[targetId].mapping;\n                        if (mapping !== null) {\n                            if (mapping instanceof UpdateMapping) {\n                                trackedRemote = mapping.applyToKeySet(trackedRemote);\n                            }\n                            else {\n                                assert(mapping instanceof ResetMapping, 'Expected either reset or update mapping but got something else: ' +\n                                    mapping);\n                                trackedRemote = mapping.documents;\n                            }\n                        }\n                    }\n                    if (trackedRemote.size !== filter.count) {\n                        // Existence filter mismatch, resetting mapping.\n                        // Make sure the mismatch is exposed in the remote event.\n                        remoteEvent.handleExistenceFilterMismatch(targetId);\n                        // Clear the resume token for the query, since we're in a\n                        // known mismatch state.\n                        var newQueryData = new QueryData(query, targetId, queryData.purpose);\n                        _this.listenTargets[targetId] = newQueryData;\n                        // Cause a hard reset by unwatching and rewatching\n                        // immediately, but deliberately don't send a resume token\n                        // so that we get a full update.\n                        // Make sure we expect that this acks are going to happen.\n                        _this.sendUnwatchRequest(targetId);\n                        // Mark the query we send as being on behalf of an existence\n                        // filter mismatch, but don't actually retain that in\n                        // listenTargets. This ensures that we flag the first\n                        // re-listen this way without impacting future listens of\n                        // this target (that might happen e.g. on reconnect).\n                        var requestQueryData = new QueryData(query, targetId, QueryPurpose.ExistenceFilterMismatch);\n                        _this.sendWatchRequest(requestQueryData);\n                    }\n                });\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises).then(function () {\n            // Update in-memory resume tokens. LocalStore will update the\n            // persistent view of these when applying the completed RemoteEvent.\n            objUtils.forEachNumber(remoteEvent.targetChanges, function (targetId, change) {\n                if (change.resumeToken.length > 0) {\n                    var queryData = _this.listenTargets[targetId];\n                    // A watched target might have been removed already.\n                    if (queryData) {\n                        _this.listenTargets[targetId] = queryData.update({\n                            resumeToken: change.resumeToken,\n                            snapshotVersion: change.snapshotVersion\n                        });\n                    }\n                }\n            });\n            // Finally handle remote event\n            return _this.syncEngine.applyRemoteEvent(remoteEvent);\n        });\n    };\n    /** Handles an error on a target */\n    RemoteStore.prototype.handleTargetError = function (watchChange) {\n        var _this = this;\n        assert(!!watchChange.cause, 'Handling target error without a cause');\n        var error = watchChange.cause;\n        var promiseChain = Promise.resolve();\n        watchChange.targetIds.forEach(function (targetId) {\n            promiseChain = promiseChain.then(function () {\n                if (objUtils.contains(_this.listenTargets, targetId)) {\n                    delete _this.listenTargets[targetId];\n                    return _this.syncEngine.rejectListen(targetId, error);\n                }\n                else {\n                    // A watched target might have been removed already.\n                    return Promise.resolve();\n                }\n            });\n        });\n        return promiseChain;\n    };\n    RemoteStore.prototype.cleanUpWriteStreamState = function () {\n        this.lastBatchSeen = BATCHID_UNKNOWN;\n        this.pendingWrites = [];\n    };\n    /**\n     * Notifies that there are new mutations to process in the queue. This is\n     * typically called by SyncEngine after it has sent mutations to LocalStore.\n     */\n    RemoteStore.prototype.fillWritePipeline = function () {\n        var _this = this;\n        if (!this.canWriteMutations()) {\n            return Promise.resolve();\n        }\n        else {\n            return this.localStore\n                .nextMutationBatch(this.lastBatchSeen)\n                .then(function (batch) {\n                if (batch === null) {\n                    if (_this.pendingWrites.length == 0) {\n                        _this.writeStream.markIdle();\n                    }\n                    return Promise.resolve();\n                }\n                else {\n                    _this.commit(batch);\n                    return _this.fillWritePipeline();\n                }\n            });\n        }\n    };\n    /**\n     * Returns true if the backend can accept additional write requests.\n     *\n     * When sending mutations to the write stream (e.g. in fillWritePipeline),\n     * call this method first to check if more mutations can be sent.\n     *\n     * Currently the only thing that can prevent the backend from accepting\n     * write requests is if there are too many requests already outstanding. As\n     * writes complete the backend will be able to accept more.\n     */\n    RemoteStore.prototype.canWriteMutations = function () {\n        return (this.isNetworkEnabled() && this.pendingWrites.length < MAX_PENDING_WRITES);\n    };\n    // For testing\n    RemoteStore.prototype.outstandingWrites = function () {\n        return this.pendingWrites.length;\n    };\n    /**\n     * Given mutations to commit, actually commits them to the Datastore. Note\n     * that this does *not* return a Promise specifically because the AsyncQueue\n     * should not block operations for this.\n     */\n    RemoteStore.prototype.commit = function (batch) {\n        assert(this.canWriteMutations(), \"commit called when batches can't be written\");\n        this.lastBatchSeen = batch.batchId;\n        this.pendingWrites.push(batch);\n        if (this.shouldStartWriteStream()) {\n            this.startWriteStream();\n        }\n        else if (this.isNetworkEnabled() && this.writeStream.handshakeComplete) {\n            this.writeStream.writeMutations(batch.mutations);\n        }\n    };\n    RemoteStore.prototype.shouldStartWriteStream = function () {\n        return (this.isNetworkEnabled() &&\n            !this.writeStream.isStarted() &&\n            this.pendingWrites.length > 0);\n    };\n    RemoteStore.prototype.startWriteStream = function () {\n        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');\n        this.writeStream.start({\n            onOpen: this.onWriteStreamOpen.bind(this),\n            onClose: this.onWriteStreamClose.bind(this),\n            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n            onMutationResult: this.onMutationResult.bind(this)\n        });\n    };\n    RemoteStore.prototype.onWriteStreamOpen = function () {\n        this.writeStream.writeHandshake();\n        return Promise.resolve();\n    };\n    RemoteStore.prototype.onWriteHandshakeComplete = function () {\n        var _this = this;\n        // Record the stream token.\n        return this.localStore\n            .setLastStreamToken(this.writeStream.lastStreamToken)\n            .then(function () {\n            // Drain any pending writes.\n            //\n            // Note that at this point pendingWrites contains mutations that\n            // have already been accepted by fillWritePipeline/commitBatch. If\n            // the pipeline is full, canWriteMutations will be false, despite\n            // the fact that we actually need to send mutations over.\n            //\n            // This also means that this method indirectly respects the limits\n            // imposed by canWriteMutations since writes can't be added to the\n            // pendingWrites array when canWriteMutations is false. If the\n            // limits imposed by canWriteMutations actually protect us from\n            // DOSing ourselves then those limits won't be exceeded here and\n            // we'll continue to make progress.\n            for (var _i = 0, _a = _this.pendingWrites; _i < _a.length; _i++) {\n                var batch = _a[_i];\n                _this.writeStream.writeMutations(batch.mutations);\n            }\n        });\n    };\n    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {\n        var _this = this;\n        // This is a response to a write containing mutations and should be\n        // correlated to the first pending write.\n        assert(this.pendingWrites.length > 0, 'Got result for empty pending writes');\n        var batch = this.pendingWrites.shift();\n        var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);\n        return this.syncEngine.applySuccessfulWrite(success).then(function () {\n            // It's possible that with the completion of this mutation another\n            // slot has freed up.\n            return _this.fillWritePipeline();\n        });\n    };\n    RemoteStore.prototype.onWriteStreamClose = function (error) {\n        var _this = this;\n        assert(this.isNetworkEnabled(), 'onWriteStreamClose() should only be called when the network is enabled');\n        // If the write stream closed due to an error, invoke the error callbacks if\n        // there are pending writes.\n        if (error && this.pendingWrites.length > 0) {\n            assert(!!error, 'We have pending writes, but the write stream closed without an error');\n            // A promise that is resolved after we processed the error\n            var errorHandling = void 0;\n            if (this.writeStream.handshakeComplete) {\n                // This error affects the actual write.\n                errorHandling = this.handleWriteError(error);\n            }\n            else {\n                // If there was an error before the handshake has finished, it's\n                // possible that the server is unable to process the stream token\n                // we're sending. (Perhaps it's too old?)\n                errorHandling = this.handleHandshakeError(error);\n            }\n            return errorHandling.then(function () {\n                // The write stream might have been started by refilling the write\n                // pipeline for failed writes\n                if (_this.shouldStartWriteStream()) {\n                    _this.startWriteStream();\n                }\n            });\n        }\n        else {\n            // No pending writes, nothing to do\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleHandshakeError = function (error) {\n        // Reset the token if it's a permanent error or the error code is\n        // ABORTED, signaling the write stream is no longer valid.\n        if (isPermanentError(error.code) || error.code === Code.ABORTED) {\n            log.debug(LOG_TAG, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);\n            this.writeStream.lastStreamToken = emptyByteString();\n            return this.localStore.setLastStreamToken(emptyByteString());\n        }\n        else {\n            // Some other error, don't reset stream token. Our stream logic will\n            // just retry with exponential backoff.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.handleWriteError = function (error) {\n        var _this = this;\n        if (isPermanentError(error.code)) {\n            // This was a permanent error, the request itself was the problem\n            // so it's not going to succeed if we resend it.\n            var batch = this.pendingWrites.shift();\n            // In this case it's also unlikely that the server itself is melting\n            // down -- this was just a bad request so inhibit backoff on the next\n            // restart.\n            this.writeStream.inhibitBackoff();\n            return this.syncEngine\n                .rejectFailedWrite(batch.batchId, error)\n                .then(function () {\n                // It's possible that with the completion of this mutation\n                // another slot has freed up.\n                return _this.fillWritePipeline();\n            });\n        }\n        else {\n            // Transient error, just let the retry logic kick in.\n            return Promise.resolve();\n        }\n    };\n    RemoteStore.prototype.createTransaction = function () {\n        return new Transaction(this.datastore);\n    };\n    RemoteStore.prototype.handleUserChange = function (user) {\n        log.debug(LOG_TAG, 'RemoteStore changing users: uid=', user.uid);\n        // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n        // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n        // (since mutations are per-user).\n        this.disableNetwork();\n        return this.enableNetwork();\n    };\n    return RemoteStore;\n}());\nexport { RemoteStore };\n\n//# sourceMappingURL=remote_store.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/remote/remote_store.js\n// module id = 146\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from './snapshot_version';\nimport { documentVersionMap } from '../model/collections';\nimport { NoDocument } from '../model/document';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport { Code, FirestoreError } from '../util/error';\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nvar Transaction = /** @class */ (function () {\n    function Transaction(datastore) {\n        this.datastore = datastore;\n        // The version of each document that was read during this transaction.\n        this.readVersions = documentVersionMap();\n        this.mutations = [];\n        this.committed = false;\n    }\n    Transaction.prototype.recordVersion = function (doc) {\n        var docVersion = doc.version;\n        if (doc instanceof NoDocument) {\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\n            docVersion = SnapshotVersion.forDeletedDoc();\n        }\n        var existingVersion = this.readVersions.get(doc.key);\n        if (existingVersion !== null) {\n            if (!docVersion.equals(existingVersion)) {\n                // This transaction will fail no matter what.\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n            }\n        }\n        else {\n            this.readVersions = this.readVersions.insert(doc.key, docVersion);\n        }\n    };\n    Transaction.prototype.lookup = function (keys) {\n        var _this = this;\n        if (this.committed) {\n            return Promise.reject('Transaction has already completed.');\n        }\n        if (this.mutations.length > 0) {\n            return Promise.reject('Transactions lookups are invalid after writes.');\n        }\n        return this.datastore.lookup(keys).then(function (docs) {\n            docs.forEach(function (doc) { return _this.recordVersion(doc); });\n            return docs;\n        });\n    };\n    Transaction.prototype.write = function (mutations) {\n        if (this.committed) {\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');\n        }\n        this.mutations = this.mutations.concat(mutations);\n    };\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n    Transaction.prototype.precondition = function (key) {\n        var version = this.readVersions.get(key);\n        if (version) {\n            return Precondition.updateTime(version);\n        }\n        else {\n            return Precondition.NONE;\n        }\n    };\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n    Transaction.prototype.preconditionForUpdate = function (key) {\n        var version = this.readVersions.get(key);\n        if (version && version.equals(SnapshotVersion.forDeletedDoc())) {\n            // The document doesn't exist, so fail the transaction.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Can't update a document that doesn't exist.\");\n        }\n        else if (version) {\n            // Document exists, base precondition on document update time.\n            return Precondition.updateTime(version);\n        }\n        else {\n            // Document was not read, so we just use the preconditions for a blind\n            // update.\n            return Precondition.exists(true);\n        }\n    };\n    Transaction.prototype.set = function (key, data) {\n        this.write(data.toMutations(key, this.precondition(key)));\n    };\n    Transaction.prototype.update = function (key, data) {\n        this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    };\n    Transaction.prototype.delete = function (key) {\n        this.write([new DeleteMutation(key, this.precondition(key))]);\n        // Since the delete will be applied before all following writes, we need to\n        // ensure that the precondition for the next write will be exists: false.\n        this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());\n    };\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var unwritten = this.readVersions;\n        // For each mutation, note that the doc was written.\n        this.mutations.forEach(function (mutation) {\n            unwritten = unwritten.remove(mutation.key);\n        });\n        if (!unwritten.isEmpty()) {\n            return Promise.reject(Error('Every document read in a transaction must also be written.'));\n        }\n        return this.datastore.commit(this.mutations).then(function () {\n            _this.committed = true;\n        });\n    };\n    return Transaction;\n}());\nexport { Transaction };\n\n//# sourceMappingURL=transaction.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/core/transaction.js\n// module id = 147\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nvar AsyncObserver = /** @class */ (function () {\n    function AsyncObserver(observer) {\n        this.observer = observer;\n        /**\n         * When set to true, will not raise future events. Necessary to deal with\n         * async detachment of listener.\n         */\n        this.muted = false;\n    }\n    AsyncObserver.prototype.next = function (value) {\n        this.scheduleEvent(this.observer.next, value);\n    };\n    AsyncObserver.prototype.error = function (error) {\n        this.scheduleEvent(this.observer.error, error);\n    };\n    AsyncObserver.prototype.mute = function () {\n        this.muted = true;\n    };\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n        var _this = this;\n        if (!this.muted) {\n            setTimeout(function () {\n                if (!_this.muted) {\n                    eventHandler(event);\n                }\n            }, 0);\n        }\n    };\n    return AsyncObserver;\n}());\nexport { AsyncObserver };\n\n//# sourceMappingURL=async_observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/async_observer.js\n// module id = 148\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert, fail } from './assert';\nimport * as log from './log';\nimport { Deferred } from './promise';\nimport { Code, FirestoreError } from './error';\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        // The last promise in the queue.\n        this.tail = Promise.resolve();\n        // A list with timeout handles and their respective deferred promises.\n        // Contains an entry for each operation that is queued to run in the future\n        // (i.e. it has a delay that has not yet elapsed). Prior to cleanup, this list\n        // may also contain entries that have already been run (in which case `handle` is\n        // null).\n        this.delayedOperations = [];\n        // The number of operations that are queued to be run in the future (i.e. they\n        // have a delay that has not yet elapsed). Unlike `delayedOperations`, this\n        // is guaranteed to only contain operations that have not yet been run.\n        //\n        // Visible for testing.\n        this.delayedOperationsCount = 0;\n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.operationInProgress = false;\n    }\n    /**\n     * Adds a new operation to the queue. Returns a promise that will be resolved\n     * when the promise returned by the new operation is (with its value).\n     *\n     * Can optionally specify a delay (in milliseconds) to wait before queuing the\n     * operation.\n     */\n    AsyncQueue.prototype.schedule = function (op, delay) {\n        var _this = this;\n        if (this.failure) {\n            fail('AsyncQueue is already failed: ' +\n                (this.failure.stack || this.failure.message));\n        }\n        if ((delay || 0) > 0) {\n            this.delayedOperationsCount++;\n            var delayedOp_1 = {\n                handle: null,\n                op: op,\n                deferred: new Deferred()\n            };\n            delayedOp_1.handle = setTimeout(function () {\n                _this.scheduleInternal(function () {\n                    return delayedOp_1.op().then(function (result) {\n                        delayedOp_1.deferred.resolve(result);\n                    });\n                });\n                delayedOp_1.handle = null;\n                _this.delayedOperationsCount--;\n                if (_this.delayedOperationsCount === 0) {\n                    _this.delayedOperations = [];\n                }\n            }, delay);\n            this.delayedOperations.push(delayedOp_1);\n            return delayedOp_1.deferred.promise;\n        }\n        else {\n            return this.scheduleInternal(op);\n        }\n    };\n    AsyncQueue.prototype.scheduleInternal = function (op) {\n        var _this = this;\n        this.tail = this.tail.then(function () {\n            _this.operationInProgress = true;\n            return op()\n                .catch(function (error) {\n                _this.failure = error;\n                _this.operationInProgress = false;\n                var message = error.stack || error.message || '';\n                log.error('INTERNAL UNHANDLED ERROR: ', message);\n                // Escape the promise chain and throw the error globally so that\n                // e.g. any global crash reporting library detects and reports it.\n                // (but not for simulated errors in our tests since this breaks mocha)\n                if (message.indexOf('Firestore Test Simulated Error') < 0) {\n                    setTimeout(function () {\n                        throw error;\n                    }, 0);\n                }\n                // Re-throw the error so that this.tail becomes a rejected Promise and\n                // all further attempts to chain (via .then) will just short-circuit\n                // and return the rejected Promise.\n                throw error;\n            })\n                .then(function () {\n                _this.operationInProgress = false;\n            });\n        });\n        return this.tail;\n    };\n    /**\n     * Verifies there's an operation currently in-progress on the AsyncQueue.\n     * Unfortunately we can't verify that the running code is in the promise chain\n     * of that operation, so this isn't a foolproof check, but it should be enough\n     * to catch some bugs.\n     */\n    AsyncQueue.prototype.verifyOperationInProgress = function () {\n        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');\n    };\n    /**\n     * Waits until all currently scheduled tasks are finished executing. Tasks\n     * scheduled with a delay can be rejected or queued for immediate execution.\n     */\n    AsyncQueue.prototype.drain = function (executeDelayedTasks) {\n        var _this = this;\n        this.delayedOperations.forEach(function (entry) {\n            if (entry.handle) {\n                clearTimeout(entry.handle);\n                if (executeDelayedTasks) {\n                    _this.scheduleInternal(entry.op).then(entry.deferred.resolve, entry.deferred.reject);\n                }\n                else {\n                    entry.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled by shutdown'));\n                }\n            }\n        });\n        this.delayedOperations = [];\n        this.delayedOperationsCount = 0;\n        return this.schedule(function () { return Promise.resolve(); });\n    };\n    return AsyncQueue;\n}());\nexport { AsyncQueue };\n\n//# sourceMappingURL=async_queue.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/util/async_queue.js\n// module id = 149\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { User } from '../auth/user';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nvar OAuthToken = /** @class */ (function () {\n    function OAuthToken(value, user) {\n        this.user = user;\n        this.type = 'OAuth';\n        this.authHeaders = { Authorization: \"Bearer \" + value };\n    }\n    return OAuthToken;\n}());\nexport { OAuthToken };\n/** A CredentialsProvider that always yields an empty token. */\nvar EmptyCredentialsProvider = /** @class */ (function () {\n    function EmptyCredentialsProvider() {\n        /**\n         * Stores the User listener registered with setUserChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.userListener = null;\n    }\n    EmptyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(null);\n    };\n    EmptyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire with initial user.\n        listener(User.UNAUTHENTICATED);\n    };\n    EmptyCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.userListener !== null, 'removeUserChangeListener() when no listener registered');\n        this.userListener = null;\n    };\n    return EmptyCredentialsProvider;\n}());\nexport { EmptyCredentialsProvider };\nvar FirebaseCredentialsProvider = /** @class */ (function () {\n    function FirebaseCredentialsProvider(app) {\n        var _this = this;\n        this.app = app;\n        /**\n         * The auth token listener registered with FirebaseApp, retained here so we\n         * can unregister it.\n         */\n        this.tokenListener = null;\n        /**\n         * Counter used to detect if the user changed while a getToken request was\n         * outstanding.\n         */\n        this.userCounter = 0;\n        /** The User listener registered with setUserChangeListener(). */\n        this.userListener = null;\n        // We listen for token changes but all we really care about is knowing when\n        // the uid may have changed.\n        this.tokenListener = function () {\n            var newUser = _this.getUser();\n            if (!_this.currentUser || !newUser.equals(_this.currentUser)) {\n                _this.currentUser = newUser;\n                _this.userCounter++;\n                if (_this.userListener) {\n                    _this.userListener(_this.currentUser);\n                }\n            }\n        };\n        this.userCounter = 0;\n        // Will fire at least once where we set this.currentUser\n        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n    FirebaseCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        var _this = this;\n        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');\n        // Take note of the current value of the userCounter so that this method can\n        // fail (with an ABORTED error) if there is a user change while the request\n        // is outstanding.\n        var initialUserCounter = this.userCounter;\n        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {\n            // Cancel the request since the user changed while the request was\n            // outstanding so the response is likely for a previous user (which\n            // user, we can't be sure).\n            if (_this.userCounter !== initialUserCounter) {\n                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to uid change.');\n            }\n            else {\n                if (tokenData) {\n                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\n                }\n                else {\n                    return null;\n                }\n            }\n        });\n    };\n    FirebaseCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        assert(!this.userListener, 'Can only call setUserChangeListener() once.');\n        this.userListener = listener;\n        // Fire the initial event, but only if we received the initial user\n        if (this.currentUser) {\n            listener(this.currentUser);\n        }\n    };\n    FirebaseCredentialsProvider.prototype.removeUserChangeListener = function () {\n        assert(this.tokenListener != null, 'removeUserChangeListener() called twice');\n        assert(this.userListener !== null, 'removeUserChangeListener() called when no listener registered');\n        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);\n        this.tokenListener = null;\n        this.userListener = null;\n    };\n    FirebaseCredentialsProvider.prototype.getUser = function () {\n        // TODO(mikelehen): Remove this check once we're shipping with firebase.js.\n        if (typeof this.app.INTERNAL.getUid !== 'function') {\n            fail('This version of the Firestore SDK requires at least version' +\n                ' 3.7.0 of firebase.js.');\n        }\n        var currentUid = this.app.INTERNAL.getUid();\n        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);\n        return new User(currentUid);\n    };\n    return FirebaseCredentialsProvider;\n}());\nexport { FirebaseCredentialsProvider };\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * TODO(b/33147818) this implementation violates the current assumption that\n * tokens are immutable.  We need to either revisit this assumption or come\n * up with some way for FPA to use the listen/unlisten interface.\n */\nvar FirstPartyToken = /** @class */ (function () {\n    function FirstPartyToken(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        this.type = 'FirstParty';\n        this.user = User.FIRST_PARTY;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n        get: function () {\n            return {\n                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),\n                'X-Goog-AuthUser': this.sessionIndex\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FirstPartyToken;\n}());\nexport { FirstPartyToken };\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\n    function FirstPartyCredentialsProvider(gapi, sessionIndex) {\n        this.gapi = gapi;\n        this.sessionIndex = sessionIndex;\n        assert(this.gapi &&\n            this.gapi['auth'] &&\n            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');\n    }\n    FirstPartyCredentialsProvider.prototype.getToken = function (forceRefresh) {\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n    };\n    // TODO(33108925): can someone switch users w/o a page refresh?\n    // TODO(33110621): need to understand token/session lifecycle\n    FirstPartyCredentialsProvider.prototype.setUserChangeListener = function (listener) {\n        // Fire with initial uid.\n        listener(User.FIRST_PARTY);\n    };\n    FirstPartyCredentialsProvider.prototype.removeUserChangeListener = function () { };\n    return FirstPartyCredentialsProvider;\n}());\nexport { FirstPartyCredentialsProvider };\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(credentials) {\n    if (!credentials) {\n        return new EmptyCredentialsProvider();\n    }\n    switch (credentials.type) {\n        case 'gapi':\n            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');\n        case 'provider':\n            return credentials.client;\n        default:\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n    }\n}\n\n//# sourceMappingURL=credentials.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/credentials.js\n// module id = 150\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User = /** @class */ (function () {\n    function User(uid) {\n        this.uid = uid;\n    }\n    User.prototype.isUnauthenticated = function () {\n        return this.uid == null;\n    };\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n    User.prototype.toKey = function () {\n        if (this.isUnauthenticated()) {\n            return 'anonymous-user';\n        }\n        else {\n            return 'uid:' + this.uid;\n        }\n    };\n    User.prototype.equals = function (otherUser) {\n        return otherUser.uid === this.uid;\n    };\n    /** A user with a null UID. */\n    User.UNAUTHENTICATED = new User(null);\n    // TODO(mikelehen): Look into getting a proper uid-equivalent for\n    // non-FirebaseAuth providers.\n    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n    User.FIRST_PARTY = new User('first-party-uid');\n    return User;\n}());\nexport { User };\n\n//# sourceMappingURL=user.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/auth/user.js\n// module id = 151\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isPartialObserver(obj) {\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    var object = obj;\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in object && typeof object[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=observer.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/observer.js\n// module id = 152\n// module chunks = 0","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from '../core/timestamp';\nimport { ObjectValue } from '../model/field_value';\nimport { ArrayValue, BlobValue, BooleanValue, DoubleValue, GeoPointValue, IntegerValue, NullValue, RefValue, StringValue, TimestampValue } from '../model/field_value';\nimport { FieldMask, FieldTransform, PatchMutation, ServerTimestampTransform, SetMutation, TransformMutation } from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { assert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\nimport { Blob } from './blob';\nimport { FieldPath as ExternalFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, FieldValueImpl, ServerTimestampFieldValueImpl } from './field_value';\nimport { GeoPoint } from './geo_point';\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nvar ParsedSetData = /** @class */ (function () {\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedSetData.prototype.toMutations = function (key, precondition) {\n        var mutations = [];\n        if (this.fieldMask !== null) {\n            mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));\n        }\n        else {\n            mutations.push(new SetMutation(key, this.data, precondition));\n        }\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedSetData;\n}());\nexport { ParsedSetData };\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nvar ParsedUpdateData = /** @class */ (function () {\n    function ParsedUpdateData(data, fieldMask, fieldTransforms) {\n        this.data = data;\n        this.fieldMask = fieldMask;\n        this.fieldTransforms = fieldTransforms;\n    }\n    ParsedUpdateData.prototype.toMutations = function (key, precondition) {\n        var mutations = [\n            new PatchMutation(key, this.data, this.fieldMask, precondition)\n        ];\n        if (this.fieldTransforms.length > 0) {\n            mutations.push(new TransformMutation(key, this.fieldTransforms));\n        }\n        return mutations;\n    };\n    return ParsedUpdateData;\n}());\nexport { ParsedUpdateData };\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nvar UserDataSource;\n(function (UserDataSource) {\n    UserDataSource[UserDataSource[\"Set\"] = 0] = \"Set\";\n    UserDataSource[UserDataSource[\"Update\"] = 1] = \"Update\";\n    UserDataSource[UserDataSource[\"MergeSet\"] = 2] = \"MergeSet\";\n    UserDataSource[UserDataSource[\"QueryValue\"] = 3] = \"QueryValue\"; // from a where clause or cursor bound\n})(UserDataSource || (UserDataSource = {}));\nfunction isWrite(dataSource) {\n    switch (dataSource) {\n        case UserDataSource.Set: // fall through\n        case UserDataSource.MergeSet: // fall through\n        case UserDataSource.Update:\n            return true;\n        case UserDataSource.QueryValue:\n            return false;\n        default:\n            throw fail(\"Unexpected case for UserDataSource: \" + dataSource);\n    }\n}\n/** A \"context\" object passed around while parsing user data. */\nvar ParseContext = /** @class */ (function () {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param dataSource Indicates what kind of API method this data came from.\n     * @param methodName The name of the method the user called to create this\n     *     ParseContext.\n     * @param path A path within the object being parsed. This could be an empty\n     *     path (in which case the context represents the root of the data being\n     *     parsed), or a nonempty path (indicating the context represents a nested\n     *     location within the data).\n     * @param arrayElement Whether or not this context corresponds to an element\n     *     of an array.\n     * @param fieldTransforms A mutable list of field transforms encountered while\n     *     parsing the data.\n     * @param fieldMask A mutable list of field paths encountered while parsing\n     *     the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {\n        this.dataSource = dataSource;\n        this.methodName = methodName;\n        this.path = path;\n        this.arrayElement = arrayElement;\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        if (fieldTransforms === undefined) {\n            this.validatePath();\n        }\n        this.arrayElement = arrayElement !== undefined ? arrayElement : false;\n        this.fieldTransforms = fieldTransforms || [];\n        this.fieldMask = fieldMask || [];\n    }\n    ParseContext.prototype.childContextForField = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePathSegment(field);\n        return context;\n    };\n    ParseContext.prototype.childContextForFieldPath = function (field) {\n        var childPath = this.path == null ? null : this.path.child(field);\n        var context = new ParseContext(this.dataSource, this.methodName, childPath, \n        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);\n        context.validatePath();\n        return context;\n    };\n    ParseContext.prototype.childContextForArray = function (index) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // null.\n        return new ParseContext(this.dataSource, this.methodName, \n        /*path=*/ null, \n        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);\n    };\n    ParseContext.prototype.createError = function (reason) {\n        var fieldDescription = this.path === null || this.path.isEmpty()\n            ? ''\n            : \" (found in field \" + this.path.toString() + \")\";\n        return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + this.methodName + \"() called with invalid data. \" +\n            reason +\n            fieldDescription);\n    };\n    ParseContext.prototype.validatePath = function () {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path === null) {\n            return;\n        }\n        for (var i = 0; i < this.path.length; i++) {\n            this.validatePathSegment(this.path.get(i));\n        }\n    };\n    ParseContext.prototype.validatePathSegment = function (segment) {\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n            throw this.createError('Document fields cannot begin and end with __');\n        }\n    };\n    ParseContext.prototype.isWrite = function () {\n        return (this.dataSource === UserDataSource.Set ||\n            this.dataSource === UserDataSource.Update);\n    };\n    return ParseContext;\n}());\n/**\n * A placeholder object for DocumentReferences in this file, in order to\n * avoid a circular dependency. See the comments for `DataPreConverter` for\n * the full context.\n */\nvar DocumentKeyReference = /** @class */ (function () {\n    function DocumentKeyReference(databaseId, key) {\n        this.databaseId = databaseId;\n        this.key = key;\n    }\n    return DocumentKeyReference;\n}());\nexport { DocumentKeyReference };\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nvar UserDataConverter = /** @class */ (function () {\n    function UserDataConverter(preConverter) {\n        this.preConverter = preConverter;\n    }\n    /** Parse document data from a non-merge set() call.*/\n    UserDataConverter.prototype.parseSetData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        return new ParsedSetData(updateData, \n        /* fieldMask= */ null, context.fieldTransforms);\n    };\n    /** Parse document data from a set() call with '{merge:true}'. */\n    UserDataConverter.prototype.parseMergeData = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var updateData = this.parseData(input, context);\n        var fieldMask = new FieldMask(context.fieldMask);\n        return new ParsedSetData(updateData, fieldMask, context.fieldTransforms);\n    };\n    /** Parse update data from an update() call. */\n    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {\n        var _this = this;\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        validatePlainObject('Data must be an object, but it was:', context, input);\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        objUtils.forEach(input, function (key, value) {\n            var path = fieldPathFromDotSeparatedString(methodName, key);\n            var childContext = context.childContextForFieldPath(path);\n            value = _this.runPreConverter(value, childContext);\n            if (value instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = _this.parseData(value, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        });\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /** Parse update data from a list of field/value arguments. */\n    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {\n        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);\n        var keys = [fieldPathFromArgument(methodName, field)];\n        var values = [value];\n        if (moreFieldsAndValues.length % 2 !== 0) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\n                'of arguments that alternate between field names and values.');\n        }\n        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));\n            values.push(moreFieldsAndValues[i + 1]);\n        }\n        var fieldMaskPaths = [];\n        var updateData = ObjectValue.EMPTY;\n        for (var i = 0; i < keys.length; ++i) {\n            var path = keys[i];\n            var childContext = context.childContextForFieldPath(path);\n            var value_1 = this.runPreConverter(values[i], childContext);\n            if (value_1 instanceof DeleteFieldValueImpl) {\n                // Add it to the field mask, but don't add anything to updateData.\n                fieldMaskPaths.push(path);\n            }\n            else {\n                var parsedValue = this.parseData(value_1, childContext);\n                if (parsedValue != null) {\n                    fieldMaskPaths.push(path);\n                    updateData = updateData.set(path, parsedValue);\n                }\n            }\n        }\n        var mask = new FieldMask(fieldMaskPaths);\n        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n    };\n    /**\n     * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n     * bound).\n     */\n    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {\n        var context = new ParseContext(UserDataSource.QueryValue, methodName, FieldPath.EMPTY_PATH);\n        var parsed = this.parseData(input, context);\n        assert(parsed != null, 'Parsed data should not be null.');\n        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');\n        return parsed;\n    };\n    /** Sends data through this.preConverter, handling any thrown errors. */\n    UserDataConverter.prototype.runPreConverter = function (input, context) {\n        try {\n            return this.preConverter(input);\n        }\n        catch (e) {\n            var message = errorMessage(e);\n            throw context.createError(message);\n        }\n    };\n    /**\n     * Internal helper for parsing user data.\n     *\n     * @param input Data to be parsed.\n     * @param context A context object representing the current path being parsed,\n     * the source of the data being parsed, etc.\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseData = function (input, context) {\n        input = this.runPreConverter(input, context);\n        if (input instanceof Array) {\n            // TODO(b/34871131): Include the path containing the array in the error\n            // message.\n            if (context.arrayElement) {\n                throw context.createError('Nested arrays are not supported');\n            }\n            // If context.path is null we are already inside an array and we don't\n            // support field mask paths more granular than the top-level array.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseArray(input, context);\n        }\n        else if (looksLikeJsonObject(input)) {\n            validatePlainObject('Unsupported field value:', context, input);\n            return this.parseObject(input, context);\n        }\n        else {\n            // If context.path is null, we are inside an array and we should have\n            // already added the root of the array to the field mask.\n            if (context.path) {\n                context.fieldMask.push(context.path);\n            }\n            return this.parseScalarValue(input, context);\n        }\n    };\n    UserDataConverter.prototype.parseArray = function (array, context) {\n        var result = [];\n        var entryIndex = 0;\n        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n            var entry = array_1[_i];\n            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));\n            if (parsedEntry == null) {\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                parsedEntry = NullValue.INSTANCE;\n            }\n            result.push(parsedEntry);\n            entryIndex++;\n        }\n        return new ArrayValue(result);\n    };\n    UserDataConverter.prototype.parseObject = function (obj, context) {\n        var _this = this;\n        var result = new SortedMap(primitiveComparator);\n        objUtils.forEach(obj, function (key, val) {\n            var parsedValue = _this.parseData(val, context.childContextForField(key));\n            if (parsedValue != null) {\n                result = result.insert(key, parsedValue);\n            }\n        });\n        return new ObjectValue(result);\n    };\n    /**\n     * Helper to parse a scalar value (i.e. not an Object or Array)\n     *\n     * @return The parsed value, or null if the value was a FieldValue sentinel\n     * that should not be included in the resulting parsed data.\n     */\n    UserDataConverter.prototype.parseScalarValue = function (value, context) {\n        if (value === null) {\n            return NullValue.INSTANCE;\n        }\n        else if (typeof value === 'number') {\n            if (typeUtils.isSafeInteger(value)) {\n                return new IntegerValue(value);\n            }\n            else {\n                return new DoubleValue(value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            return BooleanValue.of(value);\n        }\n        else if (typeof value === 'string') {\n            return new StringValue(value);\n        }\n        else if (value instanceof Date) {\n            return new TimestampValue(Timestamp.fromDate(value));\n        }\n        else if (value instanceof GeoPoint) {\n            return new GeoPointValue(value);\n        }\n        else if (value instanceof Blob) {\n            return new BlobValue(value);\n        }\n        else if (value instanceof DocumentKeyReference) {\n            return new RefValue(value.databaseId, value.key);\n        }\n        else if (value instanceof FieldValueImpl) {\n            if (value instanceof DeleteFieldValueImpl) {\n                if (context.dataSource == UserDataSource.MergeSet) {\n                    return null;\n                }\n                else if (context.dataSource === UserDataSource.Update) {\n                    assert(context.path == null || context.path.length > 0, 'FieldValue.delete() at the top level should have already' +\n                        ' been handled.');\n                    throw context.createError('FieldValue.delete() can only appear at the top level ' +\n                        'of your update data');\n                }\n                else {\n                    // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n                    throw context.createError('FieldValue.delete() can only be used with update() and set() with {merge:true}');\n                }\n            }\n            else if (value instanceof ServerTimestampFieldValueImpl) {\n                if (!isWrite(context.dataSource)) {\n                    throw context.createError('FieldValue.serverTimestamp() can only be used with set()' +\n                        ' and update()');\n                }\n                if (context.path === null) {\n                    throw context.createError('FieldValue.serverTimestamp() is not currently' +\n                        ' supported inside arrays');\n                }\n                context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));\n                // Return null so this value is omitted from the parsed result.\n                return null;\n            }\n            else {\n                return fail('Unknown FieldValue type: ' + value);\n            }\n        }\n        else {\n            throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n        }\n    };\n    return UserDataConverter;\n}());\nexport { UserDataConverter };\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n    return (typeof input === 'object' &&\n        input !== null &&\n        !(input instanceof Array) &&\n        !(input instanceof Date) &&\n        !(input instanceof GeoPoint) &&\n        !(input instanceof Blob) &&\n        !(input instanceof DocumentKeyReference) &&\n        !(input instanceof FieldValueImpl));\n}\nfunction validatePlainObject(message, context, input) {\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n        var description = valueDescription(input);\n        if (description === 'an object') {\n            // Massage the error if it was an object.\n            throw context.createError(message + ' a custom object');\n        }\n        else {\n            throw context.createError(message + ' ' + description);\n        }\n    }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(methodName, path) {\n    if (path instanceof ExternalFieldPath) {\n        return path._internalPath;\n    }\n    else if (typeof path === 'string') {\n        return fieldPathFromDotSeparatedString(methodName, path);\n    }\n    else {\n        var message = 'Field path arguments must be of type string or FieldPath.';\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path) {\n    try {\n        return fromDotSeparatedString(path)._internalPath;\n    }\n    catch (e) {\n        var message = errorMessage(e);\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() called with invalid data. \" + message);\n    }\n}\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error) {\n    return error instanceof Error ? error.message : error.toString();\n}\n\n//# sourceMappingURL=user_data_converter.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@firebase/firestore/dist/esm/src/api/user_data_converter.js\n// module id = 153\n// module chunks = 0"],"sourceRoot":""}